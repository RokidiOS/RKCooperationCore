#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef RKCOOPERATIONCORE_SWIFT_H
#define RKCOOPERATIONCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import JCSDKOC;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RKCooperationCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC17RKCooperationCore12RKAPIManager")
@interface RKAPIManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class NSError;

SWIFT_PROTOCOL("_TtP17RKCooperationCore25RKCooperationAPIInterface_")
@protocol RKCooperationAPIInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKAPIManager * _Null_unspecified shared;)
+ (RKAPIManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 登录
/// \param companyId 公司
///
/// \param userName 用户名
///
/// \param password 密码
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)loginWithCompanyId:(NSString * _Nonnull)companyId userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 刷新token
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)refreshTokenWithParams:(NSDictionary<NSString *, NSString *> * _Nonnull)params onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 联系人分组列表
/// \param keyword 查询关键字
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)groupListWithKeyword:(NSString * _Nullable)keyword onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 联系人列表
/// \param keyword 查询关键字
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)contactsListWithKeyword:(NSString * _Nullable)keyword onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryCompanyUserListBy:(NSArray<NSString *> * _Nonnull)licenseCodeList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 创建会议
/// \param resolutionRatio 分辨率
///
/// \param meetingName 会议名称
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)createChannelWithResolutionRatio:(NSString * _Nullable)resolutionRatio meetingName:(NSString * _Nullable)meetingName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取用户信息
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)getUserInfoOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 上报心跳
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)heartBeatOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 通过会议ID查询会议
/// \param meetingId 会议ID
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)getMeetingWithMeetingId:(NSString * _Null_unspecified)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 修改密码
/// \param old 旧密码
///
/// \param new 新密码
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)changePwdWithOld:(NSString * _Null_unspecified)old new:(NSString * _Null_unspecified)new_ onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取二维码token
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)getGlassBindTokenOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取录制视频的URL
/// \param bucketName 文件夹名字
///
/// \param expireTime 过期时间
///
/// \param fileName 文件名
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)getRecordVideoFileUrlWithBucketName:(NSString * _Null_unspecified)bucketName expireTime:(NSInteger)expireTime fileName:(NSArray<NSString *> * _Null_unspecified)fileName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 查询会议记录分页列表
/// \param pageNum 页码 默认1
///
/// \param pageSize 分页数量 默认10
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)queryUserMeetingRecordPageWith:(NSInteger)pageNum pageSize:(NSInteger)pageSize onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设备用户设备信息上报
/// \param registerId 极光推送ID
///
/// \param isSlam 是否支持slam
///
/// \param deviceType 1-android  2-ios  3-pc  4-glass  5-web
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)reportDeviceInfoWith:(NSString * _Nullable)registerId isSlam:(BOOL)isSlam deviceType:(NSInteger)deviceType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
@end

@class UIImage;

@interface RKAPIManager (SWIFT_EXTENSION(RKCooperationCore)) <RKCooperationAPIInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKAPIManager * _Nonnull shared;)
+ (RKAPIManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 用户token
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull token;)
+ (NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
+ (void)setToken:(NSString * _Nonnull)value;
/// 登录
- (void)loginWithCompanyId:(NSString * _Nonnull)companyId userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 刷新token
- (void)refreshTokenWithParams:(NSDictionary<NSString *, NSString *> * _Nonnull)params onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 联系人分组列表
- (void)groupListWithKeyword:(NSString * _Nullable)keyword onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 联系人列表
- (void)contactsListWithKeyword:(NSString * _Nullable)keyword onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryCompanyUserListBy:(NSArray<NSString *> * _Nonnull)licenseCodeList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 创建会议
- (void)createChannelWithResolutionRatio:(NSString * _Nullable)resolutionRatio meetingName:(NSString * _Nullable)meetingName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取用户信息
- (void)getUserInfoOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)getCompanyLisenceOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)heartBeatOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 通过会议ID查询会议
- (void)getMeetingWithMeetingId:(NSString * _Null_unspecified)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 修改密码
- (void)changePwdWithOld:(NSString * _Null_unspecified)old new:(NSString * _Null_unspecified)new_ onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 上传图片
- (void)uploadImageWithImgs:(NSArray<UIImage *> * _Nonnull)imgs onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取二维码token
- (void)getGlassBindTokenOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取用户URL
- (void)getRecordVideoFileUrlWithBucketName:(NSString * _Null_unspecified)bucketName expireTime:(NSInteger)expireTime fileName:(NSArray<NSString *> * _Null_unspecified)fileName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 查询会议记录分页列表
- (void)queryUserMeetingRecordPageWith:(NSInteger)pageNum pageSize:(NSInteger)pageSize onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 新增会议参会人
- (void)saveMeetingUsersWith:(NSString * _Null_unspecified)meetingId userIdList:(NSArray<NSString *> * _Null_unspecified)userIdList sessionStatus:(NSInteger)sessionStatus onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 删除会议参会人
- (void)deleteMeetingUsersWith:(NSString * _Null_unspecified)meetingId userIdList:(NSArray<NSString *> * _Null_unspecified)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 上传录制会议视频
- (void)saveMeetingVideoUrlWith:(NSString * _Nonnull)meetingId bucket:(NSString * _Nonnull)bucket videoUrl:(NSString * _Nonnull)videoUrl onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设备用户设备信息上报
- (void)reportDeviceInfoWith:(NSString * _Nullable)registerId isSlam:(BOOL)isSlam deviceType:(NSInteger)deviceType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 发送推送
- (void)sendPushMessageTo:(NSArray<NSString *> * _Nullable)userIdList notificationMessage:(NSDictionary<NSString *, NSString *> * _Nonnull)notificationMessage extraMap:(NSDictionary<NSString *, NSString *> * _Nonnull)extraMap onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)getTaggingColorWithMeetingId:(NSString * _Nonnull)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)reportMeetingInfoWithMeetingId:(NSString * _Nonnull)meetingId promoterUserId:(NSString * _Nonnull)promoterUserId executorUserId:(NSString * _Nonnull)executorUserId shareType:(NSInteger)shareType shareImageUrl:(NSString * _Nonnull)shareImageUrl onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryReportMeetingInfoWithMeetingId:(NSString * _Nonnull)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)addMeetingGraffitiWithMeetingId:(NSString * _Nonnull)meetingId graffitiJsonList:(NSArray<NSString *> * _Nonnull)graffitiJsonList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryMeetingGraffitiWithMeetingId:(NSString * _Nonnull)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)clearMeetingGraffitiWithMeetingId:(NSString * _Nonnull)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
@end

typedef SWIFT_ENUM(NSInteger, RKAudioOutputType, open) {
  RKAudioOutputTypeNONE = 0,
};


SWIFT_CLASS("_TtC17RKCooperationCore12RKAudioParam")
@interface RKAudioParam : NSObject
/// 音频输入采样率 0 表示自动选择，手表等设备可以设置为 8000，默认值为 0
@property (nonatomic) NSInteger audioInputSamplingRate;
/// 音频输出采样率 0 表示自动选择，手表等设备可以设置为 8000，默认值为 0
@property (nonatomic) NSInteger audioOutputSamplingRate;
/// 音频输入通道数量 0 表示自动选择，0 和 1 表示单通道，>= 2 表示双通道，默认值为0
@property (nonatomic) NSInteger audioInputChannelNumber;
/// 音频输出通道数量 0 表示自动选择，0 和 1 表示单通道，>= 2 表示双通道，默认值为0
@property (nonatomic) NSInteger audioOutputChannelNumber;
/// 是否自动打开音频输出设备
@property (nonatomic) BOOL autoStartAudioOutputDevice;
/// 是否自动打开音频输入设备
@property (nonatomic) BOOL autoStartAudioInputDevice;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKCallManager;
@class RKChannelParam;
@protocol RKCallListener;
@protocol RKIncomingCallListener;

SWIFT_PROTOCOL("_TtP17RKCooperationCore15RKCallInterface_")
@protocol RKCallInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCallManager * _Null_unspecified shared;)
+ (RKCallManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 邀请加入频道 对方将收到 RKIncomingCallListener.onReceiveCall
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     userIdList:  邀请的用户ID列表
///   </li>
///   <li>
///     channelTitle: 邀请的用户ID列表
///   </li>
///   <li>
///     channelParam:  频道参数
///   </li>
/// </ul>
- (void)inviteWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList channelTitle:(NSString * _Nullable)channelTitle channelParam:(RKChannelParam * _Nullable)channelParam;
/// 取消呼叫，呼叫方将收到 RKCallListener.onCallCancel
/// \param channelId 频道ID 
///
- (void)cancelWithChannelId:(NSString * _Nonnull)channelId;
/// 接听
/// \param channelId 频道ID 
///
- (void)acceptWithChannelId:(NSString * _Nonnull)channelId;
/// 拒绝加入频道、原因是正在其他频道忙(同时只能加入一个频道) 对方将收到 RKCallListener.onCallBusy
/// \param channelId 频道ID 
///
- (void)busyWithChannelId:(NSString * _Nonnull)channelId;
/// 主动拒绝加入频道
/// <ul>
///   <li>
///     Parameter对方将收到 RKCallListener.onCallRejected
///   </li>
/// </ul>
/// \param channelId 拒绝的频道ID 
///
- (void)rejectWithChannelId:(NSString * _Nonnull)channelId;
/// 设置呼叫监听
/// \param listener @RKCallListener
///
- (void)addCallStateWithListener:(id <RKCallListener> _Nonnull)listener;
/// 设置呼叫监听
/// \param listener @RKCallListener
///
- (void)removeCallStateWithListener:(id <RKCallListener> _Nonnull)listener;
/// 移除来电监听
/// \param listener @RKIncomingCallListener
///
- (void)addIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
/// 移除来电监听
/// \param listener @RKIncomingCallListener
///
- (void)removeIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
@end

@class RKChannel;
enum RKErrorCode : NSInteger;

SWIFT_PROTOCOL("_TtP17RKCooperationCore14RKCallListener_")
@protocol RKCallListener <NSObject>
@optional
/// 频道创建回调
/// \param channelId 频道ID 
///
/// \param channel @RKChannel 
///
- (void)onChannelCreatedWithChannelId:(NSString * _Nonnull)channelId channel:(RKChannel * _Nonnull)channel;
/// 邀请发送结果回调
/// \param channelId 频道ID 
///
/// \param userId 用户ID 
///
/// \param result 邀请发送结果 
///
/// \param reason 邀请失败的原因，@RKErrorCode 
///
- (void)onInviteResultWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId result:(BOOL)result reason:(enum RKErrorCode)reason;
/// 用户接受了邀请
/// \param channelId 频道ID 
///
/// \param userId 用户ID 
///
- (void)onCallAcceptWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 被呼叫的用户正忙
/// \param channelId 频道ID 
///
/// \param userId 用户ID 
///
- (void)onCallBusyWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 被呼叫的用户拒绝了加入频道
/// \param channelId 频道ID 
///
/// \param userId 用户ID 
///
- (void)onCallRejectedWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 呼叫或加入失败了
/// \param channelId 频道ID 
///
/// \param reason 失败的原因 
///
- (void)onErrorWithChannelId:(NSString * _Nonnull)channelId reason:(enum RKErrorCode)reason;
@end


SWIFT_CLASS("_TtC17RKCooperationCore13RKCallManager")
@interface RKCallManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore13RKMsgListener_")
@protocol RKMsgListener <NSObject>
@optional
/// 收到透传在线消息
- (void)onlineMessageReceivedFrom:(NSString * _Nonnull)userId message:(NSString * _Nonnull)message;
@end

@class RKMessage;

SWIFT_PROTOCOL("_TtP17RKCooperationCore17RKMessageListener_")
@protocol RKMessageListener <RKMsgListener>
/// 收到在线消息
- (void)onlineMessageReceivedWithMsg:(RKMessage * _Nonnull)msg;
@end


@interface RKCallManager (SWIFT_EXTENSION(RKCooperationCore)) <RKMessageListener>
- (void)onlineMessageReceivedWithMsg:(RKMessage * _Nonnull)msg;
@end


@interface RKCallManager (SWIFT_EXTENSION(RKCooperationCore)) <RKCallInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCallManager * _Null_unspecified shared;)
+ (RKCallManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (void)destroy;
- (void)inviteWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList channelTitle:(NSString * _Nullable)channelTitle channelParam:(RKChannelParam * _Nullable)channelParam;
- (void)cancelWithChannelId:(NSString * _Nonnull)channelId;
- (void)acceptWithChannelId:(NSString * _Nonnull)channelId;
- (void)busyWithChannelId:(NSString * _Nonnull)channelId;
- (void)rejectWithChannelId:(NSString * _Nonnull)channelId;
- (void)addIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
- (void)removeIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
- (void)addCallStateWithListener:(id <RKCallListener> _Nonnull)listener;
- (void)removeCallStateWithListener:(id <RKCallListener> _Nonnull)listener;
- (void)startCallListener;
@end

typedef SWIFT_ENUM(NSInteger, RKCameraType, open) {
/// 未找到摄像头
  RKCameraTypeNONE = 0,
/// 前置摄像头
  RKCameraTypeFRONT = 1,
/// 后置摄像头
  RKCameraTypeBACK = 2,
/// 其他摄像头
  RKCameraTypeOTHER = 3,
};

@class RKChannelParticipant;
@class RKMeetingLife;
@class RKRemoteRecordParams;
@class RKCompanyUser;

SWIFT_CLASS("_TtC17RKCooperationCore9RKChannel")
@interface RKChannel : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, readonly, copy) NSArray<RKChannelParticipant *> * _Nonnull participants;
@property (nonatomic, strong) RKMeetingLife * _Nullable meetingLife;
@property (nonatomic, strong) RKChannelParam * _Nullable channelParam;
@property (nonatomic, strong) RKRemoteRecordParams * _Nullable recordParams;
@property (nonatomic, readonly, strong) RKChannelParticipant * _Nullable participantSelf;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Null_unspecified userIds;
- (RKCompanyUser * _Nullable)memberFromUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RKChannelMsgListener;
@protocol RKChannelListener;
@protocol RKDeviceListener;
@protocol RKRemoteDeviceListener;
@protocol RKShareListener;
enum RKVideoSize : NSInteger;
enum RKNetStatus : NSInteger;
enum RKVolumeStatus : NSInteger;
enum RKChannelState : NSInteger;
@protocol RKOperationListener;
enum RKResolution : NSInteger;
enum RKRecordState : NSInteger;

SWIFT_PROTOCOL("_TtP17RKCooperationCore18RKChannelInterface_")
@protocol RKChannelInterface <NSObject>
/// 添加频道内消息监听
/// \param listener @RKChannelMsgListener 
///
- (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
/// 移除频道内监听
/// \param listener @RKChannelMsgListener 
///
- (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
/// 添加监听
/// \param listener @RKChannelListener 
///
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 移除监听
/// \param listener @RKChannelListener 
///
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 添加本地设备监听
/// \param listener @RKDeviceListener 
///
- (void)addDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
/// 移除本地设备监听
/// \param listener @RKDeviceListener 
///
- (void)removeDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
/// 添加远端设备监听
/// \param listener @RKDeviceListener 
///
- (void)addRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
/// 移除远端设备监听
/// \param listener @RKRemoteDeviceListener 
///
- (void)removeRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
/// 添加分享功能监听
/// \param listener @RKShareListener 
///
- (void)addShareWithListener:(id <RKShareListener> _Nonnull)listener;
/// 移除分享功能监听
/// \param listener @RKShareListener 
///
- (void)removeShareWithListener:(id <RKShareListener> _Nonnull)listener;
/// 加入频道
- (void)joinWithParam:(RKChannelParam * _Nullable)param;
/// 离开频道
- (void)leave;
/// 将指定用户踢出频道
/// \param userId 踢出用户的userId 
///
- (void)kickOutUserWithUserId:(NSString * _Nonnull)userId;
/// 关闭频道，其他端将自动退出频道，调用后将在[RKChannelListener.onChannelStopResult]收到关闭结果
/// 调用端将收到onChannelStopResult回调，其他端将受到[RKChannelListener.onChannelStopResult]，
/// 并且reason值为[RKErrorCode.CHANNEL_OVER]
- (void)dispose;
/// 是否开启上传音频流
/// \param enable true 开启，false: 关闭
///
- (void)enableUploadLocalAudioStreamWithEnable:(BOOL)enable;
/// 是否开启上传视频流
/// \param enable true 开启，false: 关闭
///
- (void)enableUploadLocalVideoStreamWithEnable:(BOOL)enable;
/// 是否开启本地音频输出
/// \param enable true 开启，false: 关闭
///
- (void)enableAudioOutputWithEnable:(BOOL)enable;
/// 获取用户上传的视频流大小
/// <ul>
///   <li>
///     Return @RKVideoSize
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (enum RKVideoSize)getVideoSizeWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 是否频道创建者
/// \param userId 用户ID 
///
- (BOOL)isCreatorWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取频道内用户的网络状态
/// <ul>
///   <li>
///     Return 见[NetStatus]
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (enum RKNetStatus)getNetStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取用户音频是否上传
/// <ul>
///   <li>
///     Return true: 开启，false: 未开启
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (BOOL)isAudioUploadWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取用户视频是否上传
/// <ul>
///   <li>
///     Return true: 开启，false: 未开启
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (BOOL)isVideoUploadWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取用户mic输入音量状态
/// <ul>
///   <li>
///     Return @RKVolumeStatus
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (enum RKVolumeStatus)getVolumeStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取用户设置的显示昵称
/// <ul>
///   <li>
///     Return 用户设置的显示昵称
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (NSString * _Nullable)getDisplayNameWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕共享流
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 获取视频流所属用户id
///   </li>
///   <li>
///     videoSize: 共享流的视频尺寸， @RKVideoSize
///   </li>
/// </ul>
- (void)requestScreenVideoWithUserId:(NSString * _Nonnull)userId videoSize:(enum RKVideoSize)videoSize;
/// 设置频道自定义属性，设置后所有成员将通过 [RKChannelListener.onCustomPropertyChanged]
/// 收到最新的属性值
/// \param property 要设置的频道自定义属性 
///
- (void)setCustomWithProperty:(NSString * _Nonnull)property;
/// 查询频道自定义属性
/// <ul>
///   <li>
///     Return 返回频道的自定义属性
///   </li>
/// </ul>
- (NSString * _Nullable)getCustomProperty SWIFT_WARN_UNUSED_RESULT;
/// 发送频道内消息，toUserId不为空时将发送给指定用户，否则发给频道内所有用户
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     msg: 要发送的频道消息主体
///   </li>
///   <li>
///     toUserIds: 要发送的频道用户Id list，如果传nil则发送给频道内所有成员
///   </li>
///   <li>
///     operationListener: 发送频道消息的结果，@RKOperationListener
///   </li>
/// </ul>
- (void)sendChannelMessageWithMsg:(NSString * _Nonnull)msg to:(NSArray<NSString *> * _Nullable)userIds;
/// 获取频道id
/// <ul>
///   <li>
///     Return 当前频道ID，如果未加入频道则返回null
///   </li>
/// </ul>
- (NSString * _Nullable)getChannelId SWIFT_WARN_UNUSED_RESULT;
/// 获取频道当前状态
/// <ul>
///   <li>
///     Return @RKChannelState
///   </li>
/// </ul>
- (enum RKChannelState)getChannelState SWIFT_WARN_UNUSED_RESULT;
/// 获取频道密码，未设置默认123456
/// <ul>
///   <li>
///     Return 当前频道的密码，密码由创建房间的人设置，见[ChannelParam.password]
///   </li>
/// </ul>
- (NSString * _Nullable)getChannelPassword SWIFT_WARN_UNUSED_RESULT;
/// 本地音频是否上传
/// <ul>
///   <li>
///     Return true: 本地音频正在上传，false: 本地音频未在上传
///   </li>
/// </ul>
- (BOOL)isLocalAudioUpload SWIFT_WARN_UNUSED_RESULT;
/// 本地视频是否上传
/// <ul>
///   <li>
///     Return true: 本地视频正在上传，false: 本地视频未在上传
///   </li>
/// </ul>
- (BOOL)isLocalVideoUpload SWIFT_WARN_UNUSED_RESULT;
/// 本地音频输出与否
/// <ul>
///   <li>
///     Return true: 当前已开启音频输出，false: 当前未开启音频输出
///   </li>
/// </ul>
- (BOOL)isLocalAudioOutput SWIFT_WARN_UNUSED_RESULT;
/// 频道是否在共享屏幕
/// <ul>
///   <li>
///     true: 有人在共享屏幕，false: 没有人在共享屏幕
///   </li>
/// </ul>
- (BOOL)isScreenShare SWIFT_WARN_UNUSED_RESULT;
/// 获取频道内正在共享的用户userId
/// <ul>
///   <li>
///     Return 返回当前正在屏幕共享的用户id，如果当前没有用户在共享屏幕则返回null
///   </li>
/// </ul>
- (NSString * _Nullable)getScreenShareUserId SWIFT_WARN_UNUSED_RESULT;
/// 查询频道信息
/// \param result 查询频道信息结果，@RKOperationListener 
///
- (void)queryChannelWithResult:(id <RKOperationListener> _Nonnull)result;
/// 获取频道的最大分辨率
/// 频道中的最大分辩由第一个加入频道的用户决定， JoinParam 参数中设置的分辩率并一定是频道的最大分辨率，
/// 只有加入成功后才能准确知道
/// <ul>
///   <li>
///     Return @RKResolution
///   </li>
/// </ul>
- (enum RKResolution)getMaxResolution SWIFT_WARN_UNUSED_RESULT;
- (void)setRecordWithParams:(RKRemoteRecordParams * _Nonnull)params;
/// 开启云端视频录制，需要在录制状态[RecordState.STATE_READY]的时候调用，同时如果需要开启云端录制，需要在
/// 创建频道的时候在[IChannel.join]函数的[ChannelParam.recordParam]传入录制参数
/// @param enable true: 开启，false: 关闭
- (void)enableRecordWithEnable:(BOOL)enable;
/// 查询视频录制状态
/// <ul>
///   <li>
///     Return @RKRecordState
///   </li>
/// </ul>
- (enum RKRecordState)getRecordState SWIFT_WARN_UNUSED_RESULT;
/// 开启屏幕共享
- (void)startShareScreen;
/// 结束屏幕共享
- (void)stopShareScreen;
/// 发起白板标注
- (void)startShareDoodle;
/// 结束白板共享
- (void)stopShareDoodle;
/// 发起截图标注
/// \param imageUrl 图片地址 
///
- (void)startShareImageDoodleWithImageUrl:(NSString * _Nonnull)imageUrl;
/// 结束截图标注
- (void)stopShareImageDoodle;
/// 邀请频道内其他人发起AR标注
/// \param userId 对方userId 
///
- (void)inviteShareSlamWithUserId:(NSString * _Nonnull)userId;
/// 结束自己邀请发起的AR标注
- (void)stopInviteShareSlam;
@end


@interface RKChannel (SWIFT_EXTENSION(RKCooperationCore)) <RKChannelInterface>
- (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
- (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
- (void)addDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
- (void)removeDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
- (void)addRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
- (void)removeRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
- (void)addShareWithListener:(id <RKShareListener> _Nonnull)listener;
- (void)removeShareWithListener:(id <RKShareListener> _Nonnull)listener;
- (void)joinWithParam:(RKChannelParam * _Nullable)param;
- (void)leave;
- (void)kickOutUserWithUserId:(NSString * _Nonnull)userId;
- (void)dispose;
- (void)enableUploadLocalAudioStreamWithEnable:(BOOL)enable;
- (void)enableUploadLocalVideoStreamWithEnable:(BOOL)enable;
- (void)enableAudioOutputWithEnable:(BOOL)enable;
- (enum RKVideoSize)getVideoSizeWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCreatorWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (enum RKNetStatus)getNetStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAudioUploadWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isVideoUploadWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (enum RKVolumeStatus)getVolumeStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDisplayNameWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (void)requestScreenVideoWithUserId:(NSString * _Nonnull)userId videoSize:(enum RKVideoSize)videoSize;
- (void)setCustomWithProperty:(NSString * _Nonnull)property;
- (NSString * _Nullable)getCustomProperty SWIFT_WARN_UNUSED_RESULT;
- (void)sendChannelMessageWithMsg:(NSString * _Nonnull)msg to:(NSArray<NSString *> * _Nullable)userIds;
- (NSString * _Nullable)getChannelId SWIFT_WARN_UNUSED_RESULT;
- (enum RKChannelState)getChannelState SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getChannelPassword SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalAudioUpload SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalVideoUpload SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalAudioOutput SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isScreenShare SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getScreenShareUserId SWIFT_WARN_UNUSED_RESULT;
- (void)setRecordWithParams:(RKRemoteRecordParams * _Nonnull)params;
- (void)enableRecordWithEnable:(BOOL)enable;
- (enum RKRecordState)getRecordState SWIFT_WARN_UNUSED_RESULT;
- (void)queryChannelWithResult:(id <RKOperationListener> _Nonnull)result;
- (enum RKResolution)getMaxResolution SWIFT_WARN_UNUSED_RESULT;
/// 开启摄像头
- (void)startCamera;
/// 关闭摄像头
- (void)stopCamera;
/// 切换摄像头
- (void)switchCamera;
/// 设置摄像头采集分辨率
- (void)setCameraPropertyWithWidth:(int32_t)width height:(int32_t)height framerate:(int32_t)framerate;
- (void)startShareScreen;
- (void)stopShareScreen;
- (void)startShareDoodle;
- (void)stopShareDoodle;
- (void)startShareImageDoodleWithImageUrl:(NSString * _Nonnull)imageUrl;
- (void)stopShareImageDoodle;
- (void)inviteShareSlamWithUserId:(NSString * _Nonnull)userId;
- (void)stopInviteShareSlam;
@end


enum RKShareType : NSInteger;

SWIFT_PROTOCOL("_TtP17RKCooperationCore17RKChannelListener_")
@protocol RKChannelListener <NSObject>
/// 加入频道的结果回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 要加入的频道ID
///   </li>
///   <li>
///     result: 加入的结果，true: 成功加入，false: 加入失败
///   </li>
///   <li>
///     reason: 加入失败的原因，@ RKErrorCode
///   </li>
/// </ul>
- (void)onJoinChannelResultWithChannelId:(NSString * _Nullable)channelId result:(BOOL)result reason:(enum RKErrorCode)reason;
/// 屏幕共享状态发生改变
/// \param screenUserId 不为空则有成员正在共享屏幕，否则值为null 
///
- (void)onUserScreenShareStateChangedWithScreenUserId:(NSString * _Nullable)screenUserId;
/// 离开频道的回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 离开的频道ID
///   </li>
///   <li>
///     reason: 离开频道的调用结果，@ RKErrorCode
///   </li>
/// </ul>
- (void)onLeaveWithChannelId:(NSString * _Nullable)channelId reason:(enum RKErrorCode)reason;
/// 调用解散频道的结果回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     result: 调用结果，true: 解散成员，false: 解散失败
///   </li>
///   <li>
///     reason: 解散失败的原因，@ RKErrorCode
///   </li>
/// </ul>
- (void)onChannelStopResultWithResult:(BOOL)result reason:(enum RKErrorCode)reason;
/// 频道状态发生变更
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     newState: 当前状态，@ RKChannelState
///   </li>
///   <li>
///     oldState: 上一个状态，@ RKChannelState
///   </li>
/// </ul>
- (void)onChannelStateChangedWithNewState:(enum RKChannelState)newState oldState:(enum RKChannelState)oldState;
/// 自定义频道属性发生了改变
/// \param customProperty 改变后的属性值 
///
- (void)onCustomPropertyChangedWithCustomProperty:(NSString * _Nullable)customProperty;
/// 录制状态发生改变
/// \param recordState 当前的录制状态，@ RKRecordState 
///
- (void)onRecordStateChangedWithRecordState:(enum RKRecordState)recordState;
/// 有成员加入频道
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     userId: 加入的成员用户ID
///   </li>
///   <li>
///     displayName: 该成员的显示昵称
///   </li>
/// </ul>
- (void)onUserJoinChannelWithChannelId:(NSString * _Nullable)channelId userId:(NSString * _Nullable)userId displayName:(NSString * _Nullable)displayName;
/// 频道内成员离开
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     userId: 离开的成员用户ID
///   </li>
/// </ul>
- (void)onUserLeaveChannelWithChannelId:(NSString * _Nullable)channelId userId:(NSString * _Nullable)userId;
/// 频道内共享状态回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     shareType: 分享类型 @RKShareType
///   </li>
/// </ul>
- (void)onChannelShareWithChannelId:(NSString * _Nullable)channelId shareType:(enum RKShareType)shareType;
/// 频道成员更新
/// \param channelId 频道ID 
///
- (void)onParticipantUpdateWithChannelId:(NSString * _Nullable)channelId;
@end


SWIFT_CLASS("_TtC17RKCooperationCore16RKChannelManager")
@interface RKChannelManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKChannelManager (SWIFT_EXTENSION(RKCooperationCore)) <RKMessageListener>
- (void)onlineMessageReceivedWithMsg:(RKMessage * _Nonnull)msg;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore20RKChannelMsgListener_")
@protocol RKChannelMsgListener <NSObject>
@optional
/// 收到透传频道内消息
- (void)onChannelMessageReceivedFrom:(NSString * _Nonnull)userId channelId:(NSString * _Nonnull)channelId message:(NSString * _Nonnull)message;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore24RKChannelMessageListener_")
@protocol RKChannelMessageListener <RKChannelMsgListener>
/// 收到频道内消息
- (void)onChannelMessageReceivedWithChannelId:(NSString * _Nonnull)channelId msg:(RKMessage * _Nonnull)msg;
@end


@interface RKChannelManager (SWIFT_EXTENSION(RKCooperationCore)) <RKChannelMessageListener>
- (void)onChannelMessageReceivedWithChannelId:(NSString * _Nonnull)channelId msg:(RKMessage * _Nonnull)msg;
@end


@interface RKChannelManager (SWIFT_EXTENSION(RKCooperationCore)) <RKChannelListener>
- (void)onJoinChannelResultWithChannelId:(NSString * _Nullable)channelId result:(BOOL)result reason:(enum RKErrorCode)reason;
- (void)onUserScreenShareStateChangedWithScreenUserId:(NSString * _Nullable)screenUserId;
- (void)onLeaveWithChannelId:(NSString * _Nullable)channelId reason:(enum RKErrorCode)reason;
- (void)onChannelStopResultWithResult:(BOOL)result reason:(enum RKErrorCode)reason;
- (void)onChannelStateChangedWithNewState:(enum RKChannelState)newState oldState:(enum RKChannelState)oldState;
- (void)onCustomPropertyChangedWithCustomProperty:(NSString * _Nullable)customProperty;
- (void)onRecordStateChangedWithRecordState:(enum RKRecordState)recordState;
- (void)onUserJoinChannelWithChannelId:(NSString * _Nullable)channelId userId:(NSString * _Nullable)userId displayName:(NSString * _Nullable)displayName;
- (void)onUserLeaveChannelWithChannelId:(NSString * _Nullable)channelId userId:(NSString * _Nullable)userId;
- (void)onChannelShareWithChannelId:(NSString * _Nullable)channelId shareType:(enum RKShareType)shareType;
- (void)onParticipantUpdateWithChannelId:(NSString * _Nullable)channelId;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore25RKChannelManagerInterface_")
@protocol RKChannelManagerInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKChannelManager * _Null_unspecified shared;)
+ (RKChannelManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 新建频道
/// \param channelId 频道ID，不传由内部创建，外部传入需要调用SDK接口生成 
///
/// \param channelTitle 频道标题 
///
/// \param channelParam 频道属性，不传由内部生成默认频道配置 
///
///
/// returns:
/// @RKChannel
- (RKChannel * _Nullable)createWithChannelId:(NSString * _Nullable)channelId channelTitle:(NSString * _Nullable)channelTitle channelParam:(RKChannelParam * _Nullable)channelParam SWIFT_WARN_UNUSED_RESULT;
/// 获取频道
/// \param channelId 频道ID 
///
///
/// returns:
/// @RKChannel
- (RKChannel * _Nullable)getChannelWithChannelId:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
/// 加入频道
/// \param channelId 频道ID，不传由内部创建，外部传入需要调用SDK接口生成 
///
/// \param channelPassword 频道密码  默认 123456 
///
- (void)joinWithChannelId:(NSString * _Nonnull)channelId channelPassword:(NSString * _Nullable)channelPassword;
/// 添加频道监听
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 移除频道监听
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 添加频道内分享功能监听
- (void)addChannelShareWithListener:(id <RKShareListener> _Nonnull)listener;
/// 移除频道内分享功能监听
- (void)removeChannelShareWithListener:(id <RKShareListener> _Nonnull)listener;
@end


@interface RKChannelManager (SWIFT_EXTENSION(RKCooperationCore)) <RKChannelManagerInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKChannelManager * _Null_unspecified shared;)
+ (RKChannelManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (void)destroy;
@property (nonatomic, copy) NSArray<RKChannel *> * _Nonnull channelList;
- (RKChannel * _Nullable)getChannelWithChannelId:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
- (void)addChannelShareWithListener:(id <RKShareListener> _Nonnull)listener;
- (void)removeChannelShareWithListener:(id <RKShareListener> _Nonnull)listener;
- (RKChannel * _Nullable)createWithChannelId:(NSString * _Nullable)channelId channelTitle:(NSString * _Nullable)channelTitle channelParam:(RKChannelParam * _Nullable)channelParam SWIFT_WARN_UNUSED_RESULT;
- (void)joinWithChannelId:(NSString * _Nonnull)channelId channelPassword:(NSString * _Nullable)channelPassword;
@end





SWIFT_CLASS("_TtC17RKCooperationCore14RKChannelParam")
@interface RKChannelParam : NSObject
/// 最多允许多少人加入当前频道
/// 目前最多只支持16个人同时进行音视频聊天
@property (nonatomic) NSInteger maxMembers;
/// 频道最大支持分辨率 默认为720p
@property (nonatomic) enum RKResolution maxResolution;
/// 频道密码，默认123456
@property (nonatomic, copy) NSString * _Nonnull password;
/// 频道心跳间隔,默认20s
@property (nonatomic) int32_t heartbeatTime;
/// 频道心跳超时时间，默认60s
@property (nonatomic) int32_t heartbeatTimeout;
/// 频道视频帧率，默认24帧
@property (nonatomic) int32_t frameRate;
/// 频道自定义属性
@property (nonatomic, copy) NSString * _Nullable extraParam;
/// 频道视频画面比例，传入值为宽高比浮点数，默认为 16:9
@property (nonatomic) float videoRatio;
/// 频道录制参数
@property (nonatomic, strong) RKRemoteRecordParams * _Nullable recordParam;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKVideoCanvas;

SWIFT_CLASS("_TtC17RKCooperationCore20RKChannelParticipant")
@interface RKChannelParticipant : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nullable displayName;
@property (nonatomic) enum RKNetStatus netStatus;
@property (nonatomic) enum RKVolumeStatus volumeStatus;
@property (nonatomic) enum RKVideoSize videoSize;
@property (nonatomic) BOOL isCreator;
@property (nonatomic) BOOL isSelf;
@property (nonatomic) BOOL isAudioStart;
@property (nonatomic) BOOL isVideoStart;
@property (nonatomic, strong) RKVideoCanvas * _Nullable videoCanvas;
@property (nonatomic, strong) RKCompanyUser * _Nullable companyUser;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum RKRenderType : NSInteger;

@interface RKChannelParticipant (SWIFT_EXTENSION(RKCooperationCore))
- (void)startVideoWithRenderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize;
@end

typedef SWIFT_ENUM(NSInteger, RKChannelState, open) {
/// 空闲
  RKChannelStateSTATE_IDLE = 0,
/// 加入中
  RKChannelStateSTATE_JOINING = 1,
/// 已加入
  RKChannelStateSTATE_JOINED = 2,
/// 离开中
  RKChannelStateSTATE_LEAVING = 3,
};


SWIFT_CLASS("_TtC17RKCooperationCore13RKChannelUser")
@interface RKChannelUser : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17RKCooperationCore13RKCompanyUser")
@interface RKCompanyUser : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17RKCooperationCore17RKCooperationCore")
@interface RKCooperationCore : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKShareDoodleManager;
@class RKShareScreenManager;
@class RKShareSlamManager;
@class RKSharePointManager;
@class RKVideoControlManager;
@class RKCooperationCoreParams;
@protocol RKLoginCallback;

SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKCooperationInterface_")
@protocol RKCooperationInterface <NSObject>
/// sdk管理类
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCooperationCore * _Null_unspecified shared;)
+ (RKCooperationCore * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 获取呼叫管理类
- (RKCallManager * _Nonnull)getCallManager SWIFT_WARN_UNUSED_RESULT;
/// 获取频道管理类
- (RKChannelManager * _Nonnull)getChannelManager SWIFT_WARN_UNUSED_RESULT;
/// 获取涂鸦管理类
- (RKShareDoodleManager * _Nonnull)getShareDoodleManager SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕共享管理类
- (RKShareScreenManager * _Nonnull)getShareScreenManager SWIFT_WARN_UNUSED_RESULT;
/// 获取AR标注管理类
- (RKShareSlamManager * _Nonnull)getShareSlamManager SWIFT_WARN_UNUSED_RESULT;
/// 获取视频点选管理类
- (RKSharePointManager * _Nonnull)getSharePointManager SWIFT_WARN_UNUSED_RESULT;
/// 获取视频控制管理类
- (RKVideoControlManager * _Nonnull)getVideoContrllMgr SWIFT_WARN_UNUSED_RESULT;
/// sdk参数配置
- (void)initWithParams:(RKCooperationCoreParams * _Nonnull)params SWIFT_METHOD_FAMILY(none);
/// sdk登录 如果已经登录过了 可以不用传用户信息
- (void)loginWithCompany:(NSString * _Nullable)company userName:(NSString * _Nullable)userName password:(NSString * _Nullable)password;
/// sdk登出
- (void)logout;
/// sdk重登
- (void)reLogin;
/// sdk销毁
- (void)destroy;
/// 添加登录状态监听
- (void)addLoginWithListener:(id <RKLoginCallback> _Nonnull)listener;
/// 移除登录状态监听
- (void)removeLoginWithListener:(id <RKLoginCallback> _Nonnull)listener;
/// 添加来电监听
- (void)addIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
/// 移除来电监听
- (void)removeIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
/// 添加呼叫监听
- (void)addCallWithListener:(id <RKCallListener> _Nonnull)listener;
/// 移除呼叫监听
- (void)removeCallWithListener:(id <RKCallListener> _Nonnull)listener;
/// 添加消息监听
- (void)addMessageWithListener:(id <RKMsgListener> _Nonnull)listener;
/// 移除消息监听
- (void)removeMessageWithListener:(id <RKMsgListener> _Nonnull)listener;
@end


@interface RKCooperationCore (SWIFT_EXTENSION(RKCooperationCore)) <RKCooperationInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCooperationCore * _Null_unspecified shared;)
+ (RKCooperationCore * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (RKCallManager * _Nonnull)getCallManager SWIFT_WARN_UNUSED_RESULT;
- (RKChannelManager * _Nonnull)getChannelManager SWIFT_WARN_UNUSED_RESULT;
- (RKShareDoodleManager * _Nonnull)getShareDoodleManager SWIFT_WARN_UNUSED_RESULT;
- (RKShareScreenManager * _Nonnull)getShareScreenManager SWIFT_WARN_UNUSED_RESULT;
- (RKShareSlamManager * _Nonnull)getShareSlamManager SWIFT_WARN_UNUSED_RESULT;
- (RKSharePointManager * _Nonnull)getSharePointManager SWIFT_WARN_UNUSED_RESULT;
- (RKVideoControlManager * _Nonnull)getVideoContrllMgr SWIFT_WARN_UNUSED_RESULT;
- (void)initWithParams:(RKCooperationCoreParams * _Nonnull)params SWIFT_METHOD_FAMILY(none);
- (void)loginWithCompany:(NSString * _Nullable)company userName:(NSString * _Nullable)userName password:(NSString * _Nullable)password;
- (void)logout;
- (void)reLogin;
- (void)destroy;
- (void)addLoginWithListener:(id <RKLoginCallback> _Nonnull)listener;
- (void)removeLoginWithListener:(id <RKLoginCallback> _Nonnull)listener;
- (void)addIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
- (void)removeIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
- (void)addCallWithListener:(id <RKCallListener> _Nonnull)listener;
- (void)removeCallWithListener:(id <RKCallListener> _Nonnull)listener;
- (void)addMessageWithListener:(id <RKMsgListener> _Nonnull)listener;
- (void)removeMessageWithListener:(id <RKMsgListener> _Nonnull)listener;
@end


SWIFT_CLASS("_TtC17RKCooperationCore23RKCooperationCoreConfig")
@interface RKCooperationCoreConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCooperationCoreConfig * _Nonnull shared;)
+ (RKCooperationCoreConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 必要参数
@property (nonatomic, strong) RKCooperationCoreParams * _Nonnull coreParams;
/// 录制参数
@property (nonatomic, strong) RKRemoteRecordParams * _Nonnull recordParams;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17RKCooperationCore23RKCooperationCoreParams")
@interface RKCooperationCoreParams : NSObject
/// 商户服务器地址 （默认使用标准产品host）
@property (nonatomic, copy) NSString * _Nonnull apiHost;
/// 用户token
@property (nonatomic, copy) NSString * _Nonnull token;
/// appKey
@property (nonatomic, copy) NSString * _Nonnull appKey;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17RKCooperationCore8RKDevice")
@interface RKDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;

SWIFT_PROTOCOL("_TtP17RKCooperationCore17RKDeviceInterface_")
@protocol RKDeviceInterface <NSObject>
/// 开启摄像头
+ (void)startCamera;
/// 关闭摄像头
+ (void)stopCamera;
/// 切换摄像头
+ (void)switchCamera;
/// 设置摄像头采集属性
/// startVideo:pictureSize: startVideo 方法开启自身视频渲染前设置即可生效
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     width     采集宽度，默认640
///   </li>
///   <li>
///     height    采集高度，默认360
///   </li>
///   <li>
///     frameRate 采集帧速率，默认24
///   </li>
/// </ul>
+ (void)setCameraPropertyWithWidth:(int32_t)width height:(int32_t)height framerate:(int32_t)framerate;
/// 开始自身视频渲染
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     type @RKRenderType
///   </li>
///   <li>
///     view 需要渲染视频到的视图
///   </li>
/// </ul>
+ (void)startCameraVideoWithType:(enum RKRenderType)type view:(UIView * _Nonnull)view;
@end


@interface RKDevice (SWIFT_EXTENSION(RKCooperationCore)) <RKDeviceInterface>
/// 开启摄像头
+ (void)startCamera;
/// 关闭摄像头
+ (void)stopCamera;
/// 切换摄像头
+ (void)switchCamera;
/// 设置摄像头采集分辨率
+ (void)setCameraPropertyWithWidth:(int32_t)width height:(int32_t)height framerate:(int32_t)framerate;
+ (void)startCameraVideoWithType:(enum RKRenderType)type view:(UIView * _Nonnull)view;
+ (void)enableSpeaker:(BOOL)enable;
+ (BOOL)startVideoFile;
+ (BOOL)stopVideoFile;
@end



SWIFT_PROTOCOL("_TtP17RKCooperationCore16RKDeviceListener_")
@protocol RKDeviceListener <NSObject>
/// 摄像头发生变化
- (void)onCameraUpdate;
/// 音频输出变更
- (void)onAudioOutputTypeChangeWithAudioType:(enum RKAudioOutputType)audioType;
/// 自定义视频流触发关键帧获取
- (void)onNeedKeyFrame;
/// 音频输出状态发生改变
/// \param audioOutput 音频正在输出，false 音频已停止输出
///
- (void)onAudioOutputStateChangedWithAudioOutput:(BOOL)audioOutput;
/// 上传本地视频状态发生改变
/// \param uploadLocalVideo true 正在上传，false: 已停止上传
///
- (void)onUploadVideoStateChangedWithUploadLocalVideo:(BOOL)uploadLocalVideo;
/// 上传本地音频状态发生改变
/// \param uploadLocalAudio true 正在上传，false: 已停止上传
///
- (void)onUploadAudioStateChangedWithUploadLocalAudio:(BOOL)uploadLocalAudio;
@end

enum RKDoodleAction : NSInteger;
@class RKPoint;
@class UIColor;

SWIFT_CLASS("_TtC17RKCooperationCore8RKDoodle")
@interface RKDoodle : NSObject
@property (nonatomic, copy) NSString * _Nonnull doodleId;
@property (nonatomic) NSInteger doodleNo;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic) enum RKDoodleAction actionType;
@property (nonatomic, copy) NSString * _Nonnull brushColor;
@property (nonatomic) float brushWidth;
@property (nonatomic, copy) NSArray<RKPoint *> * _Nonnull points;
- (void)addWithPoint:(RKPoint * _Nonnull)point;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAction:(enum RKDoodleAction)action brushColor:(UIColor * _Nullable)brushColor brushWidth:(float)brushWidth OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKDoodleAction, open) {
  RKDoodleActionUnknown = -1,
  RKDoodleActionAdd = 0,
  RKDoodleActionRevoke = 1,
  RKDoodleActionClear = 2,
};

@class NSCoder;

SWIFT_CLASS("_TtC17RKCooperationCore10RKDrawPath")
@interface RKDrawPath : UIBezierPath
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC17RKCooperationCore10RKDrawView")
@interface RKDrawView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
/// 开始画线
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// 正在画线
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// 结束画线
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore18RKDrawViewDelegate_")
@protocol RKDrawViewDelegate <NSObject>
/// 添加点位标注
/// @param point 标注信息
- (void)touchPointAction:(RKDoodle * _Nonnull)pointAction;
/// 添加曲线标注
/// @param doodle 标注信息
- (void)addWireDoodleAction:(RKDoodle * _Nonnull)doodle;
@end

typedef SWIFT_ENUM(NSInteger, RKErrorCode, open) {
/// 正常
  RKErrorCodeOK = 0,
/// SDK未初始化
  RKErrorCodeSDK_NOT_INIT = 1,
/// 异常参数
  RKErrorCodeINVALID_PARAM = 2,
/// 网络异常
  RKErrorCodeNETWORK_ERROR = 3,
/// AppKey错误
  RKErrorCodeAPP_KEY_ERROR = 4,
/// 账号密码错误
  RKErrorCodeAUTH_ERROR = 5,
/// 用户不存在
  RKErrorCodeNO_SUCH_USER = 6,
/// 强制登出
  RKErrorCodeSERVER_LOGOUT = 7,
/// 用户在其他设备登录
  RKErrorCodeLOGIN_ON_OTHER_DEVICE = 8,
/// 发送消息失败了
  RKErrorCodeSEND_MESSAGE_FAILED = 9,
/// 服务器忙
  RKErrorCodeSERVER_BUSY = 10,
/// 无法连接服务器
  RKErrorCodeSERVER_CAN_NOT_REACH = 11,
/// 服务器拒绝
  RKErrorCodeSERVER_FORBIDDEN = 12,
/// 服务器不可用
  RKErrorCodeSERVER_UNAVAILABLE = 13,
/// 查询DNS异常
  RKErrorCodeQUERY_DNS_ERROR = 14,
/// 服务器内部错误
  RKErrorCodeSERVER_INTERNAL_ERROR = 15,
/// token与账号不匹配
  RKErrorCodeTOKEN_ACCOUNTID_MISMATCH = 16,
/// 超时
  RKErrorCodeTIMEOUT = 17,
/// 已加入该频道
  RKErrorCodeALREADY_JOINED_CAHNNEL = 18,
/// 被踢出频道
  RKErrorCodeKICKED_OUT = 19,
/// 掉线
  RKErrorCodeOFFLINE = 20,
/// 频道已经被关闭
  RKErrorCodeCHANNEL_OVER = 21,
/// 频道已经满员
  RKErrorCodeCHANNEL_FULL = 22,
/// 频道异常
  RKErrorCodeCHANNEL_INTERNAL_ERROR = 23,
/// token过期了
  RKErrorCodeTOKEN_EXPIRED = 24,
/// 存在已加入频道，需要先退出频道再加入新的频道
  RKErrorCodeJOIN_BEFORE_LEAVE = 101,
/// 加入频道失败，其他异常
  RKErrorCodeJOIN_UNKNOWN_ERROR = 102,
/// 请求加入频道但是未登录
  RKErrorCodeJOIN_NOT_LOGIN = 103,
/// 主动退出频道
  RKErrorCodeSELF_QUIT = 104,
/// 频道密码错误
  RKErrorCodeCHANNEL_PASSWORD_ERROR = 105,
/// 其他异常
  RKErrorCodeOTHER_ERROR = 199,
};


SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKIncomingCallListener_")
@protocol RKIncomingCallListener <NSObject>
@optional
/// 收到来电
/// \param channelId 频道ID 
///
/// \param fromUserId 来电用户ID 
///
/// \param createTime 创建时间 
///
/// \param channelTitle 频道标题 
///
- (void)onReceiveCallWithChannelId:(NSString * _Nonnull)channelId fromUserId:(NSString * _Nonnull)fromUserId createTime:(int64_t)createTime channelTitle:(NSString * _Nullable)channelTitle;
/// 来电取消
/// \param channelId 频道ID 
///
/// \param fromUserId 来电用户ID 
///
/// \param createTime 创建时间 
///
- (void)onCallCanceledWithChannelId:(NSString * _Nonnull)channelId fromUserId:(NSString * _Nonnull)fromUserId createTime:(int64_t)createTime;
@end

@class JCMediaDevice;
@class RKVideoParam;

SWIFT_CLASS("_TtC17RKCooperationCore16RKJCMideaManager")
@interface RKJCMideaManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKJCMideaManager * _Nonnull shared;)
+ (RKJCMideaManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JCMediaDevice * _Nullable mediaDevice;
- (void)initClientWithAppKey:(NSString * _Nonnull)appKey SWIFT_METHOD_FAMILY(none);
- (void)loginWithUserId:(NSString * _Nonnull)userId password:(NSString * _Nonnull)password;
- (void)logout;
- (void)reloginWithUserId:(NSString * _Nonnull)userId password:(NSString * _Nonnull)password;
/// 开启摄像头
- (void)startCamera;
/// 关闭摄像头
- (void)stopCamera;
/// 切换摄像头
- (void)switchCamera;
/// 设置摄像头采集分辨率
- (void)setCameraPropertyWithWidth:(int32_t)width height:(int32_t)height framerate:(int32_t)framerate;
/// 开始自身视频渲染
- (void)startCameraVideoWithType:(enum RKRenderType)type view:(UIView * _Nullable)view;
- (BOOL)startVideoFile SWIFT_WARN_UNUSED_RESULT;
- (BOOL)stopVideoFile SWIFT_WARN_UNUSED_RESULT;
/// 设置视频采集属性
/// \param videoParam @RKVideoParam
///
- (void)setVideoPropertyWithVideoParam:(RKVideoParam * _Nonnull)videoParam;
/// 开启视频渲染
- (RKVideoCanvas * _Nullable)startVideoWithParticipant:(RKChannelParticipant * _Nonnull)participant renderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize SWIFT_WARN_UNUSED_RESULT;
/// 结束自身渲染
- (void)stopVideoWithCanvasId:(NSString * _Nonnull)canvasId;
/// 暂停视频渲染
- (void)pauseWithCanvasId:(NSString * _Nonnull)canvasId;
/// 恢复视频渲染
- (void)resumeWithCanvasId:(NSString * _Nonnull)canvasId;
/// 旋转视频角度，TIPS：必须是90°的倍数，该角度表示与屏幕正方向旋转后的夹角
/// @param angle 要旋转的角度
- (void)rotateWithCanvasId:(NSString * _Nonnull)canvasId angle:(NSInteger)angle;
/// 对焦
- (void)focusWithCanvasId:(NSString * _Nonnull)canvasId xPercent:(float)xPercent yPercent:(float)yPercent;
/// 设置音频采集属性
/// \param videoParam @RKVideoParam
///
- (void)setAudioPropertyWithAudioParam:(RKAudioParam * _Nonnull)audioParam;
/// 开启音频
- (void)startAudio;
/// 停止音频
- (void)stopAudio;
/// 开启/关闭扬声器
/// \param enable 是否开启
///
- (void)enableSpeaker:(BOOL)enable;
/// 扬声器是否已打开
///
/// returns:
/// 是否打开
- (BOOL)isSpeakerOn SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore))
- (UIImage * _Nullable)snapshotWithVideoCanvasId:(NSString * _Nonnull)videoCanvasId width:(int32_t)width height:(int32_t)height filePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore))
- (void)sendOnlineMessageWithUserId:(NSString * _Nonnull)userId content:(NSString * _Nonnull)content;
- (void)sendChannelMessageWithUserId:(NSString * _Nullable)userId content:(NSString * _Nonnull)content;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore))
- (BOOL)startShareScreen SWIFT_WARN_UNUSED_RESULT;
- (RKVideoCanvas * _Nullable)getShareScreenVideoWithRenderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize SWIFT_WARN_UNUSED_RESULT;
- (void)stopShareScreen;
@end

@class JCMediaDeviceVideoCanvas;

@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore)) <JCMediaDeviceCallback>
- (void)onCameraUpdate;
- (void)onAudioOutputTypeChange:(NSString * _Null_unspecified)audioOutputType;
- (void)onRenderReceived:(JCMediaDeviceVideoCanvas * _Null_unspecified)canvas;
- (void)onRenderStart:(JCMediaDeviceVideoCanvas * _Null_unspecified)canvas;
- (void)onAudioInerruptAndResume:(BOOL)interrupt;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore)) <JCClientCallback>
- (void)onLogin:(BOOL)result reason:(JCClientReason)reason;
- (void)onLogout:(JCClientReason)reason;
- (void)onClientStateChange:(JCClientState)state oldState:(JCClientState)oldState;
- (void)onOnlineMessageSend:(int32_t)operationId result:(BOOL)result;
- (void)onOnlineMessageReceive:(NSString * _Null_unspecified)userId content:(NSString * _Null_unspecified)content;
@end

@class JCMediaChannelPropChangeParam;
@class JCMediaChannelQueryInfo;
@class JCMediaChannelParticipant;
@class JCMediaChannelParticipantChangeParam;

@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore)) <JCMediaChannelCallback>
- (void)onMediaChannelStateChange:(JCMediaChannelState)state oldState:(JCMediaChannelState)oldState;
- (void)onMediaChannelPropertyChange:(JCMediaChannelPropChangeParam * _Null_unspecified)changeParam;
- (void)onJoin:(BOOL)result reason:(JCMediaChannelReason)reason channelId:(NSString * _Null_unspecified)channelId;
- (void)onLeave:(JCMediaChannelReason)reason channelId:(NSString * _Null_unspecified)channelId;
- (void)onStop:(BOOL)result reason:(JCMediaChannelReason)reason;
- (void)onQuery:(int32_t)operationId result:(BOOL)result reason:(JCMediaChannelReason)reason queryInfo:(JCMediaChannelQueryInfo * _Null_unspecified)queryInfo;
- (void)onParticipantJoin:(JCMediaChannelParticipant * _Null_unspecified)participant;
- (void)onParticipantLeft:(JCMediaChannelParticipant * _Null_unspecified)participant;
- (void)onParticipantUpdate:(JCMediaChannelParticipant * _Null_unspecified)participant participantChangeParam:(JCMediaChannelParticipantChangeParam * _Null_unspecified)participantChangeParam;
/// 会议内消息回调
- (void)onMessageReceive:(NSString * _Null_unspecified)type content:(NSString * _Null_unspecified)content fromUserId:(NSString * _Null_unspecified)fromUserId;
- (void)onParticipantVolumeChange:(JCMediaChannelParticipant * _Null_unspecified)participant;
- (void)onInviteSipUserResult:(int32_t)operationId result:(BOOL)result reason:(int32_t)reason;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore))
/// 添加频道内消息监听
/// @param listener 见[RKChannelMsgListener]
- (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
/// 移除频道内监听
/// @param listener 见[RKChannelMsgListener]
- (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
/// 添加监听
/// @param listener 见[RKChannelListener]
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 移除监听
/// @param listener 见[RKChannelListener]
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 添加本地设备监听
- (void)addDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
/// 移除本地设备监听
- (void)removeDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
/// 添加远端设备监听
- (void)addRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
/// 移除远端设备监听
- (void)removeRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
- (void)joinWithChannelId:(NSString * _Nonnull)channelId joinParam:(RKChannelParam * _Nonnull)joinParam;
- (void)leave;
- (void)kickOutUserWithUserId:(NSString * _Nonnull)userId;
- (void)dispose;
- (void)enableUploadLocalAudioStreamWithEnable:(BOOL)enable;
- (void)enableUploadLocalVideoStreamWithEnable:(BOOL)enable;
- (void)enableAudioOutputWithEnable:(BOOL)enable;
- (void)enableRecordWithEnable:(BOOL)enable;
- (BOOL)isCreatorWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (enum RKNetStatus)getNetStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (void)requestScreenVideoWithUserId:(NSString * _Nonnull)userId videoSize:(enum RKVideoSize)videoSize;
- (void)setCustomPropertyWithProperty:(NSString * _Nonnull)property;
- (NSString * _Nullable)getCustomProperty SWIFT_WARN_UNUSED_RESULT;
- (enum RKChannelState)getChannelState SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getChannelPassword SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalAudioUpload SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalVideoUpload SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalAudioOutput SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isScreenShare SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getScreenShareUserId SWIFT_WARN_UNUSED_RESULT;
- (enum RKRecordState)getRecordState SWIFT_WARN_UNUSED_RESULT;
- (void)queryChannelWithChannelId:(NSString * _Nonnull)channelId result:(id <RKOperationListener> _Nonnull)result;
- (enum RKResolution)getMaxResolution SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore15RKLoginCallback_")
@protocol RKLoginCallback <NSObject>
- (void)onLoginWithReason:(enum RKErrorCode)reason;
- (void)onLogoutWithReason:(enum RKErrorCode)reason;
@end

@class RKShareInfo;
@class RKUserDevice;

SWIFT_CLASS("_TtC17RKCooperationCore13RKMeetingLife")
@interface RKMeetingLife : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull meetingId;
@property (nonatomic, copy) NSString * _Nonnull meetingTitle;
@property (nonatomic, copy) NSString * _Nonnull channelTitle;
@property (nonatomic) int64_t createTime;
@property (nonatomic) int64_t endTime;
@property (nonatomic, strong) RKShareInfo * _Nullable shareInfo;
@property (nonatomic, copy) NSString * _Nonnull meetingServerId;
@property (nonatomic, copy) NSString * _Nonnull serverId;
@property (nonatomic, copy) NSString * _Nonnull inviteId;
@property (nonatomic, copy) NSString * _Nonnull oneStreamUserId;
@property (nonatomic, copy) NSString * _Nonnull moderator;
@property (nonatomic, copy) NSString * _Nonnull resolution;
@property (nonatomic, copy) NSArray<RKUserDevice *> * _Nullable userDevices;
@property (nonatomic, strong) RKChannelParam * _Nullable channelParam;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 消息体
SWIFT_CLASS("_TtC17RKCooperationCore9RKMessage")
@interface RKMessage : NSObject
@property (nonatomic) double version;
@property (nonatomic, copy) NSString * _Nonnull msgId;
@property (nonatomic) int64_t timestamp;
@property (nonatomic, copy) NSString * _Nonnull fromLicense;
@property (nonatomic, copy) NSString * _Nonnull fromUserId;
@property (nonatomic, copy) NSString * _Nonnull msgBody;
/// <h3>以下msgType 对应 msgBody消息体规则：</h3>
/// | Doodle                 | 传递jcDoodle.stringFromDoodleAction转换的字符串
/// | DoodleResponse | 传递涂鸦发起方保存下来的每一笔涂鸦数据
/// | Slam                    | SlamBaseMessage ar标注的对象类型
/// | Call                      | MeetingLife 会议详细信息对象，用于同步各端的会议信息状态
/// | Share                   | ShareInfo 每次共享状态改变后发送最新状态通知各端
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17RKCooperationCore15RKMessageCenter")
@interface RKMessageCenter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore18RKMessageInterface_")
@protocol RKMessageInterface <NSObject>
/// 添加在线消息监听
/// \param listener @ RKMsgListener
///
/// \param msgType 监听类型，需要和其他端定义
///
+ (void)addMsgWithListener:(id <RKMsgListener> _Nonnull)listener msgType:(NSString * _Nullable)msgType;
/// 移除在线消息监听
/// \param listener @ RKMsgListener
///
/// \param msgType 监听类型，需要和其他端定义
///
+ (void)removeMsgWithListener:(id <RKMsgListener> _Nonnull)listener msgType:(NSString * _Nullable)msgType;
/// 添加频道消息监听
/// \param listener @ RKMsgListener
///
/// \param channelId 频道ID
///
/// \param msgType 监听类型，需要和其他端定义
///
+ (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener channelId:(NSString * _Nonnull)channelId msgType:(NSString * _Nullable)msgType;
/// 添加在线消息监听
/// \param listener @ RKMsgListener
///
/// \param channelId 频道ID
///
/// \param msgType 监听类型，需要和其他端定义
///
+ (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener channelId:(NSString * _Nonnull)channelId msgType:(NSString * _Nullable)msgType;
/// 发送在线消息
/// \param message 消息体
///
/// \param userIds userIds
///
/// \param isSendSelf 是否给自己模拟一条
///
/// \param isExtra 透传消息
///
+ (void)sendOnlineMessage:(NSString * _Nonnull)message to:(NSArray<NSString *> * _Nonnull)userIds isSendSelf:(BOOL)isSendSelf isExtra:(BOOL)isExtra;
/// 发送频道内消息
/// \param message 消息内容，不能为空，并且当 toUserId 不为 nil 时，content 不能大于 4k
///
/// \param userIds userIds
///
/// \param isSendSelf 是否给自己模拟一条
///
/// \param isExtra 透传消息
///
+ (void)sendChannelMessage:(NSString * _Nonnull)message to:(NSArray<NSString *> * _Nullable)userIds isSendSelf:(BOOL)isSendSelf isExtra:(BOOL)isExtra;
@end


@interface RKMessageCenter (SWIFT_EXTENSION(RKCooperationCore)) <RKMessageInterface>
+ (void)addMsgWithListener:(id <RKMsgListener> _Nonnull)listener msgType:(NSString * _Nullable)msgType;
+ (void)removeMsgWithListener:(id <RKMsgListener> _Nonnull)listener msgType:(NSString * _Nullable)msgType;
+ (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener channelId:(NSString * _Nonnull)channelId msgType:(NSString * _Nullable)msgType;
+ (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener channelId:(NSString * _Nonnull)channelId msgType:(NSString * _Nullable)msgType;
+ (void)sendOnlineMessage:(NSString * _Nonnull)message to:(NSArray<NSString *> * _Nonnull)userIds isSendSelf:(BOOL)isSendSelf isExtra:(BOOL)isExtra;
+ (void)sendChannelMessage:(NSString * _Nonnull)message to:(NSArray<NSString *> * _Nullable)userIds isSendSelf:(BOOL)isSendSelf isExtra:(BOOL)isExtra;
@end




typedef SWIFT_ENUM(NSInteger, RKNetStatus, open) {
/// 无网络
  RKNetStatusDISCONNECT = 0,
/// 网络非常差
  RKNetStatusVERY_BAD = 1,
/// 网络差
  RKNetStatusBAD = 2,
/// 网络一般
  RKNetStatusNORMAL = 3,
/// 网络好
  RKNetStatusGOOD = 4,
/// 网络非常好
  RKNetStatusVERY_GOOD = 5,
};


SWIFT_PROTOCOL("_TtP17RKCooperationCore19RKOperationListener_")
@protocol RKOperationListener
/// 查询频道状态回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 要加入的频道ID
///   </li>
///   <li>
///     result: 查询结果，true: 成功加入，false: 加入失败
///   </li>
///   <li>
///     reason: 失败原因，@ RKErrorCode
///   </li>
/// </ul>
- (void)onQuery:(NSString * _Nonnull)channelId result:(BOOL)result reason:(enum RKErrorCode)reason;
@end


SWIFT_CLASS("_TtC17RKCooperationCore7RKPoint")
@interface RKPoint : NSObject
@property (nonatomic) float x;
@property (nonatomic) float y;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKPointVideoAction, open) {
  RKPointVideoActionPoint = 0,
  RKPointVideoActionReq = 1,
  RKPointVideoActionRes = 2,
};

enum RKSlamMessageType : NSInteger;

SWIFT_CLASS("_TtC17RKCooperationCore19RKPointVideoMessage")
@interface RKPointVideoMessage : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nonnull messageId;
@property (nonatomic) NSInteger color;
@property (nonatomic, strong) RKPoint * _Nonnull pointF;
@property (nonatomic) float width;
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
@property (nonatomic) enum RKPointVideoAction actionType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessageType:(enum RKSlamMessageType)messageType OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKRecordProtocol, open) {
/// AWS协议存储服务器
  RKRecordProtocolAWS = 1,
/// 七牛云存储服务器
  RKRecordProtocolQI_NIU = 2,
/// 阿里云存储服务器
  RKRecordProtocolA_LI_YUN = 3,
};

typedef SWIFT_ENUM(NSInteger, RKRecordState, open) {
/// 未开始录制
  RKRecordStateSTATE_NONE = 0,
/// 准备开始录制，可以调用[IChannel.enabeRecord]开始录制
  RKRecordStateSTATE_READY = 1,
/// 录制中
  RKRecordStateSTATE_RUNNING = 2,
};


SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKRemoteDeviceListener_")
@protocol RKRemoteDeviceListener
@optional
/// 用户音频上传状态发生改变
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 发生改变的用户ID
///   </li>
///   <li>
///     enabled: true: 上传中，false: 停止上传
///   </li>
/// </ul>
- (void)onUserUploadAudioChangedWithUserId:(NSString * _Nonnull)userId enabled:(BOOL)enabled;
/// 用户视频上传状态发生改变
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 发生改变的用户ID
///   </li>
///   <li>
///     enabled: true: 上传中，false: 停止上传
///   </li>
/// </ul>
- (void)onUserUploadVideoChangedWithUserId:(NSString * _Nonnull)userId enabled:(BOOL)enabled;
/// 用户网络连接状态改变
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 用户ID
///   </li>
///   <li>
///     status: netStatus @ RKNetStatus
///   </li>
/// </ul>
- (void)onUserNetStatusChangedWithUserId:(NSString * _Nonnull)userId netStatus:(enum RKNetStatus)netStatus;
/// 用户上传视频大小发生改变
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 用户ID
///   </li>
///   <li>
///     videoSize: @ RKVideoSize
///   </li>
/// </ul>
- (void)onUserVideoSizeChangedWithUserId:(NSString * _Nonnull)userId videoSize:(enum RKVideoSize)videoSize;
/// 频道内成员音量变化
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 用户ID
///   </li>
///   <li>
///     status: 当前音量状态，@RKVolumeStatus
///   </li>
/// </ul>
- (void)onUserVolumeChangeWithUserId:(NSString * _Nonnull)userId status:(enum RKVolumeStatus)status;
@end


SWIFT_CLASS("_TtC17RKCooperationCore20RKRemoteRecordParams")
@interface RKRemoteRecordParams : NSObject
@property (nonatomic, copy) NSString * _Nonnull secretKey;
@property (nonatomic, copy) NSString * _Nonnull accessKey;
@property (nonatomic, copy) NSString * _Nonnull bucketName;
@property (nonatomic, copy) NSString * _Nonnull fileName;
@property (nonatomic, copy) NSString * _Nonnull directory;
@property (nonatomic, copy) NSString * _Nullable uploadEndPoint;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKRenderType, open) {
/// 全屏渲染
  RKRenderTypeRENDER_FULL_SCREEN = 0,
/// 平铺整个窗口
  RKRenderTypeRENDER_FULL_CONTENT = 1,
/// 自适应
  RKRenderTypeRENDER_FULL_AUTO = 2,
};

typedef SWIFT_ENUM(NSInteger, RKResolution, open) {
/// 360P
  RKResolutionRESOLUTION_360 = 0,
/// 720P
  RKResolutionRESOLUTION_720 = 1,
/// 1080P
  RKResolutionRESOLUTION_1080 = 2,
};


SWIFT_CLASS("_TtC17RKCooperationCore18RKScreenShareParam")
@interface RKScreenShareParam : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKShareDoodleInterface_")
@protocol RKShareDoodleInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareDoodleManager * _Null_unspecified shared;)
+ (RKShareDoodleManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 清空
- (void)clear;
/// 开启白板标注
/// \param channelId 频道ID
///
- (void)startShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 开启截图标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)startShareDoodleWithChannelId:(NSString * _Nonnull)channelId doodleImageUrl:(NSString * _Nonnull)doodleImageUrl;
/// 加入Doodle标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)joinShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 加入截图标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)joinShareDoodleWithChannelId:(NSString * _Nonnull)channelId doodleImageUrl:(NSString * _Nonnull)doodleImageUrl;
/// 结束标注
/// \param channelId 频道ID
///
- (void)stopShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 新增一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)addWithChannelId:(NSString * _Nonnull)channelId doodle:(RKDoodle * _Nonnull)doodle;
/// 撤销一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)revokeWithChannelId:(NSString * _Nonnull)channelId doodle:(RKDoodle * _Nullable)doodle;
/// 清除标注
/// \param channelId 频道ID
///
- (void)clearWithChannelId:(NSString * _Nonnull)channelId;
@end


SWIFT_CLASS("_TtC17RKCooperationCore20RKShareDoodleManager")
@interface RKShareDoodleManager : NSObject
@property (nonatomic, strong) RKDrawView * _Nonnull drawView;
@property (nonatomic, copy) NSArray<RKDoodle *> * _Nonnull doodles;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKVideoControlMessage;
@class RKSlamBaseMessage;
enum RKShareErrorCode : NSInteger;

SWIFT_PROTOCOL("_TtP17RKCooperationCore15RKShareListener_")
@protocol RKShareListener <NSObject>
@optional
/// 有人发起了屏幕共享
/// \param userId  对方userId 
///
- (void)onStartShareScreenWithUserId:(NSString * _Nonnull)userId;
/// 有人结束了屏幕共享
/// \param userId  对方userId 
///
- (void)onStopShareScreenWithUserId:(NSString * _Nonnull)userId;
/// 有人发起了白板标注
/// \param userId  对方userId 
///
- (void)onStartShareDoodleWithUserId:(NSString * _Nonnull)userId;
/// 有人结束了白板标注
/// \param userId  对方userId 
///
- (void)onStopShareDoodleWithUserId:(NSString * _Nonnull)userId;
/// 有人发起了截图标注
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId:  对方userId
///   </li>
///   <li>
///     imgUrl: 对方截图地址
///   </li>
/// </ul>
- (void)onStartShareImageDoodleWithUserId:(NSString * _Nonnull)userId imgUrl:(NSString * _Nonnull)imgUrl;
/// 有人结束了截图标注
/// \param userId  对方userId 
///
- (void)onStopShareImageDoodleWithUserId:(NSString * _Nonnull)userId;
/// 有人发起了AR标注
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId:  发起者userId
///   </li>
///   <li>
///     executorUserId:  执行者userId
///   </li>
/// </ul>
- (void)onStartShareSlamWithUserId:(NSString * _Nonnull)userId executorUserId:(NSString * _Nonnull)executorUserId;
/// 有人结束了AR标注
/// \param userId  对方userId 
///
- (void)onStopShareSlamWithUserId:(NSString * _Nonnull)userId;
/// 有人发起了视频点选
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId:  发起者userId
///   </li>
///   <li>
///     executorUserId:  执行者userId
///   </li>
/// </ul>
- (void)onStartSharePointVideoWithUserId:(NSString * _Nonnull)userId executorUserId:(NSString * _Nonnull)executorUserId;
/// 有人结束了结束视频点选
/// \param userId  对方userId 
///
- (void)onStopSharePointVideoWithUserId:(NSString * _Nonnull)userId;
/// 收到视频点选消息
/// \param message @ RKPointVideoMessage 
///
- (void)onPointVideoWithMessage:(RKPointVideoMessage * _Nonnull)message;
/// 收到视频控制消息
/// \param message @ RKVideoControlMessage 
///
- (void)onVideoControlWithMessage:(RKVideoControlMessage * _Nonnull)message;
/// 收到Doodle消息
/// \param message @ RKDoodle 
///
- (void)onDoodleWithMessage:(RKDoodle * _Nonnull)message;
/// 收到Slam标注消息
/// \param message @ RKSlamBaseMessage 
///
- (void)onSlamWithMessage:(RKSlamBaseMessage * _Nonnull)message;
/// 共享异常处理
/// \param code 错误码 @ RKShareErrorCode 
///
- (void)onShareErrorWithCode:(enum RKShareErrorCode)code;
@end


@interface RKShareDoodleManager (SWIFT_EXTENSION(RKCooperationCore)) <RKShareListener>
- (void)onDoodleWithMessage:(RKDoodle * _Nonnull)message;
@end


@interface RKShareDoodleManager (SWIFT_EXTENSION(RKCooperationCore)) <RKShareDoodleInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareDoodleManager * _Null_unspecified shared;)
+ (RKShareDoodleManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (void)clear;
/// 开启白板标注
/// \param channelId 频道ID
///
- (void)startShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 开启截图标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)startShareDoodleWithChannelId:(NSString * _Nonnull)channelId doodleImageUrl:(NSString * _Nonnull)doodleImageUrl;
/// 加入Doodle标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)joinShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 加入截图标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)joinShareDoodleWithChannelId:(NSString * _Nonnull)channelId doodleImageUrl:(NSString * _Nonnull)doodleImageUrl;
/// 结束标注
/// \param channelId 频道ID
///
- (void)stopShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 新增一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)addWithChannelId:(NSString * _Nonnull)channelId doodle:(RKDoodle * _Nonnull)doodle;
/// 撤销一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)revokeWithChannelId:(NSString * _Nonnull)channelId doodle:(RKDoodle * _Nullable)doodle;
/// 清除标注
/// \param channelId 频道ID
///
- (void)clearWithChannelId:(NSString * _Nonnull)channelId;
@end

typedef SWIFT_ENUM(NSInteger, RKShareErrorCode, open) {
/// 已经存在共享了
  RKShareErrorCodeEXIST_SHARE = -1,
/// 其他异常
  RKShareErrorCodeOTHER_ERROR = 199,
};


SWIFT_CLASS("_TtC17RKCooperationCore11RKShareInfo")
@interface RKShareInfo : NSObject <NSCopying>
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull meetingId;
@property (nonatomic, copy) NSString * _Nonnull promoterUserId;
@property (nonatomic, copy) NSString * _Nonnull executorUserId;
@property (nonatomic, copy) NSString * _Nonnull sponsorLicense;
@property (nonatomic, copy) NSString * _Nonnull license;
@property (nonatomic, copy) NSString * _Nonnull shareImageUrl;
@property (nonatomic) enum RKShareType shareType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP17RKCooperationCore21RKSharePointInterface_")
@protocol RKSharePointInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKSharePointManager * _Null_unspecified shared;)
+ (RKSharePointManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 结束自己发起的视频点选
/// \param channelId 频道ID
///
- (void)stopSharePointVideoWithChannelId:(NSString * _Nonnull)channelId;
/// 邀请别人发起视频点选
/// \param channelId 频道ID
///
/// \param userId 对方userID
///
- (void)inviteSharePointVideoWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 发送视频点选消息
- (void)sendPointWithChannelId:(NSString * _Nonnull)channelId slamColor:(NSInteger)slamColor markPoint:(RKPoint * _Nonnull)markPoint pointWidth:(float)pointWidth;
@end


SWIFT_CLASS("_TtC17RKCooperationCore19RKSharePointManager")
@interface RKSharePointManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKSharePointManager (SWIFT_EXTENSION(RKCooperationCore)) <RKSharePointInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKSharePointManager * _Null_unspecified shared;)
+ (RKSharePointManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 结束自己发起的视频点选
/// \param channelId 频道ID
///
- (void)stopSharePointVideoWithChannelId:(NSString * _Nonnull)channelId;
/// 邀请别人发起视频点选
/// \param channelId 频道ID
///
/// \param userId 对方userID
///
- (void)inviteSharePointVideoWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 发送视频点选消息
- (void)sendPointWithChannelId:(NSString * _Nonnull)channelId slamColor:(NSInteger)slamColor markPoint:(RKPoint * _Nonnull)markPoint pointWidth:(float)pointWidth;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKShareScreenInterface_")
@protocol RKShareScreenInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareScreenManager * _Null_unspecified shared;)
+ (RKShareScreenManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 开启屏幕共享
/// \param channelId 频道ID
///
- (void)startShareScreenWithChannelId:(NSString * _Nonnull)channelId;
/// 获取屏幕共享视图
- (RKVideoCanvas * _Nullable)getShareScreenVideoWithRenderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize SWIFT_WARN_UNUSED_RESULT;
/// 结束屏幕共享
/// \param channelId 频道ID
///
- (void)stopShareScreenWithChannelId:(NSString * _Nonnull)channelId;
@end


SWIFT_CLASS("_TtC17RKCooperationCore20RKShareScreenManager")
@interface RKShareScreenManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKShareScreenManager (SWIFT_EXTENSION(RKCooperationCore)) <RKShareScreenInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareScreenManager * _Null_unspecified shared;)
+ (RKShareScreenManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 开启屏幕共享
/// \param channelId 频道ID
///
- (void)startShareScreenWithChannelId:(NSString * _Nonnull)channelId;
- (RKVideoCanvas * _Nullable)getShareScreenVideoWithRenderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize SWIFT_WARN_UNUSED_RESULT;
/// 结束屏幕共享
/// \param channelId 频道ID
///
- (void)stopShareScreenWithChannelId:(NSString * _Nonnull)channelId;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore20RKShareSlamInterface_")
@protocol RKShareSlamInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareSlamManager * _Null_unspecified shared;)
+ (RKShareSlamManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 发起AR标注
/// \param channelId 频道ID
///
/// \param userId 对方userID
///
- (void)inviteShareSlamWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 结束AR标注
/// \param - channelId 频道ID
///
- (void)stopInviteShareSlamWithChannelId:(NSString * _Nonnull)channelId;
/// 发送slam消息
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     doodle: doodle
///   </li>
/// </ul>
- (void)sendWithChannelId:(NSString * _Nonnull)channelId slamMessage:(RKSlamBaseMessage * _Nonnull)slamMessage;
/// 撤销一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)revokeWithChannelId:(NSString * _Nonnull)channelId;
/// 清除标注
/// \param channelId 频道ID
///
- (void)clearWithChannelId:(NSString * _Nonnull)channelId;
@end


SWIFT_CLASS("_TtC17RKCooperationCore18RKShareSlamManager")
@interface RKShareSlamManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKShareSlamManager (SWIFT_EXTENSION(RKCooperationCore)) <RKShareSlamInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareSlamManager * _Null_unspecified shared;)
+ (RKShareSlamManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 发起AR标注
/// \param channelId 频道ID
///
/// \param userId 对方userID
///
- (void)inviteShareSlamWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 结束AR标注
/// \param - channelId 频道ID
///
- (void)stopInviteShareSlamWithChannelId:(NSString * _Nonnull)channelId;
/// 发送slam消息
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     doodle: doodle
///   </li>
/// </ul>
- (void)sendWithChannelId:(NSString * _Nonnull)channelId slamMessage:(RKSlamBaseMessage * _Nonnull)slamMessage;
/// 撤销一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)revokeWithChannelId:(NSString * _Nonnull)channelId;
/// 清除标注
/// \param channelId 频道ID
///
- (void)clearWithChannelId:(NSString * _Nonnull)channelId;
@end

typedef SWIFT_ENUM(NSInteger, RKShareType, open) {
  RKShareTypeNone = -1,
  RKShareTypeClose = 0,
  RKShareTypeScreen = 1,
  RKShareTypeDoodle = 2,
  RKShareTypeSlam = 3,
  RKShareTypePointVideo = 4,
  RKShareTypeVideoControl = 5,
  RKShareTypeImageDoodle = 99,
};

enum RKSlamMessageCode : NSInteger;

SWIFT_CLASS("_TtC17RKCooperationCore17RKSlamBaseMessage")
@interface RKSlamBaseMessage : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nonnull messageId;
@property (nonatomic) NSInteger color;
@property (nonatomic, strong) RKPoint * _Nonnull pointF;
@property (nonatomic) enum RKSlamMessageType messageType;
@property (nonatomic, copy) NSString * _Nonnull doodleContent;
@property (nonatomic) NSInteger index;
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
@property (nonatomic) CGFloat scale;
@property (nonatomic) enum RKSlamMessageCode code;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessageType:(enum RKSlamMessageType)messageType OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKSlamMessageCode, open) {
  RKSlamMessageCodeOK = 0,
  RKSlamMessageCodeExceedTheMaximumNumberLimit = 1,
  RKSlamMessageCodeSceneLost = 2,
  RKSlamMessageCodeWithdrawalNothing = 3,
  RKSlamMessageCodeMarkNoFeatures = 4,
  RKSlamMessageCodeMarkNotSupport = 5,
  RKSlamMessageCodeOtherError = 6,
};

typedef SWIFT_ENUM(NSInteger, RKSlamMessageType, open) {
  RKSlamMessageTypeMarkDoodleUnknown = -1,
  RKSlamMessageTypeMarkDoodleRequest = 0,
  RKSlamMessageTypeMarkDoodleResponse = 1,
  RKSlamMessageTypeMarkArrowRequest = 2,
  RKSlamMessageTypeMarkArrowResponse = 3,
  RKSlamMessageTypeMarkWithdrawalRequest = 4,
  RKSlamMessageTypeMarkWithdrawalResponse = 5,
  RKSlamMessageTypeMarkClearRequest = 6,
  RKSlamMessageTypeMarkClearResponse = 7,
  RKSlamMessageTypeMarkStopRequest = 8,
  RKSlamMessageTypeMarkStopResponse = 9,
  RKSlamMessageTypeMarkStartRequest = 10,
  RKSlamMessageTypeMarkStartResponse = 11,
  RKSlamMessageTypeMarkStatusUpdate = 12,
  RKSlamMessageTypeMarkStateRequest = 13,
  RKSlamMessageTypeMarkSlamExit = 14,
  RKSlamMessageTypeMarkCircleRequest = 15,
  RKSlamMessageTypeMarkCircleResponse = 16,
  RKSlamMessageTypeMarkLocalImageRequest = 17,
  RKSlamMessageTypeMarkLocalImageResponse = 18,
  RKSlamMessageTypeMarkCloudImageRequest = 19,
  RKSlamMessageTypeMarkCloudImageResponse = 20,
};


SWIFT_CLASS("_TtC17RKCooperationCore12RKUserDevice")
@interface RKUserDevice : NSObject
@property (nonatomic) float appVersion;
@property (nonatomic) BOOL supportSlam;
@property (nonatomic, strong) RKCompanyUser * _Nullable userInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17RKCooperationCore13RKVideoCanvas")
@interface RKVideoCanvas : NSObject
/// 视频视图
@property (nonatomic, strong) UIView * _Nullable videoView;
/// 暂停视频渲染
- (void)pause;
/// 恢复视频渲染
- (void)resume;
/// 旋转视频角度，TIPS：必须是90°的倍数，该角度表示与屏幕正方向旋转后的夹角
/// / @param angle 要旋转的角度
- (void)rotateWithAngle:(NSInteger)angle;
/// 视频通话截图
/// @param width 要保存的图片宽
/// @param height 要保存的图片高
/// @param filePath 要保存的图片路径
/// @param result 视频通话截图结果回调，见[RKOperationListener]
- (UIImage * _Nullable)snapshotWithWidth:(int32_t)width height:(int32_t)height filePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
/// 对焦
/// @param xPercent 焦点所在渲染视图 x 轴的比例,取值需要归一化 0-1
/// @param yPercent 焦点所在渲染视图 y 轴的比例,取值需要归一化 0-1
- (void)focusWithXPercent:(float)xPercent yPercent:(float)yPercent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore23RKVideoControlInterface_")
@protocol RKVideoControlInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKVideoControlManager * _Null_unspecified shared;)
+ (RKVideoControlManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)msgJson:(RKMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// 请求控制
- (void)startVideoControll:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
/// 控制建立回调
- (void)establish:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock isSendSelf:(BOOL)isSendSelf;
/// 断开连接
- (void)stopVideoControll:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
/// 发送控制消息
- (void)sendMessage:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
@end


SWIFT_CLASS("_TtC17RKCooperationCore21RKVideoControlManager")
@interface RKVideoControlManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKVideoControlManager (SWIFT_EXTENSION(RKCooperationCore)) <RKVideoControlInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKVideoControlManager * _Null_unspecified shared;)
+ (RKVideoControlManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)msgJson:(RKMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// 请求控制
- (void)startVideoControll:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
/// 控制建立回调
- (void)establish:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock isSendSelf:(BOOL)isSendSelf;
/// 断开连接
- (void)stopVideoControll:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
/// 发送控制消息
- (void)sendMessage:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
@end


SWIFT_CLASS("_TtC17RKCooperationCore21RKVideoControlMessage")
@interface RKVideoControlMessage : NSObject
@property (nonatomic, copy) NSString * _Nonnull messageId;
@property (nonatomic, strong) RKPoint * _Nonnull pointF;
@property (nonatomic) CGFloat scale;
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, copy) NSString * _Nullable sponsorLicense;
@property (nonatomic, copy) NSString * _Nullable license;
@property (nonatomic, copy) NSString * _Nullable promoterUserId;
@property (nonatomic, copy) NSString * _Nullable executorUserId;
@property (nonatomic) BOOL isLightSupport;
@property (nonatomic) BOOL isScaleSupport;
@property (nonatomic) BOOL isFocusSupport;
@property (nonatomic) double minScale;
@property (nonatomic) double maxScale;
@property (nonatomic) double scaleGap;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessageType:(enum RKSlamMessageType)messageType OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKVideoFormat, open) {
  RKVideoFormatI420 = 1,
  RKVideoFormatIYUV = 2,
  RKVideoFormatRGB24 = 3,
  RKVideoFormatABGR = 4,
  RKVideoFormatARGB = 5,
  RKVideoFormatARGB444 = 6,
  RKVideoFormatRGB565 = 7,
  RKVideoFormatARGB1555 = 8,
  RKVideoFormatYUY2 = 9,
  RKVideoFormatYV12 = 10,
  RKVideoFormatUYVY = 11,
  RKVideoFormatMJPG = 12,
  RKVideoFormatNV21 = 13,
  RKVideoFormatNV12 = 14,
  RKVideoFormatBGRA = 15,
  RKVideoFormatH264 = 16,
  RKVideoFormatH264_SVC = 17,
};


SWIFT_CLASS("_TtC17RKCooperationCore12RKVideoParam")
@interface RKVideoParam : NSObject
/// 采集宽度，默认640
@property (nonatomic) NSInteger width;
/// 采集高度，默认360
@property (nonatomic) NSInteger height;
/// 采集帧率，默认24
@property (nonatomic) NSInteger framerate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKVideoSize, open) {
/// 不渲染
  RKVideoSizeSIZE_NONE = 0,
/// 最小尺寸
  RKVideoSizeSIZE_MIN = 1,
/// 小尺寸
  RKVideoSizeSIZE_SMALL = 2,
/// 大尺寸
  RKVideoSizeSIZE_LARGE = 3,
/// 最大尺寸
  RKVideoSizeSIZE_MAX = 4,
};

typedef SWIFT_ENUM(NSInteger, RKVolumeStatus, open) {
/// 未上传音频
  RKVolumeStatusNONE = 0,
/// 音量0
  RKVolumeStatusZERO = 1,
/// 音量低
  RKVolumeStatusLOW = 2,
/// 音量中
  RKVolumeStatusMID = 3,
/// 音量高
  RKVolumeStatusHIGH = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef RKCOOPERATIONCORE_SWIFT_H
#define RKCOOPERATIONCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import JCSDKOC;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RKCooperationCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC17RKCooperationCore12RKAPIManager")
@interface RKAPIManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class NSError;

SWIFT_PROTOCOL("_TtP17RKCooperationCore25RKCooperationAPIInterface_")
@protocol RKCooperationAPIInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKAPIManager * _Null_unspecified shared;)
+ (RKAPIManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 登录
/// \param companyId 公司
///
/// \param userName 用户名
///
/// \param password 密码
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)loginWithCompanyId:(NSString * _Nonnull)companyId userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 刷新token
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)refreshTokenWithParams:(NSDictionary<NSString *, NSString *> * _Nonnull)params onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 联系人分组列表
/// \param keyword 查询关键字
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)groupListWithKeyword:(NSString * _Nullable)keyword onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 联系人列表
/// \param keyword 查询关键字
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)contactsListWithKeyword:(NSString * _Nullable)keyword onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryCompanyUserListBy:(NSArray<NSString *> * _Nonnull)licenseCodeList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 创建会议
/// \param resolutionRatio 分辨率
///
/// \param meetingName 会议名称
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)createChannelWithResolutionRatio:(NSString * _Nullable)resolutionRatio meetingName:(NSString * _Nullable)meetingName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取用户信息
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)getUserInfoOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 上报心跳
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)heartBeatOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 通过会议ID查询会议
/// \param meetingId 会议ID
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)getMeetingWithMeetingId:(NSString * _Null_unspecified)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 修改密码
/// \param old 旧密码
///
/// \param new 新密码
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)changePwdWithOld:(NSString * _Null_unspecified)old new:(NSString * _Null_unspecified)new_ onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取二维码token
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)getGlassBindTokenOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取录制视频的URL
/// \param bucketName 文件夹名字
///
/// \param expireTime 过期时间
///
/// \param fileName 文件名
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)getRecordVideoFileUrlWithBucketName:(NSString * _Null_unspecified)bucketName expireTime:(NSInteger)expireTime fileName:(NSArray<NSString *> * _Null_unspecified)fileName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 查询会议记录分页列表
/// \param pageNum 页码 默认1
///
/// \param pageSize 分页数量 默认10
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)queryUserMeetingRecordPageWith:(NSInteger)pageNum pageSize:(NSInteger)pageSize onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设备用户设备信息上报
/// \param registerId 极光推送ID
///
/// \param isSlam 是否支持slam
///
/// \param deviceType 1-android  2-ios  3-pc  4-glass  5-web
///
/// \param onSuccess 成功回调
///
/// \param onFailed 失败回调
///
- (void)reportDeviceInfoWith:(NSString * _Nullable)registerId isSlam:(BOOL)isSlam deviceType:(NSInteger)deviceType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
@end

@class UIImage;

@interface RKAPIManager (SWIFT_EXTENSION(RKCooperationCore)) <RKCooperationAPIInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKAPIManager * _Nonnull shared;)
+ (RKAPIManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 用户token
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull token;)
+ (NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
+ (void)setToken:(NSString * _Nonnull)value;
/// 登录
- (void)loginWithCompanyId:(NSString * _Nonnull)companyId userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 刷新token
- (void)refreshTokenWithParams:(NSDictionary<NSString *, NSString *> * _Nonnull)params onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 联系人分组列表
- (void)groupListWithKeyword:(NSString * _Nullable)keyword onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 联系人列表
- (void)contactsListWithKeyword:(NSString * _Nullable)keyword onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryCompanyUserListBy:(NSArray<NSString *> * _Nonnull)licenseCodeList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 创建会议
- (void)createChannelWithResolutionRatio:(NSString * _Nullable)resolutionRatio meetingName:(NSString * _Nullable)meetingName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取用户信息
- (void)getUserInfoOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)getCompanyLisenceOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)heartBeatOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 通过会议ID查询会议
- (void)getMeetingWithMeetingId:(NSString * _Null_unspecified)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 修改密码
- (void)changePwdWithOld:(NSString * _Null_unspecified)old new:(NSString * _Null_unspecified)new_ onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 上传图片
- (void)uploadImageWithImgs:(NSArray<UIImage *> * _Nonnull)imgs onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取二维码token
- (void)getGlassBindTokenOnSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 获取用户URL
- (void)getRecordVideoFileUrlWithBucketName:(NSString * _Null_unspecified)bucketName expireTime:(NSInteger)expireTime fileName:(NSArray<NSString *> * _Null_unspecified)fileName onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 查询会议记录分页列表
- (void)queryUserMeetingRecordPageWith:(NSInteger)pageNum pageSize:(NSInteger)pageSize onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 新增会议参会人
- (void)saveMeetingUsersWith:(NSString * _Null_unspecified)meetingId userIdList:(NSArray<NSString *> * _Null_unspecified)userIdList sessionStatus:(NSInteger)sessionStatus onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 删除会议参会人
- (void)deleteMeetingUsersWith:(NSString * _Null_unspecified)meetingId userIdList:(NSArray<NSString *> * _Null_unspecified)userIdList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 上传录制会议视频
- (void)saveMeetingVideoUrlWith:(NSString * _Nonnull)meetingId bucket:(NSString * _Nonnull)bucket videoUrl:(NSString * _Nonnull)videoUrl onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 设备用户设备信息上报
- (void)reportDeviceInfoWith:(NSString * _Nullable)registerId isSlam:(BOOL)isSlam deviceType:(NSInteger)deviceType onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
/// 发送推送
- (void)sendPushMessageTo:(NSArray<NSString *> * _Nullable)userIdList notificationMessage:(NSDictionary<NSString *, NSString *> * _Nonnull)notificationMessage extraMap:(NSDictionary<NSString *, NSString *> * _Nonnull)extraMap onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)getTaggingColorWithMeetingId:(NSString * _Nonnull)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)reportMeetingInfoWithMeetingId:(NSString * _Nonnull)meetingId promoterUserId:(NSString * _Nonnull)promoterUserId executorUserId:(NSString * _Nonnull)executorUserId shareType:(NSInteger)shareType shareImageUrl:(NSString * _Nonnull)shareImageUrl onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryReportMeetingInfoWithMeetingId:(NSString * _Nonnull)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)addMeetingGraffitiWithMeetingId:(NSString * _Nonnull)meetingId graffitiJsonList:(NSArray<NSString *> * _Nonnull)graffitiJsonList onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)queryMeetingGraffitiWithMeetingId:(NSString * _Nonnull)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
- (void)clearMeetingGraffitiWithMeetingId:(NSString * _Nonnull)meetingId onSuccess:(void (^ _Nullable)(id _Nullable))onSuccess onFailed:(void (^ _Nullable)(NSError * _Nullable))onFailed;
@end

typedef SWIFT_ENUM(NSInteger, RKAudioOutputType, open) {
  RKAudioOutputTypeNONE = 0,
};


SWIFT_CLASS("_TtC17RKCooperationCore12RKAudioParam")
@interface RKAudioParam : NSObject
/// 音频输入采样率 0 表示自动选择，手表等设备可以设置为 8000，默认值为 0
@property (nonatomic) NSInteger audioInputSamplingRate;
/// 音频输出采样率 0 表示自动选择，手表等设备可以设置为 8000，默认值为 0
@property (nonatomic) NSInteger audioOutputSamplingRate;
/// 音频输入通道数量 0 表示自动选择，0 和 1 表示单通道，>= 2 表示双通道，默认值为0
@property (nonatomic) NSInteger audioInputChannelNumber;
/// 音频输出通道数量 0 表示自动选择，0 和 1 表示单通道，>= 2 表示双通道，默认值为0
@property (nonatomic) NSInteger audioOutputChannelNumber;
/// 是否自动打开音频输出设备
@property (nonatomic) BOOL autoStartAudioOutputDevice;
/// 是否自动打开音频输入设备
@property (nonatomic) BOOL autoStartAudioInputDevice;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKCallManager;
@class RKChannelParam;
@protocol RKCallListener;
@protocol RKIncomingCallListener;

SWIFT_PROTOCOL("_TtP17RKCooperationCore15RKCallInterface_")
@protocol RKCallInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCallManager * _Null_unspecified shared;)
+ (RKCallManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 邀请加入频道 对方将收到 RKIncomingCallListener.onReceiveCall
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     userIdList:  邀请的用户ID列表
///   </li>
///   <li>
///     channelTitle: 邀请的用户ID列表
///   </li>
///   <li>
///     channelParam:  频道参数
///   </li>
/// </ul>
- (void)inviteWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList channelTitle:(NSString * _Nullable)channelTitle channelParam:(RKChannelParam * _Nullable)channelParam;
/// 取消呼叫，呼叫方将收到 RKCallListener.onCallCancel
/// \param channelId 频道ID 
///
- (void)cancelWithChannelId:(NSString * _Nonnull)channelId;
/// 接听
/// \param channelId 频道ID 
///
- (void)acceptWithChannelId:(NSString * _Nonnull)channelId;
/// 拒绝加入频道、原因是正在其他频道忙(同时只能加入一个频道) 对方将收到 RKCallListener.onCallBusy
/// \param channelId 频道ID 
///
- (void)busyWithChannelId:(NSString * _Nonnull)channelId;
/// 主动拒绝加入频道
/// <ul>
///   <li>
///     Parameter对方将收到 RKCallListener.onCallRejected
///   </li>
/// </ul>
/// \param channelId 拒绝的频道ID 
///
- (void)rejectWithChannelId:(NSString * _Nonnull)channelId;
/// 设置呼叫监听
/// \param listener @RKCallListener
///
- (void)addCallStateWithListener:(id <RKCallListener> _Nonnull)listener;
/// 设置呼叫监听
/// \param listener @RKCallListener
///
- (void)removeCallStateWithListener:(id <RKCallListener> _Nonnull)listener;
/// 移除来电监听
/// \param listener @RKIncomingCallListener
///
- (void)addIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
/// 移除来电监听
/// \param listener @RKIncomingCallListener
///
- (void)removeIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
@end

@class RKChannel;
enum RKErrorCode : NSInteger;

SWIFT_PROTOCOL("_TtP17RKCooperationCore14RKCallListener_")
@protocol RKCallListener <NSObject>
@optional
/// 频道创建回调
/// \param channelId 频道ID 
///
/// \param channel @RKChannel 
///
- (void)onChannelCreatedWithChannelId:(NSString * _Nonnull)channelId channel:(RKChannel * _Nonnull)channel;
/// 邀请发送结果回调
/// \param channelId 频道ID 
///
/// \param userId 用户ID 
///
/// \param result 邀请发送结果 
///
/// \param reason 邀请失败的原因，@RKErrorCode 
///
- (void)onInviteResultWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId result:(BOOL)result reason:(enum RKErrorCode)reason;
/// 用户接受了邀请
/// \param channelId 频道ID 
///
/// \param userId 用户ID 
///
- (void)onCallAcceptWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 被呼叫的用户正忙
/// \param channelId 频道ID 
///
/// \param userId 用户ID 
///
- (void)onCallBusyWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 被呼叫的用户拒绝了加入频道
/// \param channelId 频道ID 
///
/// \param userId 用户ID 
///
- (void)onCallRejectedWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 呼叫或加入失败了
/// \param channelId 频道ID 
///
/// \param reason 失败的原因 
///
- (void)onErrorWithChannelId:(NSString * _Nonnull)channelId reason:(enum RKErrorCode)reason;
@end


SWIFT_CLASS("_TtC17RKCooperationCore13RKCallManager")
@interface RKCallManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore13RKMsgListener_")
@protocol RKMsgListener <NSObject>
@optional
/// 收到透传在线消息
- (void)onlineMessageReceivedFrom:(NSString * _Nonnull)userId message:(NSString * _Nonnull)message;
@end

@class RKMessage;

SWIFT_PROTOCOL("_TtP17RKCooperationCore17RKMessageListener_")
@protocol RKMessageListener <RKMsgListener>
/// 收到在线消息
- (void)onlineMessageReceivedWithMsg:(RKMessage * _Nonnull)msg;
@end


@interface RKCallManager (SWIFT_EXTENSION(RKCooperationCore)) <RKMessageListener>
- (void)onlineMessageReceivedWithMsg:(RKMessage * _Nonnull)msg;
@end


@interface RKCallManager (SWIFT_EXTENSION(RKCooperationCore)) <RKCallInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCallManager * _Null_unspecified shared;)
+ (RKCallManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (void)destroy;
- (void)inviteWithChannelId:(NSString * _Nonnull)channelId userIdList:(NSArray<NSString *> * _Nonnull)userIdList channelTitle:(NSString * _Nullable)channelTitle channelParam:(RKChannelParam * _Nullable)channelParam;
- (void)cancelWithChannelId:(NSString * _Nonnull)channelId;
- (void)acceptWithChannelId:(NSString * _Nonnull)channelId;
- (void)busyWithChannelId:(NSString * _Nonnull)channelId;
- (void)rejectWithChannelId:(NSString * _Nonnull)channelId;
- (void)addIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
- (void)removeIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
- (void)addCallStateWithListener:(id <RKCallListener> _Nonnull)listener;
- (void)removeCallStateWithListener:(id <RKCallListener> _Nonnull)listener;
- (void)startCallListener;
@end

typedef SWIFT_ENUM(NSInteger, RKCameraType, open) {
/// 未找到摄像头
  RKCameraTypeNONE = 0,
/// 前置摄像头
  RKCameraTypeFRONT = 1,
/// 后置摄像头
  RKCameraTypeBACK = 2,
/// 其他摄像头
  RKCameraTypeOTHER = 3,
};

@class RKChannelParticipant;
@class RKMeetingLife;
@class RKRemoteRecordParams;
@class RKCompanyUser;

SWIFT_CLASS("_TtC17RKCooperationCore9RKChannel")
@interface RKChannel : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, readonly, copy) NSArray<RKChannelParticipant *> * _Nonnull participants;
@property (nonatomic, strong) RKMeetingLife * _Nullable meetingLife;
@property (nonatomic, strong) RKChannelParam * _Nullable channelParam;
@property (nonatomic, strong) RKRemoteRecordParams * _Nullable recordParams;
@property (nonatomic, readonly, strong) RKChannelParticipant * _Nullable participantSelf;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Null_unspecified userIds;
- (RKCompanyUser * _Nullable)memberFromUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RKChannelMsgListener;
@protocol RKChannelListener;
@protocol RKDeviceListener;
@protocol RKRemoteDeviceListener;
@protocol RKShareListener;
enum RKVideoSize : NSInteger;
enum RKNetStatus : NSInteger;
enum RKVolumeStatus : NSInteger;
enum RKChannelState : NSInteger;
@protocol RKOperationListener;
enum RKResolution : NSInteger;
enum RKRecordState : NSInteger;

SWIFT_PROTOCOL("_TtP17RKCooperationCore18RKChannelInterface_")
@protocol RKChannelInterface <NSObject>
/// 添加频道内消息监听
/// \param listener @RKChannelMsgListener 
///
- (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
/// 移除频道内监听
/// \param listener @RKChannelMsgListener 
///
- (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
/// 添加监听
/// \param listener @RKChannelListener 
///
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 移除监听
/// \param listener @RKChannelListener 
///
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 添加本地设备监听
/// \param listener @RKDeviceListener 
///
- (void)addDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
/// 移除本地设备监听
/// \param listener @RKDeviceListener 
///
- (void)removeDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
/// 添加远端设备监听
/// \param listener @RKDeviceListener 
///
- (void)addRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
/// 移除远端设备监听
/// \param listener @RKRemoteDeviceListener 
///
- (void)removeRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
/// 添加分享功能监听
/// \param listener @RKShareListener 
///
- (void)addShareWithListener:(id <RKShareListener> _Nonnull)listener;
/// 移除分享功能监听
/// \param listener @RKShareListener 
///
- (void)removeShareWithListener:(id <RKShareListener> _Nonnull)listener;
/// 加入频道
- (void)joinWithParam:(RKChannelParam * _Nullable)param;
/// 离开频道
- (void)leave;
/// 将指定用户踢出频道
/// \param userId 踢出用户的userId 
///
- (void)kickOutUserWithUserId:(NSString * _Nonnull)userId;
/// 关闭频道，其他端将自动退出频道，调用后将在[RKChannelListener.onChannelStopResult]收到关闭结果
/// 调用端将收到onChannelStopResult回调，其他端将受到[RKChannelListener.onChannelStopResult]，
/// 并且reason值为[RKErrorCode.CHANNEL_OVER]
- (void)dispose;
/// 是否开启上传音频流
/// \param enable true 开启，false: 关闭
///
- (void)enableUploadLocalAudioStreamWithEnable:(BOOL)enable;
/// 是否开启上传视频流
/// \param enable true 开启，false: 关闭
///
- (void)enableUploadLocalVideoStreamWithEnable:(BOOL)enable;
/// 是否开启本地音频输出
/// \param enable true 开启，false: 关闭
///
- (void)enableAudioOutputWithEnable:(BOOL)enable;
/// 获取用户上传的视频流大小
/// <ul>
///   <li>
///     Return @RKVideoSize
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (enum RKVideoSize)getVideoSizeWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 是否频道创建者
/// \param userId 用户ID 
///
- (BOOL)isCreatorWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取频道内用户的网络状态
/// <ul>
///   <li>
///     Return 见[NetStatus]
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (enum RKNetStatus)getNetStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取用户音频是否上传
/// <ul>
///   <li>
///     Return true: 开启，false: 未开启
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (BOOL)isAudioUploadWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取用户视频是否上传
/// <ul>
///   <li>
///     Return true: 开启，false: 未开启
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (BOOL)isVideoUploadWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取用户mic输入音量状态
/// <ul>
///   <li>
///     Return @RKVolumeStatus
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (enum RKVolumeStatus)getVolumeStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取用户设置的显示昵称
/// <ul>
///   <li>
///     Return 用户设置的显示昵称
///   </li>
/// </ul>
/// \param userId 用户ID 
///
- (NSString * _Nullable)getDisplayNameWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕共享流
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 获取视频流所属用户id
///   </li>
///   <li>
///     videoSize: 共享流的视频尺寸， @RKVideoSize
///   </li>
/// </ul>
- (void)requestScreenVideoWithUserId:(NSString * _Nonnull)userId videoSize:(enum RKVideoSize)videoSize;
/// 设置频道自定义属性，设置后所有成员将通过 [RKChannelListener.onCustomPropertyChanged]
/// 收到最新的属性值
/// \param property 要设置的频道自定义属性 
///
- (void)setCustomWithProperty:(NSString * _Nonnull)property;
/// 查询频道自定义属性
/// <ul>
///   <li>
///     Return 返回频道的自定义属性
///   </li>
/// </ul>
- (NSString * _Nullable)getCustomProperty SWIFT_WARN_UNUSED_RESULT;
/// 发送频道内消息，toUserId不为空时将发送给指定用户，否则发给频道内所有用户
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     msg: 要发送的频道消息主体
///   </li>
///   <li>
///     toUserIds: 要发送的频道用户Id list，如果传nil则发送给频道内所有成员
///   </li>
///   <li>
///     operationListener: 发送频道消息的结果，@RKOperationListener
///   </li>
/// </ul>
- (void)sendChannelMessageWithMsg:(NSString * _Nonnull)msg to:(NSArray<NSString *> * _Nullable)userIds;
/// 获取频道id
/// <ul>
///   <li>
///     Return 当前频道ID，如果未加入频道则返回null
///   </li>
/// </ul>
- (NSString * _Nullable)getChannelId SWIFT_WARN_UNUSED_RESULT;
/// 获取频道当前状态
/// <ul>
///   <li>
///     Return @RKChannelState
///   </li>
/// </ul>
- (enum RKChannelState)getChannelState SWIFT_WARN_UNUSED_RESULT;
/// 获取频道密码，未设置默认123456
/// <ul>
///   <li>
///     Return 当前频道的密码，密码由创建房间的人设置，见[ChannelParam.password]
///   </li>
/// </ul>
- (NSString * _Nullable)getChannelPassword SWIFT_WARN_UNUSED_RESULT;
/// 本地音频是否上传
/// <ul>
///   <li>
///     Return true: 本地音频正在上传，false: 本地音频未在上传
///   </li>
/// </ul>
- (BOOL)isLocalAudioUpload SWIFT_WARN_UNUSED_RESULT;
/// 本地视频是否上传
/// <ul>
///   <li>
///     Return true: 本地视频正在上传，false: 本地视频未在上传
///   </li>
/// </ul>
- (BOOL)isLocalVideoUpload SWIFT_WARN_UNUSED_RESULT;
/// 本地音频输出与否
/// <ul>
///   <li>
///     Return true: 当前已开启音频输出，false: 当前未开启音频输出
///   </li>
/// </ul>
- (BOOL)isLocalAudioOutput SWIFT_WARN_UNUSED_RESULT;
/// 频道是否在共享屏幕
/// <ul>
///   <li>
///     true: 有人在共享屏幕，false: 没有人在共享屏幕
///   </li>
/// </ul>
- (BOOL)isScreenShare SWIFT_WARN_UNUSED_RESULT;
/// 获取频道内正在共享的用户userId
/// <ul>
///   <li>
///     Return 返回当前正在屏幕共享的用户id，如果当前没有用户在共享屏幕则返回null
///   </li>
/// </ul>
- (NSString * _Nullable)getScreenShareUserId SWIFT_WARN_UNUSED_RESULT;
/// 查询频道信息
/// \param result 查询频道信息结果，@RKOperationListener 
///
- (void)queryChannelWithResult:(id <RKOperationListener> _Nonnull)result;
/// 获取频道的最大分辨率
/// 频道中的最大分辩由第一个加入频道的用户决定， JoinParam 参数中设置的分辩率并一定是频道的最大分辨率，
/// 只有加入成功后才能准确知道
/// <ul>
///   <li>
///     Return @RKResolution
///   </li>
/// </ul>
- (enum RKResolution)getMaxResolution SWIFT_WARN_UNUSED_RESULT;
- (void)setRecordWithParams:(RKRemoteRecordParams * _Nonnull)params;
/// 开启云端视频录制，需要在录制状态[RecordState.STATE_READY]的时候调用，同时如果需要开启云端录制，需要在
/// 创建频道的时候在[IChannel.join]函数的[ChannelParam.recordParam]传入录制参数
/// @param enable true: 开启，false: 关闭
- (void)enableRecordWithEnable:(BOOL)enable;
/// 查询视频录制状态
/// <ul>
///   <li>
///     Return @RKRecordState
///   </li>
/// </ul>
- (enum RKRecordState)getRecordState SWIFT_WARN_UNUSED_RESULT;
/// 开启屏幕共享
- (void)startShareScreen;
/// 结束屏幕共享
- (void)stopShareScreen;
/// 发起白板标注
- (void)startShareDoodle;
/// 结束白板共享
- (void)stopShareDoodle;
/// 发起截图标注
/// \param imageUrl 图片地址 
///
- (void)startShareImageDoodleWithImageUrl:(NSString * _Nonnull)imageUrl;
/// 结束截图标注
- (void)stopShareImageDoodle;
/// 邀请频道内其他人发起AR标注
/// \param userId 对方userId 
///
- (void)inviteShareSlamWithUserId:(NSString * _Nonnull)userId;
/// 结束自己邀请发起的AR标注
- (void)stopInviteShareSlam;
@end


@interface RKChannel (SWIFT_EXTENSION(RKCooperationCore)) <RKChannelInterface>
- (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
- (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
- (void)addDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
- (void)removeDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
- (void)addRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
- (void)removeRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
- (void)addShareWithListener:(id <RKShareListener> _Nonnull)listener;
- (void)removeShareWithListener:(id <RKShareListener> _Nonnull)listener;
- (void)joinWithParam:(RKChannelParam * _Nullable)param;
- (void)leave;
- (void)kickOutUserWithUserId:(NSString * _Nonnull)userId;
- (void)dispose;
- (void)enableUploadLocalAudioStreamWithEnable:(BOOL)enable;
- (void)enableUploadLocalVideoStreamWithEnable:(BOOL)enable;
- (void)enableAudioOutputWithEnable:(BOOL)enable;
- (enum RKVideoSize)getVideoSizeWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCreatorWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (enum RKNetStatus)getNetStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAudioUploadWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isVideoUploadWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (enum RKVolumeStatus)getVolumeStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDisplayNameWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (void)requestScreenVideoWithUserId:(NSString * _Nonnull)userId videoSize:(enum RKVideoSize)videoSize;
- (void)setCustomWithProperty:(NSString * _Nonnull)property;
- (NSString * _Nullable)getCustomProperty SWIFT_WARN_UNUSED_RESULT;
- (void)sendChannelMessageWithMsg:(NSString * _Nonnull)msg to:(NSArray<NSString *> * _Nullable)userIds;
- (NSString * _Nullable)getChannelId SWIFT_WARN_UNUSED_RESULT;
- (enum RKChannelState)getChannelState SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getChannelPassword SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalAudioUpload SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalVideoUpload SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalAudioOutput SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isScreenShare SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getScreenShareUserId SWIFT_WARN_UNUSED_RESULT;
- (void)setRecordWithParams:(RKRemoteRecordParams * _Nonnull)params;
- (void)enableRecordWithEnable:(BOOL)enable;
- (enum RKRecordState)getRecordState SWIFT_WARN_UNUSED_RESULT;
- (void)queryChannelWithResult:(id <RKOperationListener> _Nonnull)result;
- (enum RKResolution)getMaxResolution SWIFT_WARN_UNUSED_RESULT;
/// 开启摄像头
- (void)startCamera;
/// 关闭摄像头
- (void)stopCamera;
/// 切换摄像头
- (void)switchCamera;
/// 设置摄像头采集分辨率
- (void)setCameraPropertyWithWidth:(int32_t)width height:(int32_t)height framerate:(int32_t)framerate;
- (void)startShareScreen;
- (void)stopShareScreen;
- (void)startShareDoodle;
- (void)stopShareDoodle;
- (void)startShareImageDoodleWithImageUrl:(NSString * _Nonnull)imageUrl;
- (void)stopShareImageDoodle;
- (void)inviteShareSlamWithUserId:(NSString * _Nonnull)userId;
- (void)stopInviteShareSlam;
@end


enum RKShareType : NSInteger;

SWIFT_PROTOCOL("_TtP17RKCooperationCore17RKChannelListener_")
@protocol RKChannelListener <NSObject>
/// 加入频道的结果回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 要加入的频道ID
///   </li>
///   <li>
///     result: 加入的结果，true: 成功加入，false: 加入失败
///   </li>
///   <li>
///     reason: 加入失败的原因，@ RKErrorCode
///   </li>
/// </ul>
- (void)onJoinChannelResultWithChannelId:(NSString * _Nullable)channelId result:(BOOL)result reason:(enum RKErrorCode)reason;
/// 屏幕共享状态发生改变
/// \param screenUserId 不为空则有成员正在共享屏幕，否则值为null 
///
- (void)onUserScreenShareStateChangedWithScreenUserId:(NSString * _Nullable)screenUserId;
/// 离开频道的回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 离开的频道ID
///   </li>
///   <li>
///     reason: 离开频道的调用结果，@ RKErrorCode
///   </li>
/// </ul>
- (void)onLeaveWithChannelId:(NSString * _Nullable)channelId reason:(enum RKErrorCode)reason;
/// 调用解散频道的结果回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     result: 调用结果，true: 解散成员，false: 解散失败
///   </li>
///   <li>
///     reason: 解散失败的原因，@ RKErrorCode
///   </li>
/// </ul>
- (void)onChannelStopResultWithResult:(BOOL)result reason:(enum RKErrorCode)reason;
/// 频道状态发生变更
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     newState: 当前状态，@ RKChannelState
///   </li>
///   <li>
///     oldState: 上一个状态，@ RKChannelState
///   </li>
/// </ul>
- (void)onChannelStateChangedWithNewState:(enum RKChannelState)newState oldState:(enum RKChannelState)oldState;
/// 自定义频道属性发生了改变
/// \param customProperty 改变后的属性值 
///
- (void)onCustomPropertyChangedWithCustomProperty:(NSString * _Nullable)customProperty;
/// 录制状态发生改变
/// \param recordState 当前的录制状态，@ RKRecordState 
///
- (void)onRecordStateChangedWithRecordState:(enum RKRecordState)recordState;
/// 有成员加入频道
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     userId: 加入的成员用户ID
///   </li>
///   <li>
///     displayName: 该成员的显示昵称
///   </li>
/// </ul>
- (void)onUserJoinChannelWithChannelId:(NSString * _Nullable)channelId userId:(NSString * _Nullable)userId displayName:(NSString * _Nullable)displayName;
/// 频道内成员离开
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     userId: 离开的成员用户ID
///   </li>
/// </ul>
- (void)onUserLeaveChannelWithChannelId:(NSString * _Nullable)channelId userId:(NSString * _Nullable)userId;
/// 频道内共享状态回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     shareType: 分享类型 @RKShareType
///   </li>
/// </ul>
- (void)onChannelShareWithChannelId:(NSString * _Nullable)channelId shareType:(enum RKShareType)shareType;
/// 频道成员更新
/// \param channelId 频道ID 
///
- (void)onParticipantUpdateWithChannelId:(NSString * _Nullable)channelId;
@end


SWIFT_CLASS("_TtC17RKCooperationCore16RKChannelManager")
@interface RKChannelManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKChannelManager (SWIFT_EXTENSION(RKCooperationCore)) <RKMessageListener>
- (void)onlineMessageReceivedWithMsg:(RKMessage * _Nonnull)msg;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore20RKChannelMsgListener_")
@protocol RKChannelMsgListener <NSObject>
@optional
/// 收到透传频道内消息
- (void)onChannelMessageReceivedFrom:(NSString * _Nonnull)userId channelId:(NSString * _Nonnull)channelId message:(NSString * _Nonnull)message;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore24RKChannelMessageListener_")
@protocol RKChannelMessageListener <RKChannelMsgListener>
/// 收到频道内消息
- (void)onChannelMessageReceivedWithChannelId:(NSString * _Nonnull)channelId msg:(RKMessage * _Nonnull)msg;
@end


@interface RKChannelManager (SWIFT_EXTENSION(RKCooperationCore)) <RKChannelMessageListener>
- (void)onChannelMessageReceivedWithChannelId:(NSString * _Nonnull)channelId msg:(RKMessage * _Nonnull)msg;
@end


@interface RKChannelManager (SWIFT_EXTENSION(RKCooperationCore)) <RKChannelListener>
- (void)onJoinChannelResultWithChannelId:(NSString * _Nullable)channelId result:(BOOL)result reason:(enum RKErrorCode)reason;
- (void)onUserScreenShareStateChangedWithScreenUserId:(NSString * _Nullable)screenUserId;
- (void)onLeaveWithChannelId:(NSString * _Nullable)channelId reason:(enum RKErrorCode)reason;
- (void)onChannelStopResultWithResult:(BOOL)result reason:(enum RKErrorCode)reason;
- (void)onChannelStateChangedWithNewState:(enum RKChannelState)newState oldState:(enum RKChannelState)oldState;
- (void)onCustomPropertyChangedWithCustomProperty:(NSString * _Nullable)customProperty;
- (void)onRecordStateChangedWithRecordState:(enum RKRecordState)recordState;
- (void)onUserJoinChannelWithChannelId:(NSString * _Nullable)channelId userId:(NSString * _Nullable)userId displayName:(NSString * _Nullable)displayName;
- (void)onUserLeaveChannelWithChannelId:(NSString * _Nullable)channelId userId:(NSString * _Nullable)userId;
- (void)onChannelShareWithChannelId:(NSString * _Nullable)channelId shareType:(enum RKShareType)shareType;
- (void)onParticipantUpdateWithChannelId:(NSString * _Nullable)channelId;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore25RKChannelManagerInterface_")
@protocol RKChannelManagerInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKChannelManager * _Null_unspecified shared;)
+ (RKChannelManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 新建频道
/// \param channelId 频道ID，不传由内部创建，外部传入需要调用SDK接口生成 
///
/// \param channelTitle 频道标题 
///
/// \param channelParam 频道属性，不传由内部生成默认频道配置 
///
///
/// returns:
/// @RKChannel
- (RKChannel * _Nullable)createWithChannelId:(NSString * _Nullable)channelId channelTitle:(NSString * _Nullable)channelTitle channelParam:(RKChannelParam * _Nullable)channelParam SWIFT_WARN_UNUSED_RESULT;
/// 获取频道
/// \param channelId 频道ID 
///
///
/// returns:
/// @RKChannel
- (RKChannel * _Nullable)getChannelWithChannelId:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
/// 加入频道
/// \param channelId 频道ID，不传由内部创建，外部传入需要调用SDK接口生成 
///
/// \param channelPassword 频道密码  默认 123456 
///
- (void)joinWithChannelId:(NSString * _Nonnull)channelId channelPassword:(NSString * _Nullable)channelPassword;
/// 添加频道监听
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 移除频道监听
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 添加频道内分享功能监听
- (void)addChannelShareWithListener:(id <RKShareListener> _Nonnull)listener;
/// 移除频道内分享功能监听
- (void)removeChannelShareWithListener:(id <RKShareListener> _Nonnull)listener;
@end


@interface RKChannelManager (SWIFT_EXTENSION(RKCooperationCore)) <RKChannelManagerInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKChannelManager * _Null_unspecified shared;)
+ (RKChannelManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (void)destroy;
@property (nonatomic, copy) NSArray<RKChannel *> * _Nonnull channelList;
- (RKChannel * _Nullable)getChannelWithChannelId:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
- (void)addChannelShareWithListener:(id <RKShareListener> _Nonnull)listener;
- (void)removeChannelShareWithListener:(id <RKShareListener> _Nonnull)listener;
- (RKChannel * _Nullable)createWithChannelId:(NSString * _Nullable)channelId channelTitle:(NSString * _Nullable)channelTitle channelParam:(RKChannelParam * _Nullable)channelParam SWIFT_WARN_UNUSED_RESULT;
- (void)joinWithChannelId:(NSString * _Nonnull)channelId channelPassword:(NSString * _Nullable)channelPassword;
@end





SWIFT_CLASS("_TtC17RKCooperationCore14RKChannelParam")
@interface RKChannelParam : NSObject
/// 最多允许多少人加入当前频道
/// 目前最多只支持16个人同时进行音视频聊天
@property (nonatomic) NSInteger maxMembers;
/// 频道最大支持分辨率 默认为720p
@property (nonatomic) enum RKResolution maxResolution;
/// 频道密码，默认123456
@property (nonatomic, copy) NSString * _Nonnull password;
/// 频道心跳间隔,默认20s
@property (nonatomic) int32_t heartbeatTime;
/// 频道心跳超时时间，默认60s
@property (nonatomic) int32_t heartbeatTimeout;
/// 频道视频帧率，默认24帧
@property (nonatomic) int32_t frameRate;
/// 频道自定义属性
@property (nonatomic, copy) NSString * _Nullable extraParam;
/// 频道视频画面比例，传入值为宽高比浮点数，默认为 16:9
@property (nonatomic) float videoRatio;
/// 频道录制参数
@property (nonatomic, strong) RKRemoteRecordParams * _Nullable recordParam;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKVideoCanvas;

SWIFT_CLASS("_TtC17RKCooperationCore20RKChannelParticipant")
@interface RKChannelParticipant : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nullable displayName;
@property (nonatomic) enum RKNetStatus netStatus;
@property (nonatomic) enum RKVolumeStatus volumeStatus;
@property (nonatomic) enum RKVideoSize videoSize;
@property (nonatomic) BOOL isCreator;
@property (nonatomic) BOOL isSelf;
@property (nonatomic) BOOL isAudioStart;
@property (nonatomic) BOOL isVideoStart;
@property (nonatomic, strong) RKVideoCanvas * _Nullable videoCanvas;
@property (nonatomic, strong) RKCompanyUser * _Nullable companyUser;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum RKRenderType : NSInteger;

@interface RKChannelParticipant (SWIFT_EXTENSION(RKCooperationCore))
- (void)startVideoWithRenderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize;
@end

typedef SWIFT_ENUM(NSInteger, RKChannelState, open) {
/// 空闲
  RKChannelStateSTATE_IDLE = 0,
/// 加入中
  RKChannelStateSTATE_JOINING = 1,
/// 已加入
  RKChannelStateSTATE_JOINED = 2,
/// 离开中
  RKChannelStateSTATE_LEAVING = 3,
};


SWIFT_CLASS("_TtC17RKCooperationCore13RKChannelUser")
@interface RKChannelUser : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17RKCooperationCore13RKCompanyUser")
@interface RKCompanyUser : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17RKCooperationCore17RKCooperationCore")
@interface RKCooperationCore : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKShareDoodleManager;
@class RKShareScreenManager;
@class RKShareSlamManager;
@class RKSharePointManager;
@class RKVideoControlManager;
@class RKCooperationCoreParams;
@protocol RKLoginCallback;

SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKCooperationInterface_")
@protocol RKCooperationInterface <NSObject>
/// sdk管理类
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCooperationCore * _Null_unspecified shared;)
+ (RKCooperationCore * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 获取呼叫管理类
- (RKCallManager * _Nonnull)getCallManager SWIFT_WARN_UNUSED_RESULT;
/// 获取频道管理类
- (RKChannelManager * _Nonnull)getChannelManager SWIFT_WARN_UNUSED_RESULT;
/// 获取涂鸦管理类
- (RKShareDoodleManager * _Nonnull)getShareDoodleManager SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕共享管理类
- (RKShareScreenManager * _Nonnull)getShareScreenManager SWIFT_WARN_UNUSED_RESULT;
/// 获取AR标注管理类
- (RKShareSlamManager * _Nonnull)getShareSlamManager SWIFT_WARN_UNUSED_RESULT;
/// 获取视频点选管理类
- (RKSharePointManager * _Nonnull)getSharePointManager SWIFT_WARN_UNUSED_RESULT;
/// 获取视频控制管理类
- (RKVideoControlManager * _Nonnull)getVideoContrllMgr SWIFT_WARN_UNUSED_RESULT;
/// sdk参数配置
- (void)initWithParams:(RKCooperationCoreParams * _Nonnull)params SWIFT_METHOD_FAMILY(none);
/// sdk登录 如果已经登录过了 可以不用传用户信息
- (void)loginWithCompany:(NSString * _Nullable)company userName:(NSString * _Nullable)userName password:(NSString * _Nullable)password;
/// sdk登出
- (void)logout;
/// sdk重登
- (void)reLogin;
/// sdk销毁
- (void)destroy;
/// 添加登录状态监听
- (void)addLoginWithListener:(id <RKLoginCallback> _Nonnull)listener;
/// 移除登录状态监听
- (void)removeLoginWithListener:(id <RKLoginCallback> _Nonnull)listener;
/// 添加来电监听
- (void)addIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
/// 移除来电监听
- (void)removeIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
/// 添加呼叫监听
- (void)addCallWithListener:(id <RKCallListener> _Nonnull)listener;
/// 移除呼叫监听
- (void)removeCallWithListener:(id <RKCallListener> _Nonnull)listener;
/// 添加消息监听
- (void)addMessageWithListener:(id <RKMsgListener> _Nonnull)listener;
/// 移除消息监听
- (void)removeMessageWithListener:(id <RKMsgListener> _Nonnull)listener;
@end


@interface RKCooperationCore (SWIFT_EXTENSION(RKCooperationCore)) <RKCooperationInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCooperationCore * _Null_unspecified shared;)
+ (RKCooperationCore * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (RKCallManager * _Nonnull)getCallManager SWIFT_WARN_UNUSED_RESULT;
- (RKChannelManager * _Nonnull)getChannelManager SWIFT_WARN_UNUSED_RESULT;
- (RKShareDoodleManager * _Nonnull)getShareDoodleManager SWIFT_WARN_UNUSED_RESULT;
- (RKShareScreenManager * _Nonnull)getShareScreenManager SWIFT_WARN_UNUSED_RESULT;
- (RKShareSlamManager * _Nonnull)getShareSlamManager SWIFT_WARN_UNUSED_RESULT;
- (RKSharePointManager * _Nonnull)getSharePointManager SWIFT_WARN_UNUSED_RESULT;
- (RKVideoControlManager * _Nonnull)getVideoContrllMgr SWIFT_WARN_UNUSED_RESULT;
- (void)initWithParams:(RKCooperationCoreParams * _Nonnull)params SWIFT_METHOD_FAMILY(none);
- (void)loginWithCompany:(NSString * _Nullable)company userName:(NSString * _Nullable)userName password:(NSString * _Nullable)password;
- (void)logout;
- (void)reLogin;
- (void)destroy;
- (void)addLoginWithListener:(id <RKLoginCallback> _Nonnull)listener;
- (void)removeLoginWithListener:(id <RKLoginCallback> _Nonnull)listener;
- (void)addIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
- (void)removeIncomingCallWithListener:(id <RKIncomingCallListener> _Nonnull)listener;
- (void)addCallWithListener:(id <RKCallListener> _Nonnull)listener;
- (void)removeCallWithListener:(id <RKCallListener> _Nonnull)listener;
- (void)addMessageWithListener:(id <RKMsgListener> _Nonnull)listener;
- (void)removeMessageWithListener:(id <RKMsgListener> _Nonnull)listener;
@end


SWIFT_CLASS("_TtC17RKCooperationCore23RKCooperationCoreConfig")
@interface RKCooperationCoreConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKCooperationCoreConfig * _Nonnull shared;)
+ (RKCooperationCoreConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 必要参数
@property (nonatomic, strong) RKCooperationCoreParams * _Nonnull coreParams;
/// 录制参数
@property (nonatomic, strong) RKRemoteRecordParams * _Nonnull recordParams;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17RKCooperationCore23RKCooperationCoreParams")
@interface RKCooperationCoreParams : NSObject
/// 商户服务器地址 （默认使用标准产品host）
@property (nonatomic, copy) NSString * _Nonnull apiHost;
/// 用户token
@property (nonatomic, copy) NSString * _Nonnull token;
/// appKey
@property (nonatomic, copy) NSString * _Nonnull appKey;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17RKCooperationCore8RKDevice")
@interface RKDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;

SWIFT_PROTOCOL("_TtP17RKCooperationCore17RKDeviceInterface_")
@protocol RKDeviceInterface <NSObject>
/// 开启摄像头
+ (void)startCamera;
/// 关闭摄像头
+ (void)stopCamera;
/// 切换摄像头
+ (void)switchCamera;
/// 设置摄像头采集属性
/// startVideo:pictureSize: startVideo 方法开启自身视频渲染前设置即可生效
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     width     采集宽度，默认640
///   </li>
///   <li>
///     height    采集高度，默认360
///   </li>
///   <li>
///     frameRate 采集帧速率，默认24
///   </li>
/// </ul>
+ (void)setCameraPropertyWithWidth:(int32_t)width height:(int32_t)height framerate:(int32_t)framerate;
/// 开始自身视频渲染
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     type @RKRenderType
///   </li>
///   <li>
///     view 需要渲染视频到的视图
///   </li>
/// </ul>
+ (void)startCameraVideoWithType:(enum RKRenderType)type view:(UIView * _Nonnull)view;
@end


@interface RKDevice (SWIFT_EXTENSION(RKCooperationCore)) <RKDeviceInterface>
/// 开启摄像头
+ (void)startCamera;
/// 关闭摄像头
+ (void)stopCamera;
/// 切换摄像头
+ (void)switchCamera;
/// 设置摄像头采集分辨率
+ (void)setCameraPropertyWithWidth:(int32_t)width height:(int32_t)height framerate:(int32_t)framerate;
+ (void)startCameraVideoWithType:(enum RKRenderType)type view:(UIView * _Nonnull)view;
+ (void)enableSpeaker:(BOOL)enable;
+ (BOOL)startVideoFile;
+ (BOOL)stopVideoFile;
@end



SWIFT_PROTOCOL("_TtP17RKCooperationCore16RKDeviceListener_")
@protocol RKDeviceListener <NSObject>
/// 摄像头发生变化
- (void)onCameraUpdate;
/// 音频输出变更
- (void)onAudioOutputTypeChangeWithAudioType:(enum RKAudioOutputType)audioType;
/// 自定义视频流触发关键帧获取
- (void)onNeedKeyFrame;
/// 音频输出状态发生改变
/// \param audioOutput 音频正在输出，false 音频已停止输出
///
- (void)onAudioOutputStateChangedWithAudioOutput:(BOOL)audioOutput;
/// 上传本地视频状态发生改变
/// \param uploadLocalVideo true 正在上传，false: 已停止上传
///
- (void)onUploadVideoStateChangedWithUploadLocalVideo:(BOOL)uploadLocalVideo;
/// 上传本地音频状态发生改变
/// \param uploadLocalAudio true 正在上传，false: 已停止上传
///
- (void)onUploadAudioStateChangedWithUploadLocalAudio:(BOOL)uploadLocalAudio;
@end

enum RKDoodleAction : NSInteger;
@class RKPoint;
@class UIColor;

SWIFT_CLASS("_TtC17RKCooperationCore8RKDoodle")
@interface RKDoodle : NSObject
@property (nonatomic, copy) NSString * _Nonnull doodleId;
@property (nonatomic) NSInteger doodleNo;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic) enum RKDoodleAction actionType;
@property (nonatomic, copy) NSString * _Nonnull brushColor;
@property (nonatomic) float brushWidth;
@property (nonatomic, copy) NSArray<RKPoint *> * _Nonnull points;
- (void)addWithPoint:(RKPoint * _Nonnull)point;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAction:(enum RKDoodleAction)action brushColor:(UIColor * _Nullable)brushColor brushWidth:(float)brushWidth OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKDoodleAction, open) {
  RKDoodleActionUnknown = -1,
  RKDoodleActionAdd = 0,
  RKDoodleActionRevoke = 1,
  RKDoodleActionClear = 2,
};

@class NSCoder;

SWIFT_CLASS("_TtC17RKCooperationCore10RKDrawPath")
@interface RKDrawPath : UIBezierPath
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC17RKCooperationCore10RKDrawView")
@interface RKDrawView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
/// 开始画线
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// 正在画线
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// 结束画线
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore18RKDrawViewDelegate_")
@protocol RKDrawViewDelegate <NSObject>
/// 添加点位标注
/// @param point 标注信息
- (void)touchPointAction:(RKDoodle * _Nonnull)pointAction;
/// 添加曲线标注
/// @param doodle 标注信息
- (void)addWireDoodleAction:(RKDoodle * _Nonnull)doodle;
@end

typedef SWIFT_ENUM(NSInteger, RKErrorCode, open) {
/// 正常
  RKErrorCodeOK = 0,
/// SDK未初始化
  RKErrorCodeSDK_NOT_INIT = 1,
/// 异常参数
  RKErrorCodeINVALID_PARAM = 2,
/// 网络异常
  RKErrorCodeNETWORK_ERROR = 3,
/// AppKey错误
  RKErrorCodeAPP_KEY_ERROR = 4,
/// 账号密码错误
  RKErrorCodeAUTH_ERROR = 5,
/// 用户不存在
  RKErrorCodeNO_SUCH_USER = 6,
/// 强制登出
  RKErrorCodeSERVER_LOGOUT = 7,
/// 用户在其他设备登录
  RKErrorCodeLOGIN_ON_OTHER_DEVICE = 8,
/// 发送消息失败了
  RKErrorCodeSEND_MESSAGE_FAILED = 9,
/// 服务器忙
  RKErrorCodeSERVER_BUSY = 10,
/// 无法连接服务器
  RKErrorCodeSERVER_CAN_NOT_REACH = 11,
/// 服务器拒绝
  RKErrorCodeSERVER_FORBIDDEN = 12,
/// 服务器不可用
  RKErrorCodeSERVER_UNAVAILABLE = 13,
/// 查询DNS异常
  RKErrorCodeQUERY_DNS_ERROR = 14,
/// 服务器内部错误
  RKErrorCodeSERVER_INTERNAL_ERROR = 15,
/// token与账号不匹配
  RKErrorCodeTOKEN_ACCOUNTID_MISMATCH = 16,
/// 超时
  RKErrorCodeTIMEOUT = 17,
/// 已加入该频道
  RKErrorCodeALREADY_JOINED_CAHNNEL = 18,
/// 被踢出频道
  RKErrorCodeKICKED_OUT = 19,
/// 掉线
  RKErrorCodeOFFLINE = 20,
/// 频道已经被关闭
  RKErrorCodeCHANNEL_OVER = 21,
/// 频道已经满员
  RKErrorCodeCHANNEL_FULL = 22,
/// 频道异常
  RKErrorCodeCHANNEL_INTERNAL_ERROR = 23,
/// token过期了
  RKErrorCodeTOKEN_EXPIRED = 24,
/// 存在已加入频道，需要先退出频道再加入新的频道
  RKErrorCodeJOIN_BEFORE_LEAVE = 101,
/// 加入频道失败，其他异常
  RKErrorCodeJOIN_UNKNOWN_ERROR = 102,
/// 请求加入频道但是未登录
  RKErrorCodeJOIN_NOT_LOGIN = 103,
/// 主动退出频道
  RKErrorCodeSELF_QUIT = 104,
/// 频道密码错误
  RKErrorCodeCHANNEL_PASSWORD_ERROR = 105,
/// 其他异常
  RKErrorCodeOTHER_ERROR = 199,
};


SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKIncomingCallListener_")
@protocol RKIncomingCallListener <NSObject>
@optional
/// 收到来电
/// \param channelId 频道ID 
///
/// \param fromUserId 来电用户ID 
///
/// \param createTime 创建时间 
///
/// \param channelTitle 频道标题 
///
- (void)onReceiveCallWithChannelId:(NSString * _Nonnull)channelId fromUserId:(NSString * _Nonnull)fromUserId createTime:(int64_t)createTime channelTitle:(NSString * _Nullable)channelTitle;
/// 来电取消
/// \param channelId 频道ID 
///
/// \param fromUserId 来电用户ID 
///
/// \param createTime 创建时间 
///
- (void)onCallCanceledWithChannelId:(NSString * _Nonnull)channelId fromUserId:(NSString * _Nonnull)fromUserId createTime:(int64_t)createTime;
@end

@class JCMediaDevice;
@class RKVideoParam;

SWIFT_CLASS("_TtC17RKCooperationCore16RKJCMideaManager")
@interface RKJCMideaManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKJCMideaManager * _Nonnull shared;)
+ (RKJCMideaManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JCMediaDevice * _Nullable mediaDevice;
- (void)initClientWithAppKey:(NSString * _Nonnull)appKey SWIFT_METHOD_FAMILY(none);
- (void)loginWithUserId:(NSString * _Nonnull)userId password:(NSString * _Nonnull)password;
- (void)logout;
- (void)reloginWithUserId:(NSString * _Nonnull)userId password:(NSString * _Nonnull)password;
/// 开启摄像头
- (void)startCamera;
/// 关闭摄像头
- (void)stopCamera;
/// 切换摄像头
- (void)switchCamera;
/// 设置摄像头采集分辨率
- (void)setCameraPropertyWithWidth:(int32_t)width height:(int32_t)height framerate:(int32_t)framerate;
/// 开始自身视频渲染
- (void)startCameraVideoWithType:(enum RKRenderType)type view:(UIView * _Nullable)view;
- (BOOL)startVideoFile SWIFT_WARN_UNUSED_RESULT;
- (BOOL)stopVideoFile SWIFT_WARN_UNUSED_RESULT;
/// 设置视频采集属性
/// \param videoParam @RKVideoParam
///
- (void)setVideoPropertyWithVideoParam:(RKVideoParam * _Nonnull)videoParam;
/// 开启视频渲染
- (RKVideoCanvas * _Nullable)startVideoWithParticipant:(RKChannelParticipant * _Nonnull)participant renderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize SWIFT_WARN_UNUSED_RESULT;
/// 结束自身渲染
- (void)stopVideoWithCanvasId:(NSString * _Nonnull)canvasId;
/// 暂停视频渲染
- (void)pauseWithCanvasId:(NSString * _Nonnull)canvasId;
/// 恢复视频渲染
- (void)resumeWithCanvasId:(NSString * _Nonnull)canvasId;
/// 旋转视频角度，TIPS：必须是90°的倍数，该角度表示与屏幕正方向旋转后的夹角
/// @param angle 要旋转的角度
- (void)rotateWithCanvasId:(NSString * _Nonnull)canvasId angle:(NSInteger)angle;
/// 对焦
- (void)focusWithCanvasId:(NSString * _Nonnull)canvasId xPercent:(float)xPercent yPercent:(float)yPercent;
/// 设置音频采集属性
/// \param videoParam @RKVideoParam
///
- (void)setAudioPropertyWithAudioParam:(RKAudioParam * _Nonnull)audioParam;
/// 开启音频
- (void)startAudio;
/// 停止音频
- (void)stopAudio;
/// 开启/关闭扬声器
/// \param enable 是否开启
///
- (void)enableSpeaker:(BOOL)enable;
/// 扬声器是否已打开
///
/// returns:
/// 是否打开
- (BOOL)isSpeakerOn SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore))
- (UIImage * _Nullable)snapshotWithVideoCanvasId:(NSString * _Nonnull)videoCanvasId width:(int32_t)width height:(int32_t)height filePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore))
- (void)sendOnlineMessageWithUserId:(NSString * _Nonnull)userId content:(NSString * _Nonnull)content;
- (void)sendChannelMessageWithUserId:(NSString * _Nullable)userId content:(NSString * _Nonnull)content;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore))
- (BOOL)startShareScreen SWIFT_WARN_UNUSED_RESULT;
- (RKVideoCanvas * _Nullable)getShareScreenVideoWithRenderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize SWIFT_WARN_UNUSED_RESULT;
- (void)stopShareScreen;
@end

@class JCMediaDeviceVideoCanvas;

@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore)) <JCMediaDeviceCallback>
- (void)onCameraUpdate;
- (void)onAudioOutputTypeChange:(NSString * _Null_unspecified)audioOutputType;
- (void)onRenderReceived:(JCMediaDeviceVideoCanvas * _Null_unspecified)canvas;
- (void)onRenderStart:(JCMediaDeviceVideoCanvas * _Null_unspecified)canvas;
- (void)onAudioInerruptAndResume:(BOOL)interrupt;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore)) <JCClientCallback>
- (void)onLogin:(BOOL)result reason:(JCClientReason)reason;
- (void)onLogout:(JCClientReason)reason;
- (void)onClientStateChange:(JCClientState)state oldState:(JCClientState)oldState;
- (void)onOnlineMessageSend:(int32_t)operationId result:(BOOL)result;
- (void)onOnlineMessageReceive:(NSString * _Null_unspecified)userId content:(NSString * _Null_unspecified)content;
@end

@class JCMediaChannelPropChangeParam;
@class JCMediaChannelQueryInfo;
@class JCMediaChannelParticipant;
@class JCMediaChannelParticipantChangeParam;

@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore)) <JCMediaChannelCallback>
- (void)onMediaChannelStateChange:(JCMediaChannelState)state oldState:(JCMediaChannelState)oldState;
- (void)onMediaChannelPropertyChange:(JCMediaChannelPropChangeParam * _Null_unspecified)changeParam;
- (void)onJoin:(BOOL)result reason:(JCMediaChannelReason)reason channelId:(NSString * _Null_unspecified)channelId;
- (void)onLeave:(JCMediaChannelReason)reason channelId:(NSString * _Null_unspecified)channelId;
- (void)onStop:(BOOL)result reason:(JCMediaChannelReason)reason;
- (void)onQuery:(int32_t)operationId result:(BOOL)result reason:(JCMediaChannelReason)reason queryInfo:(JCMediaChannelQueryInfo * _Null_unspecified)queryInfo;
- (void)onParticipantJoin:(JCMediaChannelParticipant * _Null_unspecified)participant;
- (void)onParticipantLeft:(JCMediaChannelParticipant * _Null_unspecified)participant;
- (void)onParticipantUpdate:(JCMediaChannelParticipant * _Null_unspecified)participant participantChangeParam:(JCMediaChannelParticipantChangeParam * _Null_unspecified)participantChangeParam;
/// 会议内消息回调
- (void)onMessageReceive:(NSString * _Null_unspecified)type content:(NSString * _Null_unspecified)content fromUserId:(NSString * _Null_unspecified)fromUserId;
- (void)onParticipantVolumeChange:(JCMediaChannelParticipant * _Null_unspecified)participant;
- (void)onInviteSipUserResult:(int32_t)operationId result:(BOOL)result reason:(int32_t)reason;
@end


@interface RKJCMideaManager (SWIFT_EXTENSION(RKCooperationCore))
/// 添加频道内消息监听
/// @param listener 见[RKChannelMsgListener]
- (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
/// 移除频道内监听
/// @param listener 见[RKChannelMsgListener]
- (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener;
/// 添加监听
/// @param listener 见[RKChannelListener]
- (void)addChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 移除监听
/// @param listener 见[RKChannelListener]
- (void)removeChannelWithListener:(id <RKChannelListener> _Nonnull)listener;
/// 添加本地设备监听
- (void)addDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
/// 移除本地设备监听
- (void)removeDeviceWithListener:(id <RKDeviceListener> _Nonnull)listener;
/// 添加远端设备监听
- (void)addRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
/// 移除远端设备监听
- (void)removeRemoteDeviceWithListener:(id <RKRemoteDeviceListener> _Nonnull)listener;
- (void)joinWithChannelId:(NSString * _Nonnull)channelId joinParam:(RKChannelParam * _Nonnull)joinParam;
- (void)leave;
- (void)kickOutUserWithUserId:(NSString * _Nonnull)userId;
- (void)dispose;
- (void)enableUploadLocalAudioStreamWithEnable:(BOOL)enable;
- (void)enableUploadLocalVideoStreamWithEnable:(BOOL)enable;
- (void)enableAudioOutputWithEnable:(BOOL)enable;
- (void)enableRecordWithEnable:(BOOL)enable;
- (BOOL)isCreatorWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (enum RKNetStatus)getNetStatusWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (void)requestScreenVideoWithUserId:(NSString * _Nonnull)userId videoSize:(enum RKVideoSize)videoSize;
- (void)setCustomPropertyWithProperty:(NSString * _Nonnull)property;
- (NSString * _Nullable)getCustomProperty SWIFT_WARN_UNUSED_RESULT;
- (enum RKChannelState)getChannelState SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getChannelPassword SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalAudioUpload SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalVideoUpload SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLocalAudioOutput SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isScreenShare SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getScreenShareUserId SWIFT_WARN_UNUSED_RESULT;
- (enum RKRecordState)getRecordState SWIFT_WARN_UNUSED_RESULT;
- (void)queryChannelWithChannelId:(NSString * _Nonnull)channelId result:(id <RKOperationListener> _Nonnull)result;
- (enum RKResolution)getMaxResolution SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore15RKLoginCallback_")
@protocol RKLoginCallback <NSObject>
- (void)onLoginWithReason:(enum RKErrorCode)reason;
- (void)onLogoutWithReason:(enum RKErrorCode)reason;
@end

@class RKShareInfo;
@class RKUserDevice;

SWIFT_CLASS("_TtC17RKCooperationCore13RKMeetingLife")
@interface RKMeetingLife : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull meetingId;
@property (nonatomic, copy) NSString * _Nonnull meetingTitle;
@property (nonatomic, copy) NSString * _Nonnull channelTitle;
@property (nonatomic) int64_t createTime;
@property (nonatomic) int64_t endTime;
@property (nonatomic, strong) RKShareInfo * _Nullable shareInfo;
@property (nonatomic, copy) NSString * _Nonnull meetingServerId;
@property (nonatomic, copy) NSString * _Nonnull serverId;
@property (nonatomic, copy) NSString * _Nonnull inviteId;
@property (nonatomic, copy) NSString * _Nonnull oneStreamUserId;
@property (nonatomic, copy) NSString * _Nonnull moderator;
@property (nonatomic, copy) NSString * _Nonnull resolution;
@property (nonatomic, copy) NSArray<RKUserDevice *> * _Nullable userDevices;
@property (nonatomic, strong) RKChannelParam * _Nullable channelParam;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 消息体
SWIFT_CLASS("_TtC17RKCooperationCore9RKMessage")
@interface RKMessage : NSObject
@property (nonatomic) double version;
@property (nonatomic, copy) NSString * _Nonnull msgId;
@property (nonatomic) int64_t timestamp;
@property (nonatomic, copy) NSString * _Nonnull fromLicense;
@property (nonatomic, copy) NSString * _Nonnull fromUserId;
@property (nonatomic, copy) NSString * _Nonnull msgBody;
/// <h3>以下msgType 对应 msgBody消息体规则：</h3>
/// | Doodle                 | 传递jcDoodle.stringFromDoodleAction转换的字符串
/// | DoodleResponse | 传递涂鸦发起方保存下来的每一笔涂鸦数据
/// | Slam                    | SlamBaseMessage ar标注的对象类型
/// | Call                      | MeetingLife 会议详细信息对象，用于同步各端的会议信息状态
/// | Share                   | ShareInfo 每次共享状态改变后发送最新状态通知各端
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17RKCooperationCore15RKMessageCenter")
@interface RKMessageCenter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore18RKMessageInterface_")
@protocol RKMessageInterface <NSObject>
/// 添加在线消息监听
/// \param listener @ RKMsgListener
///
/// \param msgType 监听类型，需要和其他端定义
///
+ (void)addMsgWithListener:(id <RKMsgListener> _Nonnull)listener msgType:(NSString * _Nullable)msgType;
/// 移除在线消息监听
/// \param listener @ RKMsgListener
///
/// \param msgType 监听类型，需要和其他端定义
///
+ (void)removeMsgWithListener:(id <RKMsgListener> _Nonnull)listener msgType:(NSString * _Nullable)msgType;
/// 添加频道消息监听
/// \param listener @ RKMsgListener
///
/// \param channelId 频道ID
///
/// \param msgType 监听类型，需要和其他端定义
///
+ (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener channelId:(NSString * _Nonnull)channelId msgType:(NSString * _Nullable)msgType;
/// 添加在线消息监听
/// \param listener @ RKMsgListener
///
/// \param channelId 频道ID
///
/// \param msgType 监听类型，需要和其他端定义
///
+ (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener channelId:(NSString * _Nonnull)channelId msgType:(NSString * _Nullable)msgType;
/// 发送在线消息
/// \param message 消息体
///
/// \param userIds userIds
///
/// \param isSendSelf 是否给自己模拟一条
///
/// \param isExtra 透传消息
///
+ (void)sendOnlineMessage:(NSString * _Nonnull)message to:(NSArray<NSString *> * _Nonnull)userIds isSendSelf:(BOOL)isSendSelf isExtra:(BOOL)isExtra;
/// 发送频道内消息
/// \param message 消息内容，不能为空，并且当 toUserId 不为 nil 时，content 不能大于 4k
///
/// \param userIds userIds
///
/// \param isSendSelf 是否给自己模拟一条
///
/// \param isExtra 透传消息
///
+ (void)sendChannelMessage:(NSString * _Nonnull)message to:(NSArray<NSString *> * _Nullable)userIds isSendSelf:(BOOL)isSendSelf isExtra:(BOOL)isExtra;
@end


@interface RKMessageCenter (SWIFT_EXTENSION(RKCooperationCore)) <RKMessageInterface>
+ (void)addMsgWithListener:(id <RKMsgListener> _Nonnull)listener msgType:(NSString * _Nullable)msgType;
+ (void)removeMsgWithListener:(id <RKMsgListener> _Nonnull)listener msgType:(NSString * _Nullable)msgType;
+ (void)addChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener channelId:(NSString * _Nonnull)channelId msgType:(NSString * _Nullable)msgType;
+ (void)removeChannelMsgWithListener:(id <RKChannelMsgListener> _Nonnull)listener channelId:(NSString * _Nonnull)channelId msgType:(NSString * _Nullable)msgType;
+ (void)sendOnlineMessage:(NSString * _Nonnull)message to:(NSArray<NSString *> * _Nonnull)userIds isSendSelf:(BOOL)isSendSelf isExtra:(BOOL)isExtra;
+ (void)sendChannelMessage:(NSString * _Nonnull)message to:(NSArray<NSString *> * _Nullable)userIds isSendSelf:(BOOL)isSendSelf isExtra:(BOOL)isExtra;
@end




typedef SWIFT_ENUM(NSInteger, RKNetStatus, open) {
/// 无网络
  RKNetStatusDISCONNECT = 0,
/// 网络非常差
  RKNetStatusVERY_BAD = 1,
/// 网络差
  RKNetStatusBAD = 2,
/// 网络一般
  RKNetStatusNORMAL = 3,
/// 网络好
  RKNetStatusGOOD = 4,
/// 网络非常好
  RKNetStatusVERY_GOOD = 5,
};


SWIFT_PROTOCOL("_TtP17RKCooperationCore19RKOperationListener_")
@protocol RKOperationListener
/// 查询频道状态回调
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 要加入的频道ID
///   </li>
///   <li>
///     result: 查询结果，true: 成功加入，false: 加入失败
///   </li>
///   <li>
///     reason: 失败原因，@ RKErrorCode
///   </li>
/// </ul>
- (void)onQuery:(NSString * _Nonnull)channelId result:(BOOL)result reason:(enum RKErrorCode)reason;
@end


SWIFT_CLASS("_TtC17RKCooperationCore7RKPoint")
@interface RKPoint : NSObject
@property (nonatomic) float x;
@property (nonatomic) float y;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKPointVideoAction, open) {
  RKPointVideoActionPoint = 0,
  RKPointVideoActionReq = 1,
  RKPointVideoActionRes = 2,
};

enum RKSlamMessageType : NSInteger;

SWIFT_CLASS("_TtC17RKCooperationCore19RKPointVideoMessage")
@interface RKPointVideoMessage : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nonnull messageId;
@property (nonatomic) NSInteger color;
@property (nonatomic, strong) RKPoint * _Nonnull pointF;
@property (nonatomic) float width;
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
@property (nonatomic) enum RKPointVideoAction actionType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessageType:(enum RKSlamMessageType)messageType OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKRecordProtocol, open) {
/// AWS协议存储服务器
  RKRecordProtocolAWS = 1,
/// 七牛云存储服务器
  RKRecordProtocolQI_NIU = 2,
/// 阿里云存储服务器
  RKRecordProtocolA_LI_YUN = 3,
};

typedef SWIFT_ENUM(NSInteger, RKRecordState, open) {
/// 未开始录制
  RKRecordStateSTATE_NONE = 0,
/// 准备开始录制，可以调用[IChannel.enabeRecord]开始录制
  RKRecordStateSTATE_READY = 1,
/// 录制中
  RKRecordStateSTATE_RUNNING = 2,
};


SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKRemoteDeviceListener_")
@protocol RKRemoteDeviceListener
@optional
/// 用户音频上传状态发生改变
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 发生改变的用户ID
///   </li>
///   <li>
///     enabled: true: 上传中，false: 停止上传
///   </li>
/// </ul>
- (void)onUserUploadAudioChangedWithUserId:(NSString * _Nonnull)userId enabled:(BOOL)enabled;
/// 用户视频上传状态发生改变
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 发生改变的用户ID
///   </li>
///   <li>
///     enabled: true: 上传中，false: 停止上传
///   </li>
/// </ul>
- (void)onUserUploadVideoChangedWithUserId:(NSString * _Nonnull)userId enabled:(BOOL)enabled;
/// 用户网络连接状态改变
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 用户ID
///   </li>
///   <li>
///     status: netStatus @ RKNetStatus
///   </li>
/// </ul>
- (void)onUserNetStatusChangedWithUserId:(NSString * _Nonnull)userId netStatus:(enum RKNetStatus)netStatus;
/// 用户上传视频大小发生改变
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 用户ID
///   </li>
///   <li>
///     videoSize: @ RKVideoSize
///   </li>
/// </ul>
- (void)onUserVideoSizeChangedWithUserId:(NSString * _Nonnull)userId videoSize:(enum RKVideoSize)videoSize;
/// 频道内成员音量变化
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: 用户ID
///   </li>
///   <li>
///     status: 当前音量状态，@RKVolumeStatus
///   </li>
/// </ul>
- (void)onUserVolumeChangeWithUserId:(NSString * _Nonnull)userId status:(enum RKVolumeStatus)status;
@end


SWIFT_CLASS("_TtC17RKCooperationCore20RKRemoteRecordParams")
@interface RKRemoteRecordParams : NSObject
@property (nonatomic, copy) NSString * _Nonnull secretKey;
@property (nonatomic, copy) NSString * _Nonnull accessKey;
@property (nonatomic, copy) NSString * _Nonnull bucketName;
@property (nonatomic, copy) NSString * _Nonnull fileName;
@property (nonatomic, copy) NSString * _Nonnull directory;
@property (nonatomic, copy) NSString * _Nullable uploadEndPoint;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKRenderType, open) {
/// 全屏渲染
  RKRenderTypeRENDER_FULL_SCREEN = 0,
/// 平铺整个窗口
  RKRenderTypeRENDER_FULL_CONTENT = 1,
/// 自适应
  RKRenderTypeRENDER_FULL_AUTO = 2,
};

typedef SWIFT_ENUM(NSInteger, RKResolution, open) {
/// 360P
  RKResolutionRESOLUTION_360 = 0,
/// 720P
  RKResolutionRESOLUTION_720 = 1,
/// 1080P
  RKResolutionRESOLUTION_1080 = 2,
};


SWIFT_CLASS("_TtC17RKCooperationCore18RKScreenShareParam")
@interface RKScreenShareParam : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKShareDoodleInterface_")
@protocol RKShareDoodleInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareDoodleManager * _Null_unspecified shared;)
+ (RKShareDoodleManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 清空
- (void)clear;
/// 开启白板标注
/// \param channelId 频道ID
///
- (void)startShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 开启截图标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)startShareDoodleWithChannelId:(NSString * _Nonnull)channelId doodleImageUrl:(NSString * _Nonnull)doodleImageUrl;
/// 加入Doodle标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)joinShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 加入截图标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)joinShareDoodleWithChannelId:(NSString * _Nonnull)channelId doodleImageUrl:(NSString * _Nonnull)doodleImageUrl;
/// 结束标注
/// \param channelId 频道ID
///
- (void)stopShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 新增一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)addWithChannelId:(NSString * _Nonnull)channelId doodle:(RKDoodle * _Nonnull)doodle;
/// 撤销一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)revokeWithChannelId:(NSString * _Nonnull)channelId doodle:(RKDoodle * _Nullable)doodle;
/// 清除标注
/// \param channelId 频道ID
///
- (void)clearWithChannelId:(NSString * _Nonnull)channelId;
@end


SWIFT_CLASS("_TtC17RKCooperationCore20RKShareDoodleManager")
@interface RKShareDoodleManager : NSObject
@property (nonatomic, strong) RKDrawView * _Nonnull drawView;
@property (nonatomic, copy) NSArray<RKDoodle *> * _Nonnull doodles;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RKVideoControlMessage;
@class RKSlamBaseMessage;
enum RKShareErrorCode : NSInteger;

SWIFT_PROTOCOL("_TtP17RKCooperationCore15RKShareListener_")
@protocol RKShareListener <NSObject>
@optional
/// 有人发起了屏幕共享
/// \param userId  对方userId 
///
- (void)onStartShareScreenWithUserId:(NSString * _Nonnull)userId;
/// 有人结束了屏幕共享
/// \param userId  对方userId 
///
- (void)onStopShareScreenWithUserId:(NSString * _Nonnull)userId;
/// 有人发起了白板标注
/// \param userId  对方userId 
///
- (void)onStartShareDoodleWithUserId:(NSString * _Nonnull)userId;
/// 有人结束了白板标注
/// \param userId  对方userId 
///
- (void)onStopShareDoodleWithUserId:(NSString * _Nonnull)userId;
/// 有人发起了截图标注
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId:  对方userId
///   </li>
///   <li>
///     imgUrl: 对方截图地址
///   </li>
/// </ul>
- (void)onStartShareImageDoodleWithUserId:(NSString * _Nonnull)userId imgUrl:(NSString * _Nonnull)imgUrl;
/// 有人结束了截图标注
/// \param userId  对方userId 
///
- (void)onStopShareImageDoodleWithUserId:(NSString * _Nonnull)userId;
/// 有人发起了AR标注
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId:  发起者userId
///   </li>
///   <li>
///     executorUserId:  执行者userId
///   </li>
/// </ul>
- (void)onStartShareSlamWithUserId:(NSString * _Nonnull)userId executorUserId:(NSString * _Nonnull)executorUserId;
/// 有人结束了AR标注
/// \param userId  对方userId 
///
- (void)onStopShareSlamWithUserId:(NSString * _Nonnull)userId;
/// 有人发起了视频点选
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId:  发起者userId
///   </li>
///   <li>
///     executorUserId:  执行者userId
///   </li>
/// </ul>
- (void)onStartSharePointVideoWithUserId:(NSString * _Nonnull)userId executorUserId:(NSString * _Nonnull)executorUserId;
/// 有人结束了结束视频点选
/// \param userId  对方userId 
///
- (void)onStopSharePointVideoWithUserId:(NSString * _Nonnull)userId;
/// 收到视频点选消息
/// \param message @ RKPointVideoMessage 
///
- (void)onPointVideoWithMessage:(RKPointVideoMessage * _Nonnull)message;
/// 收到视频控制消息
/// \param message @ RKVideoControlMessage 
///
- (void)onVideoControlWithMessage:(RKVideoControlMessage * _Nonnull)message;
/// 收到Doodle消息
/// \param message @ RKDoodle 
///
- (void)onDoodleWithMessage:(RKDoodle * _Nonnull)message;
/// 收到Slam标注消息
/// \param message @ RKSlamBaseMessage 
///
- (void)onSlamWithMessage:(RKSlamBaseMessage * _Nonnull)message;
/// 共享异常处理
/// \param code 错误码 @ RKShareErrorCode 
///
- (void)onShareErrorWithCode:(enum RKShareErrorCode)code;
@end


@interface RKShareDoodleManager (SWIFT_EXTENSION(RKCooperationCore)) <RKShareListener>
- (void)onDoodleWithMessage:(RKDoodle * _Nonnull)message;
@end


@interface RKShareDoodleManager (SWIFT_EXTENSION(RKCooperationCore)) <RKShareDoodleInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareDoodleManager * _Null_unspecified shared;)
+ (RKShareDoodleManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (void)clear;
/// 开启白板标注
/// \param channelId 频道ID
///
- (void)startShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 开启截图标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)startShareDoodleWithChannelId:(NSString * _Nonnull)channelId doodleImageUrl:(NSString * _Nonnull)doodleImageUrl;
/// 加入Doodle标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)joinShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 加入截图标注
/// \param channelId 频道ID
///
/// \param doodleImageUrl 标注图片地址
///
- (void)joinShareDoodleWithChannelId:(NSString * _Nonnull)channelId doodleImageUrl:(NSString * _Nonnull)doodleImageUrl;
/// 结束标注
/// \param channelId 频道ID
///
- (void)stopShareDoodleWithChannelId:(NSString * _Nonnull)channelId;
/// 新增一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)addWithChannelId:(NSString * _Nonnull)channelId doodle:(RKDoodle * _Nonnull)doodle;
/// 撤销一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)revokeWithChannelId:(NSString * _Nonnull)channelId doodle:(RKDoodle * _Nullable)doodle;
/// 清除标注
/// \param channelId 频道ID
///
- (void)clearWithChannelId:(NSString * _Nonnull)channelId;
@end

typedef SWIFT_ENUM(NSInteger, RKShareErrorCode, open) {
/// 已经存在共享了
  RKShareErrorCodeEXIST_SHARE = -1,
/// 其他异常
  RKShareErrorCodeOTHER_ERROR = 199,
};


SWIFT_CLASS("_TtC17RKCooperationCore11RKShareInfo")
@interface RKShareInfo : NSObject <NSCopying>
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull meetingId;
@property (nonatomic, copy) NSString * _Nonnull promoterUserId;
@property (nonatomic, copy) NSString * _Nonnull executorUserId;
@property (nonatomic, copy) NSString * _Nonnull sponsorLicense;
@property (nonatomic, copy) NSString * _Nonnull license;
@property (nonatomic, copy) NSString * _Nonnull shareImageUrl;
@property (nonatomic) enum RKShareType shareType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP17RKCooperationCore21RKSharePointInterface_")
@protocol RKSharePointInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKSharePointManager * _Null_unspecified shared;)
+ (RKSharePointManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 结束自己发起的视频点选
/// \param channelId 频道ID
///
- (void)stopSharePointVideoWithChannelId:(NSString * _Nonnull)channelId;
/// 邀请别人发起视频点选
/// \param channelId 频道ID
///
/// \param userId 对方userID
///
- (void)inviteSharePointVideoWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 发送视频点选消息
- (void)sendPointWithChannelId:(NSString * _Nonnull)channelId slamColor:(NSInteger)slamColor markPoint:(RKPoint * _Nonnull)markPoint pointWidth:(float)pointWidth;
@end


SWIFT_CLASS("_TtC17RKCooperationCore19RKSharePointManager")
@interface RKSharePointManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKSharePointManager (SWIFT_EXTENSION(RKCooperationCore)) <RKSharePointInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKSharePointManager * _Null_unspecified shared;)
+ (RKSharePointManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 结束自己发起的视频点选
/// \param channelId 频道ID
///
- (void)stopSharePointVideoWithChannelId:(NSString * _Nonnull)channelId;
/// 邀请别人发起视频点选
/// \param channelId 频道ID
///
/// \param userId 对方userID
///
- (void)inviteSharePointVideoWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 发送视频点选消息
- (void)sendPointWithChannelId:(NSString * _Nonnull)channelId slamColor:(NSInteger)slamColor markPoint:(RKPoint * _Nonnull)markPoint pointWidth:(float)pointWidth;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore22RKShareScreenInterface_")
@protocol RKShareScreenInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareScreenManager * _Null_unspecified shared;)
+ (RKShareScreenManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 开启屏幕共享
/// \param channelId 频道ID
///
- (void)startShareScreenWithChannelId:(NSString * _Nonnull)channelId;
/// 获取屏幕共享视图
- (RKVideoCanvas * _Nullable)getShareScreenVideoWithRenderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize SWIFT_WARN_UNUSED_RESULT;
/// 结束屏幕共享
/// \param channelId 频道ID
///
- (void)stopShareScreenWithChannelId:(NSString * _Nonnull)channelId;
@end


SWIFT_CLASS("_TtC17RKCooperationCore20RKShareScreenManager")
@interface RKShareScreenManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKShareScreenManager (SWIFT_EXTENSION(RKCooperationCore)) <RKShareScreenInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareScreenManager * _Null_unspecified shared;)
+ (RKShareScreenManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 开启屏幕共享
/// \param channelId 频道ID
///
- (void)startShareScreenWithChannelId:(NSString * _Nonnull)channelId;
- (RKVideoCanvas * _Nullable)getShareScreenVideoWithRenderType:(enum RKRenderType)renderType videoSize:(enum RKVideoSize)videoSize SWIFT_WARN_UNUSED_RESULT;
/// 结束屏幕共享
/// \param channelId 频道ID
///
- (void)stopShareScreenWithChannelId:(NSString * _Nonnull)channelId;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore20RKShareSlamInterface_")
@protocol RKShareSlamInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareSlamManager * _Null_unspecified shared;)
+ (RKShareSlamManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 发起AR标注
/// \param channelId 频道ID
///
/// \param userId 对方userID
///
- (void)inviteShareSlamWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 结束AR标注
/// \param - channelId 频道ID
///
- (void)stopInviteShareSlamWithChannelId:(NSString * _Nonnull)channelId;
/// 发送slam消息
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     doodle: doodle
///   </li>
/// </ul>
- (void)sendWithChannelId:(NSString * _Nonnull)channelId slamMessage:(RKSlamBaseMessage * _Nonnull)slamMessage;
/// 撤销一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)revokeWithChannelId:(NSString * _Nonnull)channelId;
/// 清除标注
/// \param channelId 频道ID
///
- (void)clearWithChannelId:(NSString * _Nonnull)channelId;
@end


SWIFT_CLASS("_TtC17RKCooperationCore18RKShareSlamManager")
@interface RKShareSlamManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKShareSlamManager (SWIFT_EXTENSION(RKCooperationCore)) <RKShareSlamInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKShareSlamManager * _Null_unspecified shared;)
+ (RKShareSlamManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// 发起AR标注
/// \param channelId 频道ID
///
/// \param userId 对方userID
///
- (void)inviteShareSlamWithChannelId:(NSString * _Nonnull)channelId userId:(NSString * _Nonnull)userId;
/// 结束AR标注
/// \param - channelId 频道ID
///
- (void)stopInviteShareSlamWithChannelId:(NSString * _Nonnull)channelId;
/// 发送slam消息
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     channelId: 频道ID
///   </li>
///   <li>
///     doodle: doodle
///   </li>
/// </ul>
- (void)sendWithChannelId:(NSString * _Nonnull)channelId slamMessage:(RKSlamBaseMessage * _Nonnull)slamMessage;
/// 撤销一笔
/// \param channelId 频道ID
///
/// \param doodle doodle
///
- (void)revokeWithChannelId:(NSString * _Nonnull)channelId;
/// 清除标注
/// \param channelId 频道ID
///
- (void)clearWithChannelId:(NSString * _Nonnull)channelId;
@end

typedef SWIFT_ENUM(NSInteger, RKShareType, open) {
  RKShareTypeNone = -1,
  RKShareTypeClose = 0,
  RKShareTypeScreen = 1,
  RKShareTypeDoodle = 2,
  RKShareTypeSlam = 3,
  RKShareTypePointVideo = 4,
  RKShareTypeVideoControl = 5,
  RKShareTypeImageDoodle = 99,
};

enum RKSlamMessageCode : NSInteger;

SWIFT_CLASS("_TtC17RKCooperationCore17RKSlamBaseMessage")
@interface RKSlamBaseMessage : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nonnull messageId;
@property (nonatomic) NSInteger color;
@property (nonatomic, strong) RKPoint * _Nonnull pointF;
@property (nonatomic) enum RKSlamMessageType messageType;
@property (nonatomic, copy) NSString * _Nonnull doodleContent;
@property (nonatomic) NSInteger index;
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
@property (nonatomic) CGFloat scale;
@property (nonatomic) enum RKSlamMessageCode code;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessageType:(enum RKSlamMessageType)messageType OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKSlamMessageCode, open) {
  RKSlamMessageCodeOK = 0,
  RKSlamMessageCodeExceedTheMaximumNumberLimit = 1,
  RKSlamMessageCodeSceneLost = 2,
  RKSlamMessageCodeWithdrawalNothing = 3,
  RKSlamMessageCodeMarkNoFeatures = 4,
  RKSlamMessageCodeMarkNotSupport = 5,
  RKSlamMessageCodeOtherError = 6,
};

typedef SWIFT_ENUM(NSInteger, RKSlamMessageType, open) {
  RKSlamMessageTypeMarkDoodleUnknown = -1,
  RKSlamMessageTypeMarkDoodleRequest = 0,
  RKSlamMessageTypeMarkDoodleResponse = 1,
  RKSlamMessageTypeMarkArrowRequest = 2,
  RKSlamMessageTypeMarkArrowResponse = 3,
  RKSlamMessageTypeMarkWithdrawalRequest = 4,
  RKSlamMessageTypeMarkWithdrawalResponse = 5,
  RKSlamMessageTypeMarkClearRequest = 6,
  RKSlamMessageTypeMarkClearResponse = 7,
  RKSlamMessageTypeMarkStopRequest = 8,
  RKSlamMessageTypeMarkStopResponse = 9,
  RKSlamMessageTypeMarkStartRequest = 10,
  RKSlamMessageTypeMarkStartResponse = 11,
  RKSlamMessageTypeMarkStatusUpdate = 12,
  RKSlamMessageTypeMarkStateRequest = 13,
  RKSlamMessageTypeMarkSlamExit = 14,
  RKSlamMessageTypeMarkCircleRequest = 15,
  RKSlamMessageTypeMarkCircleResponse = 16,
  RKSlamMessageTypeMarkLocalImageRequest = 17,
  RKSlamMessageTypeMarkLocalImageResponse = 18,
  RKSlamMessageTypeMarkCloudImageRequest = 19,
  RKSlamMessageTypeMarkCloudImageResponse = 20,
};


SWIFT_CLASS("_TtC17RKCooperationCore12RKUserDevice")
@interface RKUserDevice : NSObject
@property (nonatomic) float appVersion;
@property (nonatomic) BOOL supportSlam;
@property (nonatomic, strong) RKCompanyUser * _Nullable userInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17RKCooperationCore13RKVideoCanvas")
@interface RKVideoCanvas : NSObject
/// 视频视图
@property (nonatomic, strong) UIView * _Nullable videoView;
/// 暂停视频渲染
- (void)pause;
/// 恢复视频渲染
- (void)resume;
/// 旋转视频角度，TIPS：必须是90°的倍数，该角度表示与屏幕正方向旋转后的夹角
/// / @param angle 要旋转的角度
- (void)rotateWithAngle:(NSInteger)angle;
/// 视频通话截图
/// @param width 要保存的图片宽
/// @param height 要保存的图片高
/// @param filePath 要保存的图片路径
/// @param result 视频通话截图结果回调，见[RKOperationListener]
- (UIImage * _Nullable)snapshotWithWidth:(int32_t)width height:(int32_t)height filePath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
/// 对焦
/// @param xPercent 焦点所在渲染视图 x 轴的比例,取值需要归一化 0-1
/// @param yPercent 焦点所在渲染视图 y 轴的比例,取值需要归一化 0-1
- (void)focusWithXPercent:(float)xPercent yPercent:(float)yPercent;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17RKCooperationCore23RKVideoControlInterface_")
@protocol RKVideoControlInterface <NSObject>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKVideoControlManager * _Null_unspecified shared;)
+ (RKVideoControlManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)msgJson:(RKMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// 请求控制
- (void)startVideoControll:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
/// 控制建立回调
- (void)establish:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock isSendSelf:(BOOL)isSendSelf;
/// 断开连接
- (void)stopVideoControll:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
/// 发送控制消息
- (void)sendMessage:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
@end


SWIFT_CLASS("_TtC17RKCooperationCore21RKVideoControlManager")
@interface RKVideoControlManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface RKVideoControlManager (SWIFT_EXTENSION(RKCooperationCore)) <RKVideoControlInterface>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RKVideoControlManager * _Null_unspecified shared;)
+ (RKVideoControlManager * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)msgJson:(RKMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// 请求控制
- (void)startVideoControll:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
/// 控制建立回调
- (void)establish:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock isSendSelf:(BOOL)isSendSelf;
/// 断开连接
- (void)stopVideoControll:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
/// 发送控制消息
- (void)sendMessage:(SWIFT_NOESCAPE void (^ _Nonnull)(RKVideoControlMessage * _Nonnull))messageBlock;
@end


SWIFT_CLASS("_TtC17RKCooperationCore21RKVideoControlMessage")
@interface RKVideoControlMessage : NSObject
@property (nonatomic, copy) NSString * _Nonnull messageId;
@property (nonatomic, strong) RKPoint * _Nonnull pointF;
@property (nonatomic) CGFloat scale;
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, copy) NSString * _Nullable sponsorLicense;
@property (nonatomic, copy) NSString * _Nullable license;
@property (nonatomic, copy) NSString * _Nullable promoterUserId;
@property (nonatomic, copy) NSString * _Nullable executorUserId;
@property (nonatomic) BOOL isLightSupport;
@property (nonatomic) BOOL isScaleSupport;
@property (nonatomic) BOOL isFocusSupport;
@property (nonatomic) double minScale;
@property (nonatomic) double maxScale;
@property (nonatomic) double scaleGap;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessageType:(enum RKSlamMessageType)messageType OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKVideoFormat, open) {
  RKVideoFormatI420 = 1,
  RKVideoFormatIYUV = 2,
  RKVideoFormatRGB24 = 3,
  RKVideoFormatABGR = 4,
  RKVideoFormatARGB = 5,
  RKVideoFormatARGB444 = 6,
  RKVideoFormatRGB565 = 7,
  RKVideoFormatARGB1555 = 8,
  RKVideoFormatYUY2 = 9,
  RKVideoFormatYV12 = 10,
  RKVideoFormatUYVY = 11,
  RKVideoFormatMJPG = 12,
  RKVideoFormatNV21 = 13,
  RKVideoFormatNV12 = 14,
  RKVideoFormatBGRA = 15,
  RKVideoFormatH264 = 16,
  RKVideoFormatH264_SVC = 17,
};


SWIFT_CLASS("_TtC17RKCooperationCore12RKVideoParam")
@interface RKVideoParam : NSObject
/// 采集宽度，默认640
@property (nonatomic) NSInteger width;
/// 采集高度，默认360
@property (nonatomic) NSInteger height;
/// 采集帧率，默认24
@property (nonatomic) NSInteger framerate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RKVideoSize, open) {
/// 不渲染
  RKVideoSizeSIZE_NONE = 0,
/// 最小尺寸
  RKVideoSizeSIZE_MIN = 1,
/// 小尺寸
  RKVideoSizeSIZE_SMALL = 2,
/// 大尺寸
  RKVideoSizeSIZE_LARGE = 3,
/// 最大尺寸
  RKVideoSizeSIZE_MAX = 4,
};

typedef SWIFT_ENUM(NSInteger, RKVolumeStatus, open) {
/// 未上传音频
  RKVolumeStatusNONE = 0,
/// 音量0
  RKVolumeStatusZERO = 1,
/// 音量低
  RKVolumeStatusLOW = 2,
/// 音量中
  RKVolumeStatusMID = 3,
/// 音量高
  RKVolumeStatusHIGH = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RKCooperationCore
import Alamofire
import CommonCrypto
import CoreMedia
import Darwin
import Foundation
import Moya
import RKIHandyJSON
import RKILogger
import RKIUtils
import RKRTC
import ReplayKit
import Swift
import UIKit
import _Concurrency
extension RKCooperationCore.RKShareDoodleManager : RKCooperationCore.RKShareDoodleInterface {
  @objc public static var shared: RKCooperationCore.RKShareDoodleManager! {
    @objc get
  }
  @objc dynamic public func clear()
  @objc dynamic public func startShareDoodle(channelId: Swift.String)
  @objc dynamic public func startShareDoodle(channelId: Swift.String, doodleImageUrl: Swift.String)
  @objc dynamic public func joinShareDoodle(channelId: Swift.String)
  @objc dynamic public func joinShareDoodle(channelId: Swift.String, doodleImageUrl: Swift.String)
  @objc dynamic public func stopShareDoodle(channelId: Swift.String)
  @objc dynamic public func add(channelId: Swift.String, doodle: RKCooperationCore.RKDoodle)
  @objc dynamic public func revoke(channelId: Swift.String, doodle: RKCooperationCore.RKDoodle?)
  @objc dynamic public func clear(channelId: Swift.String)
}
extension RKCooperationCore.RKShareDoodleManager : RKCooperationCore.RKShareListener {
  @objc dynamic public func onDoodle(message: RKCooperationCore.RKDoodle)
}
extension RKCooperationCore.RKShareDoodleManager : RKCooperationCore.RKDrawViewDelegate {
  @objc dynamic public func touchPointAction(_ pointAction: RKCooperationCore.RKDoodle)
  @objc dynamic public func addWireDoodleAction(_ doodle: RKCooperationCore.RKDoodle)
}
@objc public protocol RKDrawViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func touchPointAction(_ pointAction: RKCooperationCore.RKDoodle)
  @objc func addWireDoodleAction(_ doodle: RKCooperationCore.RKDoodle)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RKDrawView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var lineWidth: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var lineColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var paths: [RKCooperationCore.RKDrawPath] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func addDrawViewDelegate(_ delegate: RKCooperationCore.RKDrawViewDelegate)
  @_Concurrency.MainActor(unsafe) public func removeDrawViewDelegate(_ delegate: RKCooperationCore.RKDrawViewDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func getTouches(touches: Swift.Set<UIKit.UITouch>) -> CoreGraphics.CGPoint
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func add(_ doodles: [RKCooperationCore.RKDoodle])
  @_Concurrency.MainActor(unsafe) public func clean()
  @_Concurrency.MainActor(unsafe) public func undo(_ doodle: RKCooperationCore.RKDoodle)
  @_Concurrency.MainActor(unsafe) public func save()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RKDrawPath : UIKit.UIBezierPath {
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol RKDeviceListener : ObjectiveC.NSObjectProtocol {
  @objc func onCameraUpdate()
  @objc func onAudioOutputTypeChange(audioType: RKCooperationCore.RKAudioOutputType)
  @objc func onAudioOutputStateChanged(audioOutput: Swift.Bool)
  @objc func onUploadVideoStateChanged(uploadLocalVideo: Swift.Bool)
  @objc func onUploadAudioStateChanged(uploadLocalAudio: Swift.Bool)
  @objc optional func onAudioStatus(audioLevel: Swift.Double, totalAudioEnergy: Swift.Double, totalSamplesDuration: Swift.Double)
  @objc optional func onVideoRecordStatus(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32)
  @objc optional func onVideoPublishStatus(rid: Swift.String?, width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, bitrate: Swift.Int32, qualityLimitationReason: Swift.String?)
}
@objc public protocol RKChannelManagerInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKChannelManager! { get }
  @objc func create(channelId: Swift.String?, channelTitle: Swift.String?, channelParam: RKCooperationCore.RKChannelParam?, userIdList: [Swift.String]?, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc func getChannel(channelId: Swift.String) -> RKCooperationCore.RKChannel?
  @objc func join(channelId: Swift.String, channelPassword: Swift.String?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func leave(channelId: Swift.String)
  @objc func addChannel(listener: RKCooperationCore.RKChannelListener)
  @objc func removeChannel(listener: RKCooperationCore.RKChannelListener)
  @objc func addChannelShare(listener: RKCooperationCore.RKShareListener)
  @objc func removeChannelShare(listener: RKCooperationCore.RKShareListener)
  @objc func startServerRecording(channelId: Swift.String, bucket: Swift.String, fileName: Swift.String, resolution: RKCooperationCore.RKResolution, subStream: RKCooperationCore.RKIStreamType, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func stopServerRecording(channelId: Swift.String, save: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension RKCooperationCore.RKMessageCenter : RKCooperationCore.RKMessageInterface {
  @objc public static func addChannelMsg(listener: RKCooperationCore.RKChannelMsgListener, channelId: Swift.String)
  @objc public static func removeChannelMsg(listener: RKCooperationCore.RKChannelMsgListener, channelId: Swift.String)
  @objc public static func sendChannelMessage(_ message: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelParam : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var maxMembers: Swift.Int
  @objc public var maxResolution: RKCooperationCore.RKResolution
  @objc public var password: Swift.String?
  @objc public var frameRate: Swift.Int32
  @objc public var extraParam: Swift.String?
  @objc public var isVideo: Swift.Bool
  @objc public var isAudio: Swift.Bool
  @objc public var bitrate: Swift.Int32
  @objc public var maxDelay: Swift.Int32
  @objc required override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKUser : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON, RKCooperationCore.RKUserInterface {
  @objc public var userId: Swift.String
  @objc public var companyId: Swift.String?
  @objc public var userName: Swift.String?
  @objc public var realName: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var avatar: Swift.String?
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  @objc required override dynamic public init()
  @objc deinit
}
@objc public protocol RKShareScreenInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKShareScreenManager! { get }
  @objc func startShareScreen(channelId: Swift.String)
  @objc func stopShareScreen(channelId: Swift.String)
  @objc func getShareScreenVideo(channelId: Swift.String, renderType: RKCooperationCore.RKRenderType, videoSize: RKCooperationCore.RKVideoSize, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKShareScreenManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RKVideoControlInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKVideoControlManager! { get }
  @objc func msgJson(_ message: RKCooperationCore.RKMessage) -> Swift.String
  @objc func startVideoControll(_ messageBlock: ((_ message: RKCooperationCore.RKVideoControlMessage) -> Swift.Void))
  @objc func establish(_ messageBlock: ((_ message: RKCooperationCore.RKVideoControlMessage) -> Swift.Void), isSendSelf: Swift.Bool)
  @objc func stopVideoControll(_ messageBlock: (_ message: RKCooperationCore.RKVideoControlMessage) -> Swift.Void)
  @objc func sendMessage(_ messageBlock: (_ message: RKCooperationCore.RKVideoControlMessage) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKVideoControlManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RKUserInterface : ObjectiveC.NSObjectProtocol {
  @objc var userId: Swift.String { get set }
  @objc var companyId: Swift.String? { get set }
  @objc var userName: Swift.String? { get set }
  @objc var realName: Swift.String? { get set }
  @objc var phone: Swift.String? { get set }
  @objc var avatar: Swift.String? { get set }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKPoint : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var x: Swift.Float
  @objc public var y: Swift.Float
  @objc required override dynamic public init()
  public func mapping(mapper: RKIHandyJSON.HelpingMapper)
  @objc deinit
}
@objc public protocol RKPointInterface : ObjectiveC.NSObjectProtocol {
  @objc var channelId: Swift.String { get set }
  @objc var userId: Swift.String { get set }
  @objc var messageId: Swift.String { get set }
  @objc var color: Swift.Int { get set }
  @objc var pointF: RKCooperationCore.RKPoint { get set }
  @objc var width: Swift.Float { get set }
  @objc var code: Swift.Int { get set }
  @objc var errorMessage: Swift.String { get set }
  @objc var actionType: RKCooperationCore.RKPointVideoAction { get set }
}
extension RKCooperationCore.RKShareSlamManager : RKCooperationCore.RKShareSlamInterface {
  @objc public static var shared: RKCooperationCore.RKShareSlamManager! {
    @objc get
  }
  @objc dynamic public func inviteShareSlam(channelId: Swift.String, userId: Swift.String)
  @objc dynamic public func stopInviteShareSlam(channelId: Swift.String)
  @objc dynamic public func send(channelId: Swift.String, slamMessage: RKCooperationCore.RKSlamBaseMessage)
  @objc dynamic public func revoke(channelId: Swift.String)
  @objc dynamic public func clear(channelId: Swift.String)
}
@_hasMissingDesignatedInitializers public class RKUserManager {
  public static let shared: RKCooperationCore.RKUserManager
  public var authorization: Swift.String
  public var refreshToken: Swift.String
  public var userId: Swift.String
  public var expiresTime: Swift.Double
  public var userInfo: RKCooperationCore.RKUser? {
    get
    set
  }
  public static func isLogined() -> Swift.Bool
  public func userLogin(companyId: Swift.String, username: Swift.String, password: Swift.String, onSuccess: @escaping RKCooperationCore.RKOnSuccess, onFailed: @escaping RKCooperationCore.RKOnFailed)
  public func refreshToken(_ refreshToken: Swift.String, onSuccess: @escaping RKCooperationCore.RKOnSuccess, onFailed: @escaping RKCooperationCore.RKOnFailed)
  public func getUserInfo(onSuccess: @escaping RKCooperationCore.RKOnSuccess, onFailed: @escaping RKCooperationCore.RKOnFailed)
  @objc deinit
}
@objc public protocol RKChannelInterface : ObjectiveC.NSObjectProtocol {
  @objc var channelId: Swift.String { get }
  @objc var channelName: Swift.String { get }
  @objc var participants: [RKCooperationCore.RKChannelParticipant] { get }
  @objc var shareInfo: RKCooperationCore.RKShareInfo? { get }
  @objc var channelParam: RKCooperationCore.RKChannelParam { get }
  @objc var participantSelf: RKCooperationCore.RKChannelParticipant? { get }
  @objc func addChannelMsg(listener: RKCooperationCore.RKChannelMsgListener)
  @objc func removeChannelMsg(listener: RKCooperationCore.RKChannelMsgListener)
  @objc func addChannel(listener: RKCooperationCore.RKChannelListener)
  @objc func removeChannel(listener: RKCooperationCore.RKChannelListener)
  @objc func addDevice(listener: RKCooperationCore.RKDeviceListener)
  @objc func removeDevice(listener: RKCooperationCore.RKDeviceListener)
  @objc func addRemoteDevice(listener: RKCooperationCore.RKRemoteDeviceListener)
  @objc func removeRemoteDevice(listener: RKCooperationCore.RKRemoteDeviceListener)
  @objc func addShare(listener: RKCooperationCore.RKShareListener)
  @objc func removeShare(listener: RKCooperationCore.RKShareListener)
  @objc func join(param: RKCooperationCore.RKChannelParam?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func leave()
  @objc func kickOutUser(userId: Swift.String)
  @objc func dispose()
  @objc func enableUploadLocalAudioStream(enable: Swift.Bool)
  @objc func enableUploadLocalVideoStream(enable: Swift.Bool)
  @objc func enableAudioOutput(enable: Swift.Bool)
  @objc func getVideoSize(userId: Swift.String) -> RKCooperationCore.RKVideoSize
  @objc func isCreator(userId: Swift.String) -> Swift.Bool
  @objc func getNetStatus(userId: Swift.String) -> RKCooperationCore.RKNetStatus
  @objc func isAudioUpload(userId: Swift.String) -> Swift.Bool
  @objc func isVideoUpload(userId: Swift.String) -> Swift.Bool
  @objc func getVolumeStatus(userId: Swift.String) -> RKCooperationCore.RKVolumeStatus
  @objc func getDisplayName(userId: Swift.String) -> Swift.String?
  @objc func setCustom(property: Swift.String)
  @objc func getCustomProperty() -> Swift.String?
  @objc func sendChannelMessage(msg: Swift.String)
  @objc func getChannelState() -> RKCooperationCore.RKChannelState
  @objc func getChannelPassword() -> Swift.String?
  @objc func isLocalAudioUpload() -> Swift.Bool
  @objc func isLocalVideoUpload() -> Swift.Bool
  @objc func isLocalAudioOutput() -> Swift.Bool
  @objc func isScreenShare() -> Swift.Bool
  @objc func getScreenShareUserId() -> Swift.String?
  @objc func switchStream(userId: Swift.String, isHighStram: Swift.Bool)
  @objc func muteAll()
  @objc func getMaxResolution() -> RKCooperationCore.RKResolution
  @objc func startShareScreen()
  @objc func stopShareScreen()
  @objc func startShareDoodle()
  @objc func stopShareDoodle()
  @objc func startShareImageDoodle(imageUrl: Swift.String)
  @objc func stopShareImageDoodle()
  @objc func inviteShareSlam(userId: Swift.String)
  @objc func stopInviteShareSlam()
  @objc func configVideoQuality(maxPublishBitrate: Swift.Int32, maxDelay: Swift.Int32)
}
@objc public protocol RKSharePointInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKSharePointManager! { get }
  @objc func establishRequest(channelId: Swift.String, userId: Swift.String)
  @objc func establishRespond(channelId: Swift.String, userId: Swift.String)
  @objc func stopSharePointVideo(channelId: Swift.String)
  @objc func inviteSharePointVideo(channelId: Swift.String, userId: Swift.String)
  @objc func stopInviteSharePointVideo(channelId: Swift.String)
  @objc func sendPoint(channelId: Swift.String, slamColor: Swift.Int, markPoint: RKCooperationCore.RKPoint, pointWidth: Swift.Float)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKSharePointManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RKShareManager : ObjectiveC.NSObject {
  public static let shared: RKCooperationCore.RKShareManager
  public func clearShare(channelId: Swift.String)
  public func reportMeetingInfo(channelId: Swift.String)
  public func getReportMeetingInfo(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RKCallListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onCallAccept(channelId: Swift.String, userId: Swift.String)
  @objc optional func onCallBusy(channelId: Swift.String, userId: Swift.String)
  @objc optional func onCallRejected(channelId: Swift.String, userId: Swift.String)
  @available(*, deprecated, message: "2.0.0 弃用")
  @objc optional func onInviteResult(channelId: Swift.String, userId: Swift.String, result: Swift.Bool, reason: RKCooperationCore.RKCooperationCode)
  @available(*, deprecated, message: "2.0.0 弃用")
  @objc optional func onError(channelId: Swift.String, reason: RKCooperationCore.RKCooperationCode)
}
extension RKCooperationCore.RKChannelManager : RKCooperationCore.RKChannelManagerInterface {
  @objc public static var shared: RKCooperationCore.RKChannelManager! {
    @objc get
  }
  @objc dynamic public func destroy()
  @objc dynamic public var channelList: [RKCooperationCore.RKChannel] {
    @objc get
    @objc set
  }
  @objc dynamic public func getChannel(channelId: Swift.String) -> RKCooperationCore.RKChannel?
  @objc dynamic public func addChannel(listener: RKCooperationCore.RKChannelListener)
  @objc dynamic public func removeChannel(listener: RKCooperationCore.RKChannelListener)
  @objc dynamic public func addChannelShare(listener: RKCooperationCore.RKShareListener)
  @objc dynamic public func removeChannelShare(listener: RKCooperationCore.RKShareListener)
  @objc dynamic public func create(channelId: Swift.String?, channelTitle: Swift.String?, channelParam: RKCooperationCore.RKChannelParam?, userIdList: [Swift.String]?, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc @discardableResult
  dynamic public func createLocalChannel(_ channelId: Swift.String, channelTitle: Swift.String?, channelParam: RKCooperationCore.RKChannelParam?) -> RKCooperationCore.RKChannel
  @objc dynamic public func join(channelId: Swift.String, channelPassword: Swift.String?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func leave(channelId: Swift.String)
  @objc dynamic public func startServerRecording(channelId: Swift.String, bucket: Swift.String, fileName: Swift.String, resolution: RKCooperationCore.RKResolution, subStream: RKCooperationCore.RKIStreamType, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func stopServerRecording(channelId: Swift.String, save: Swift.Bool)
  @objc dynamic public func getServerRecordingFiles(channelId: Swift.String)
  @objc dynamic public func deleteServerRecordingFiles(channelId: Swift.String)
}
extension RKCooperationCore.RKChannelManager {
  @objc dynamic public func onlineMessageReceived(msg: RKCooperationCore.RKMessage)
}
extension RKCooperationCore.RKChannelManager : RKCooperationCore.RKChannelMsgListener {
  @objc dynamic public func onChannelMsgReceive(fromUserId: Swift.String, content: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKMeetingLife : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var channelId: Swift.String
  @objc public var channelTitle: Swift.String
  @objc public var meetingId: Swift.String
  @objc public var meetingTitle: Swift.String
  @objc public var createTime: Swift.Int64
  @objc public var endTime: Swift.Int64
  @objc public var shareInfo: RKCooperationCore.RKShareInfo?
  @objc public var meetingServerId: Swift.String
  @objc public var serverId: Swift.String
  @objc public var inviteId: Swift.String
  @objc public var oneStreamUserId: Swift.String
  @objc public var moderator: Swift.String
  @objc public var resolution: Swift.String
  @objc public var userDevices: [RKCooperationCore.RKUserDevice]?
  @objc public var channelParam: RKCooperationCore.RKChannelParam?
  @objc required override dynamic public init()
  @objc deinit
}
public enum RKDeviceType : Swift.String, RKIHandyJSON.HandyJSONEnum {
  case Android
  case IOS
  case Web
  case PC
  case Glass
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKUserDevice : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var appVersion: Swift.Float
  @objc public var supportSlam: Swift.Bool
  @objc public var userInfo: RKCooperationCore.RKUser?
  public var deviceType: RKCooperationCore.RKDeviceType
  @objc required override dynamic public init()
  @objc deinit
}
@objc public protocol RKChannelMsgListener : ObjectiveC.NSObjectProtocol {
  @objc func onChannelMsgReceive(fromUserId: Swift.String, content: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKIRecordingStateModel : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  public var recordingState: RKCooperationCore.RKRecordState?
  @objc public var url: Swift.String?
  @objc public var startTime: Swift.String?
  @objc public var endTime: Swift.String?
  @objc public var message: Swift.String?
  @objc required override dynamic public init()
  @objc deinit
}
extension RKCooperationCore.RKSharePointManager : RKCooperationCore.RKSharePointInterface {
  @objc public static var shared: RKCooperationCore.RKSharePointManager! {
    @objc get
  }
  @objc dynamic public func establishRequest(channelId: Swift.String, userId: Swift.String)
  @objc dynamic public func establishRespond(channelId: Swift.String, userId: Swift.String)
  @objc dynamic public func stopSharePointVideo(channelId: Swift.String)
  @objc dynamic public func inviteSharePointVideo(channelId: Swift.String, userId: Swift.String)
  @objc dynamic public func stopInviteSharePointVideo(channelId: Swift.String)
  @objc dynamic public func sendPoint(channelId: Swift.String, slamColor: Swift.Int, markPoint: RKCooperationCore.RKPoint, pointWidth: Swift.Float)
}
public typealias RKOnSuccess = (_ data: Any?) -> Swift.Void
public typealias RKOnFailed = (_ error: Foundation.NSError?) -> Swift.Void
@objc public protocol RKLoginCallback : ObjectiveC.NSObjectProtocol {
  @objc func onLogin(reason: RKCooperationCore.RKCooperationCode)
  @objc func onLogout(reason: RKCooperationCore.RKCooperationCode)
  @objc func onJoinedChannelList(_ channelList: [RKCooperationCore.RKIJoinedChannel]?)
}
@objc public protocol RKCooperationInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKCooperationCore! { get }
  @objc func getCallManager() -> RKCooperationCore.RKCallManager
  @objc func getChannelManager() -> RKCooperationCore.RKChannelManager
  @objc func getShareDoodleManager() -> RKCooperationCore.RKShareDoodleManager
  @objc func getShareScreenManager() -> RKCooperationCore.RKShareScreenManager
  @available(iOS 11.0, *)
  @objc func getSharePointManager() -> RKCooperationCore.RKSharePointManager
  @objc func initWith(params: RKCooperationCore.RKCooperationCoreParams)
  @objc func login(with token: Swift.String, userInfo: RKCooperationCore.RKUser)
  @objc func updateToken(_ token: Swift.String)
  @objc func logout()
  @objc func destroy()
  @objc func addLogin(listener: RKCooperationCore.RKLoginCallback)
  @objc func removeLogin(listener: RKCooperationCore.RKLoginCallback)
  @objc func addIncomingCall(listener: RKCooperationCore.RKIncomingCallListener)
  @objc func removeIncomingCall(listener: RKCooperationCore.RKIncomingCallListener)
  @objc func addCall(listener: RKCooperationCore.RKCallListener)
  @objc func removeCall(listener: RKCooperationCore.RKCallListener)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKCooperationCore : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RKIncomingCallListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onReceiveCall(channelId: Swift.String, fromUserId: Swift.String, createTime: Swift.Int64, channelTitle: Swift.String, channelParam: RKCooperationCore.RKChannelParam?)
}
@objc public enum RKShareType : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case none = -1
  case close = 0
  case screen = 1
  case doodle = 2
  case slam = 3
  case pointVideo = 4
  case videoControl = 5
  case imageDoodle = 99
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKShareInfo : ObjectiveC.NSObject, Foundation.NSCopying, RKIHandyJSON.HandyJSON {
  @objc public var channelId: Swift.String
  @objc public var promoterUserId: Swift.String
  @objc public var executorUserId: Swift.String
  @objc public var shareImageUrl: Swift.String
  public var deviceType: RKCooperationCore.RKDeviceType
  @objc public var shareType: RKCooperationCore.RKShareType
  @objc required override dynamic public init()
  @objc public func copy(with zone: ObjectiveC.NSZone?) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKCooperationCoreParams : ObjectiveC.NSObject {
  @objc public var saasUrl: Swift.String
  @objc public var rtcUrl: Swift.String
  @objc public var wssUrl: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RKCallInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKCallManager! { get }
  @objc func invite(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc func cancel(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc func accept(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc func reject(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc func busy(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc func addCallState(listener: RKCooperationCore.RKCallListener)
  @objc func removeCallState(listener: RKCooperationCore.RKCallListener)
  @objc func addIncomingCall(listener: RKCooperationCore.RKIncomingCallListener)
  @objc func removeIncomingCall(listener: RKCooperationCore.RKIncomingCallListener)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKCallManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension RKCooperationCore.RKShareScreenManager : RKCooperationCore.RKShareScreenInterface {
  @objc public static var shared: RKCooperationCore.RKShareScreenManager! {
    @objc get
  }
  @objc dynamic public func startShareScreen(channelId: Swift.String)
  @objc dynamic public func stopShareScreen(channelId: Swift.String)
  @objc dynamic public func getShareScreenVideo(channelId: Swift.String, renderType: RKCooperationCore.RKRenderType, videoSize: RKCooperationCore.RKVideoSize, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
}
extension RKCooperationCore.RKCallManager : RKCooperationCore.RKCallInterface {
  @objc public static var shared: RKCooperationCore.RKCallManager! {
    @objc get
  }
  @objc dynamic public func destroy()
  @objc dynamic public func invite(channelId: Swift.String, userIdList: [Swift.String], onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func cancel(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func accept(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func busy(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func reject(channelId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onfailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func addIncomingCall(listener: RKCooperationCore.RKIncomingCallListener)
  @objc dynamic public func removeIncomingCall(listener: RKCooperationCore.RKIncomingCallListener)
  @objc dynamic public func addCallState(listener: RKCooperationCore.RKCallListener)
  @objc dynamic public func removeCallState(listener: RKCooperationCore.RKCallListener)
  @objc dynamic public func startCallListener()
}
extension RKCooperationCore.RKCallManager : RKRTC.RKCallEventHandler {
  @objc dynamic public func onReceiveCall(channelId: Swift.String, channelActionMsg: RKRTC.RKChannelActionMsg)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannel : ObjectiveC.NSObject {
  @objc public var channelId: Swift.String
  @objc public var channelName: Swift.String
  @objc public var participants: [RKCooperationCore.RKChannelParticipant]
  @objc public var shareInfo: RKCooperationCore.RKShareInfo?
  @objc public var channelParam: RKCooperationCore.RKChannelParam
  @objc public var participantSelf: RKCooperationCore.RKChannelParticipant? {
    @objc get
  }
  @objc public var userIds: [Swift.String]! {
    @objc get
  }
  @objc public func memberFrom(userId: Swift.String) -> RKCooperationCore.RKUser?
  @objc override dynamic public init()
  @objc deinit
}
extension RKCooperationCore.RKChannel : RKCooperationCore.RKChannelInterface {
  @objc dynamic public func addChannelMsg(listener: RKCooperationCore.RKChannelMsgListener)
  @objc dynamic public func removeChannelMsg(listener: RKCooperationCore.RKChannelMsgListener)
  @objc dynamic public func addChannel(listener: RKCooperationCore.RKChannelListener)
  @objc dynamic public func removeChannel(listener: RKCooperationCore.RKChannelListener)
  @objc dynamic public func addDevice(listener: RKCooperationCore.RKDeviceListener)
  @objc dynamic public func removeDevice(listener: RKCooperationCore.RKDeviceListener)
  @objc dynamic public func addRemoteDevice(listener: RKCooperationCore.RKRemoteDeviceListener)
  @objc dynamic public func removeRemoteDevice(listener: RKCooperationCore.RKRemoteDeviceListener)
  @objc dynamic public func addShare(listener: RKCooperationCore.RKShareListener)
  @objc dynamic public func removeShare(listener: RKCooperationCore.RKShareListener)
  @objc dynamic public func join(param: RKCooperationCore.RKChannelParam?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func leave()
  @objc dynamic public func kickOutUser(userId: Swift.String)
  @objc dynamic public func dispose()
  @objc dynamic public func enableUploadLocalAudioStream(enable: Swift.Bool)
  @objc dynamic public func enableUploadLocalVideoStream(enable: Swift.Bool)
  @objc dynamic public func enableAudioOutput(enable: Swift.Bool)
  @objc dynamic public func getVideoSize(userId: Swift.String) -> RKCooperationCore.RKVideoSize
  @objc dynamic public func isCreator(userId: Swift.String) -> Swift.Bool
  @objc dynamic public func getNetStatus(userId: Swift.String) -> RKCooperationCore.RKNetStatus
  @objc dynamic public func isAudioUpload(userId: Swift.String) -> Swift.Bool
  @objc dynamic public func isVideoUpload(userId: Swift.String) -> Swift.Bool
  @objc dynamic public func getVolumeStatus(userId: Swift.String) -> RKCooperationCore.RKVolumeStatus
  @objc dynamic public func getDisplayName(userId: Swift.String) -> Swift.String?
  @objc dynamic public func setCustom(property: Swift.String)
  @objc dynamic public func getCustomProperty() -> Swift.String?
  @objc dynamic public func sendChannelMessage(msg: Swift.String)
  @objc dynamic public func getChannelId() -> Swift.String?
  @objc dynamic public func getChannelState() -> RKCooperationCore.RKChannelState
  @objc dynamic public func getChannelPassword() -> Swift.String?
  @objc dynamic public func isLocalAudioUpload() -> Swift.Bool
  @objc dynamic public func isLocalVideoUpload() -> Swift.Bool
  @objc dynamic public func isLocalAudioOutput() -> Swift.Bool
  @objc dynamic public func isScreenShare() -> Swift.Bool
  @objc dynamic public func getScreenShareUserId() -> Swift.String?
  @objc dynamic public func switchStream(userId: Swift.String, isHighStram: Swift.Bool)
  @objc dynamic public func muteAll()
  @objc dynamic public func getMaxResolution() -> RKCooperationCore.RKResolution
  @objc dynamic public func startCamera()
  @objc dynamic public func stopCamera()
  @objc dynamic public func switchCamera()
  @objc dynamic public func setCameraProperty(width: Swift.Int32, height: Swift.Int32, framerate: Swift.Int32)
  @objc dynamic public func startShareScreen()
  @objc dynamic public func stopShareScreen()
  @objc dynamic public func startShareDoodle()
  @objc dynamic public func stopShareDoodle()
  @objc dynamic public func startShareImageDoodle(imageUrl: Swift.String)
  @objc dynamic public func stopShareImageDoodle()
  @objc dynamic public func inviteShareSlam(userId: Swift.String)
  @objc dynamic public func stopInviteShareSlam()
  @objc dynamic public func configVideoQuality(maxPublishBitrate: Swift.Int32, maxDelay: Swift.Int32)
}
@objc public protocol RKDeviceInterface : ObjectiveC.NSObjectProtocol {
  @objc static func openCamera()
  @objc static func closeCamera()
  @objc static func switchCamera()
  @objc static func setCameraProperty(width: Swift.Int32, height: Swift.Int32, framerate: Swift.Int32)
  @objc static func startCameraVideo(type: RKCooperationCore.RKRenderType, view: UIKit.UIView)
  @objc static func startAudio()
  @objc static func stopAudio()
  @objc static func enableSpeaker(_ enable: Swift.Bool)
  @objc static func startVideoFile()
  @objc static func setVideoFileFrame(_ bufferRef: CoreVideo.CVPixelBuffer, rotation: RKCooperationCore.RKRotation)
  @objc static func stopVideoFile()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKDevice : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKIJoinedChannel : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var channelId: Swift.String
  @objc public var password: Swift.String
  @objc public var channelName: Swift.String?
  @objc public var channelSubject: Swift.String?
  public var maxMembers: Swift.Int32?
  public var maxResolution: RKCooperationCore.RKResolution?
  @objc public var extraParams: Swift.String?
  @objc public var remark: Swift.String?
  @objc public var membersList: [Swift.String]?
  @objc required override dynamic public init()
  @objc deinit
}
@objc public protocol RKChannelListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onChannelCreated(channelId: Swift.String, channel: RKCooperationCore.RKChannel)
  @objc func onJoinChannelResult(channelId: Swift.String, result: Swift.Bool, reason: RKCooperationCore.RKCooperationCode)
  @objc func onUserScreenShareStateChanged(screenUserId: Swift.String?)
  @objc func onLeave(channelId: Swift.String?, reason: RKCooperationCore.RKCooperationCode)
  @objc optional func onUserKicked(channelId: Swift.String?, userIds: [Swift.String])
  @objc func onKicked(channelId: Swift.String?, byUserId: Swift.String)
  @objc func onDispose()
  @objc func onChannelStateChanged(newState: RKCooperationCore.RKChannelState, oldState: RKCooperationCore.RKChannelState)
  @objc func onCustomPropertyChanged(customProperty: Swift.String?)
  @objc func onRecordStateChanged(recordState: RKCooperationCore.RKRecordState)
  @objc func onUserJoinChannel(channelId: Swift.String, userId: Swift.String)
  @objc func onUserLeaveChannel(channelId: Swift.String?, userId: Swift.String?)
  @objc func onChannelShare(channelId: Swift.String?, shareType: RKCooperationCore.RKShareType)
  @objc optional func onRecordingSwitch(_ isOpen: Swift.Bool)
  @objc optional func onRecordingStateChanged(_ recordingStateData: RKCooperationCore.RKIRecordingStateModel)
}
@objc public protocol RKCooperationAPIInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKAPIManager! { get }
  @objc func login(companyId: Swift.String, userName: Swift.String, password: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func refreshToken(_ refreshToken: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func groupList(keyword: Swift.String?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func contactsList(keyword: Swift.String?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func getUserInfo(onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func uploadImage(imgs: [UIKit.UIImage], onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc func getUserBindToken(onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "use RKChannelManagerInterface.create")
  @objc func createMeeting(with resolutionRatio: Swift.String?, meetingName: Swift.String?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func heartBeat(lisence: Swift.String!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func getMeeting(with meetingId: Swift.String!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func changePwd(old: Swift.String!, new: Swift.String!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func getFileUrl(bucketName: Swift.String!, expireTime: ObjectiveC.NSInteger, fileName: [Swift.String]!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func queryUserMeetingRecordPage(with pageNum: Swift.Int, pageSize: Swift.Int, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func saveMeetingUsers(with meetingId: Swift.String!, userIdList: [Swift.String]!, sessionStatus: Swift.Int, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func deleteMeetingUsers(with meetingId: Swift.String!, userIdList: [Swift.String]!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func saveMeetingVideoUrl(with meetingId: Swift.String, bucket: Swift.String, videoUrl: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func reportDeviceInfo(with registerId: Swift.String?, deviceType: Swift.Int, isSlam: Swift.Bool, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func sendPushMessage(to userIdList: [Swift.String]?, notificationMessage: [Swift.String : Swift.String], extraMap: [Swift.String : Swift.String], onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @available(*, deprecated, message: "2.1.0 弃用")
  @objc func getTaggingColor(meetingId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKAPIManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKVideoParam : ObjectiveC.NSObject {
  @objc public var width: Swift.Int
  @objc public var height: Swift.Int
  @objc public var framerate: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum RKDoodleAction : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case unknown = -1
  case add = 0
  case revoke = 1
  case clear = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKDoodle : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var doodleId: Swift.String
  @objc public var doodleNo: Swift.Int
  @objc public var userId: Swift.String
  @objc public var actionType: RKCooperationCore.RKDoodleAction
  @objc public var brushColor: Swift.String
  @objc public var brushWidth: Swift.Float
  @objc public var points: [RKCooperationCore.RKPoint]
  @objc public func add(point: RKCooperationCore.RKPoint)
  @objc required override dynamic public init()
  @objc public init(action: RKCooperationCore.RKDoodleAction, brushColor: UIKit.UIColor?, brushWidth: Swift.Float = 1.0)
  @objc deinit
}
extension RKCooperationCore.RKVideoControlManager : RKCooperationCore.RKVideoControlInterface {
  @objc public static var shared: RKCooperationCore.RKVideoControlManager! {
    @objc get
  }
  @objc dynamic public func msgJson(_ message: RKCooperationCore.RKMessage) -> Swift.String
  @objc dynamic public func startVideoControll(_ messageBlock: ((_ message: RKCooperationCore.RKVideoControlMessage) -> Swift.Void))
  @objc dynamic public func establish(_ messageBlock: ((_ message: RKCooperationCore.RKVideoControlMessage) -> Swift.Void), isSendSelf: Swift.Bool = true)
  @objc dynamic public func stopVideoControll(_ messageBlock: (_ message: RKCooperationCore.RKVideoControlMessage) -> Swift.Void)
  @objc dynamic public func sendMessage(_ messageBlock: (_ message: RKCooperationCore.RKVideoControlMessage) -> Swift.Void)
}
@objc public protocol RKShareSlamInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKShareSlamManager! { get }
  @objc func inviteShareSlam(channelId: Swift.String, userId: Swift.String)
  @objc func stopInviteShareSlam(channelId: Swift.String)
  @objc func send(channelId: Swift.String, slamMessage: RKCooperationCore.RKSlamBaseMessage)
  @objc func revoke(channelId: Swift.String)
  @objc func clear(channelId: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKShareSlamManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public typealias RKCompletion = (_ response: RKCooperationCore.RKBaseResponse) -> Swift.Void
public let RKCooperationAPI: RKCooperationCore.RKCooperationProvider
@_inheritsConvenienceInitializers public class RKCooperationProvider : Moya.MoyaProvider<RKCooperationCore.RKAPIs> {
  @discardableResult
  public func requestCombine(_ target: RKCooperationCore.RKAPIs, _ completion: @escaping RKCooperationCore.RKCompletion) -> Moya.Cancellable
  @discardableResult
  override public func request(_ target: RKCooperationCore.RKAPIs, callbackQueue: Dispatch.DispatchQueue? = .none, progress: Moya.ProgressBlock? = .none, completion: @escaping Moya.Completion) -> Moya.Cancellable
  override public init(endpointClosure: @escaping Moya.MoyaProvider<RKCooperationCore.RKAPIs>.EndpointClosure = super, requestClosure: @escaping Moya.MoyaProvider<RKCooperationCore.RKAPIs>.RequestClosure = super, stubClosure: @escaping Moya.MoyaProvider<RKCooperationCore.RKAPIs>.StubClosure = super, callbackQueue: Dispatch.DispatchQueue? = nil, session: Moya.Session = super, plugins: [Moya.PluginType] = super, trackInflights: Swift.Bool = super)
  @objc deinit
}
public enum RKAPIs {
  case login(data: [Swift.String : Swift.String])
  case refreshToken(_: Swift.String)
  case groupList(keyword: Swift.String?)
  case contactsList(keyword: Swift.String?)
  case queryCompanyUserListByUserIdList(userIdList: [Swift.String])
  case queryCompanyUserListByLicenceList(licenseCodeList: [Swift.String])
  case meetingNew(meetingId: Swift.String?, licence: Swift.String?, resolutionRatio: Swift.String?, name: Swift.String?)
  case getUserInfo
  case getCompanyLisence
  case heartBeat(lisence: Swift.String!)
  case getMeeting(id: Swift.String!)
  case changePwd(old: Swift.String!, new: Swift.String!)
  case uploadImage(imgs: [UIKit.UIImage])
  case getUserBindToken
  case getFileUrl(bucketName: Swift.String!, expireTime: ObjectiveC.NSInteger, fileName: [Swift.String]!)
  case queryUserMeetingRecordPage(pageNum: Swift.Int = 1, pageSize: Swift.Int = 10)
  case saveMeetingUsers(meetingId: Swift.String!, userIdList: [Swift.String]!, sessionStatus: Swift.Int)
  case deleteMeetingUsers(meetingId: Swift.String!, userIdList: [Swift.String]!)
  case saveMeetingVideoUrl(meetingId: Swift.String, bucket: Swift.String, videoUrl: Swift.String)
  case reportDeviceInfo(registerId: Swift.String?, deviceType: Swift.Int, isSlam: Swift.Bool)
  case pushMessage(userIdList: [Swift.String]?, notificationMessage: [Swift.String : Swift.String], extraMap: [Swift.String : Swift.String])
  case getTaggingColor(meetingId: Swift.String)
  case reportMeetingInfo(meetingId: Swift.String, promoterUserId: Swift.String, executorUserId: Swift.String, shareType: Swift.Int, shareImageUrl: Swift.String)
  case queryReportMeetingInfo(meetingId: Swift.String)
  case addMeetingGraffiti(meetingId: Swift.String, graffitiJsonList: [Swift.String])
  case queryMeetingGraffiti(meetingId: Swift.String)
  case clearMeetingGraffiti(meetingId: Swift.String)
}
extension RKCooperationCore.RKAPIs : Moya.TargetType {
  public var describeString: Swift.String {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var method: Moya.Method {
    get
  }
  public var logLevel: RKILogger.RKLogLevel {
    get
  }
  public var task: Moya.Task {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
}
public struct RKError : Swift.Error {
}
@objc public enum RKCooperationCode : Swift.Int {
  case OK = 0
  case SDK_NOT_INIT = 1
  case INVALID_PARAM = 2
  case NETWORK_ERROR = 3
  case APP_KEY_ERROR = 4
  case AUTH_ERROR = 5
  case NO_SUCH_USER = 6
  case SERVER_LOGOUT = 7
  case LOGIN_ON_OTHER_DEVICE = 8
  case SEND_MESSAGE_FAILED = 9
  case SERVER_BUSY = 10
  case SERVER_CAN_NOT_REACH = 11
  case SERVER_FORBIDDEN = 12
  case SERVER_UNAVAILABLE = 13
  case QUERY_DNS_ERROR = 14
  case SERVER_INTERNAL_ERROR = 15
  case TOKEN_ACCOUNTID_MISMATCH = 16
  case TIMEOUT = 17
  case ALREADY_JOINED_CAHNNEL = 18
  case KICKED_OUT = 19
  case OFFLINE = 20
  case CHANNEL_OVER = 21
  case CHANNEL_FULL = 22
  case CHANNEL_INTERNAL_ERROR = 23
  case TOKEN_EXPIRED = 24
  case JOIN_BEFORE_LEAVE = 101
  case JOIN_UNKNOWN_ERROR = 102
  case JOIN_NOT_LOGIN = 103
  case SELF_QUIT = 104
  case CHANNEL_PASSWORD_ERROR = 105
  case PARAMS_ERROR = 198
  case OTHER_ERROR = 199
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RKCooperationCore.RKCooperationCore : RKCooperationCore.RKCooperationInterface {
  @objc public static var shared: RKCooperationCore.RKCooperationCore! {
    @objc get
  }
  @objc dynamic public func getCallManager() -> RKCooperationCore.RKCallManager
  @objc dynamic public func getChannelManager() -> RKCooperationCore.RKChannelManager
  @objc dynamic public func getShareDoodleManager() -> RKCooperationCore.RKShareDoodleManager
  @objc dynamic public func getShareScreenManager() -> RKCooperationCore.RKShareScreenManager
  @objc dynamic public func getShareSlamManager() -> RKCooperationCore.RKShareSlamManager
  @objc dynamic public func getSharePointManager() -> RKCooperationCore.RKSharePointManager
  @objc dynamic public func getVideoContrllMgr() -> RKCooperationCore.RKVideoControlManager
  @objc dynamic public func initWith(params: RKCooperationCore.RKCooperationCoreParams)
  @objc dynamic public func login(with token: Swift.String, userInfo: RKCooperationCore.RKUser)
  @objc dynamic public func updateToken(_ token: Swift.String)
  @objc dynamic public func logout()
  @objc dynamic public func destroy()
  @objc dynamic public func addLogin(listener: RKCooperationCore.RKLoginCallback)
  @objc dynamic public func removeLogin(listener: RKCooperationCore.RKLoginCallback)
  @objc dynamic public func addIncomingCall(listener: RKCooperationCore.RKIncomingCallListener)
  @objc dynamic public func removeIncomingCall(listener: RKCooperationCore.RKIncomingCallListener)
  @objc dynamic public func addCall(listener: RKCooperationCore.RKCallListener)
  @objc dynamic public func removeCall(listener: RKCooperationCore.RKCallListener)
}
@objc public protocol RKMessageInterface : ObjectiveC.NSObjectProtocol {
  @objc static func addChannelMsg(listener: RKCooperationCore.RKChannelMsgListener, channelId: Swift.String)
  @objc static func removeChannelMsg(listener: RKCooperationCore.RKChannelMsgListener, channelId: Swift.String)
  @objc static func sendChannelMessage(_ message: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKMessageCenter : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum RKMsgType : Swift.String, RKIHandyJSON.HandyJSONEnum {
  case UnExtra
  case Extra
  case Call
  case CallReject
  case CallBusy
  case CallCancel
  case CallAccept
  case Share
  case Doodle
  case Slam
  case PointVideo
  case VideoControl
  case KeepSilence
  case SyncUserInfo
  case UserInfoRequest
  case UserInfoResponse
  case OneStreamUserChange
  case SyncMeetingInfoRequest
  case SyncMeetingInfoResponse
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKMessage : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var version: Swift.Double
  @objc public var msgId: Swift.String
  @objc public var timestamp: Swift.Int64
  @objc public var fromUserId: Swift.String
  public var msgType: RKCooperationCore.RKMsgType
  @objc public var msgBody: Swift.String
  @objc required override dynamic public init()
  public init(msgType: RKCooperationCore.RKMsgType, msgBody: Swift.String)
  @objc deinit
}
extension RKCooperationCore.RKAPIManager : RKCooperationCore.RKCooperationAPIInterface {
  @objc public static let shared: RKCooperationCore.RKAPIManager
  @objc dynamic public var token: Swift.String {
    @objc get
    @objc set
  }
  @objc dynamic public func login(companyId: Swift.String, userName: Swift.String, password: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func refreshToken(_ refreshToken: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func groupList(keyword: Swift.String?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func contactsList(keyword: Swift.String?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func createMeeting(with resolutionRatio: Swift.String?, meetingName: Swift.String?, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func getUserInfo(onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func heartBeat(lisence: Swift.String!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func getMeeting(with meetingId: Swift.String!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func changePwd(old: Swift.String!, new: Swift.String!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func uploadImage(imgs: [UIKit.UIImage], onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func getUserBindToken(onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func getFileUrl(bucketName: Swift.String!, expireTime: ObjectiveC.NSInteger, fileName: [Swift.String]!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func queryUserMeetingRecordPage(with pageNum: Swift.Int = 1, pageSize: Swift.Int = 10, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func saveMeetingUsers(with meetingId: Swift.String!, userIdList: [Swift.String]!, sessionStatus: Swift.Int, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func deleteMeetingUsers(with meetingId: Swift.String!, userIdList: [Swift.String]!, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func saveMeetingVideoUrl(with meetingId: Swift.String, bucket: Swift.String, videoUrl: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func reportDeviceInfo(with registerId: Swift.String?, deviceType: Swift.Int, isSlam: Swift.Bool, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func sendPushMessage(to userIdList: [Swift.String]?, notificationMessage: [Swift.String : Swift.String], extraMap: [Swift.String : Swift.String], onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func getTaggingColor(meetingId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
}
extension RKCooperationCore.RKAPIManager {
  @objc dynamic public func queryCompanyUserList(by licenseCodeList: [Swift.String], onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func getCompanyLisence(onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func reportMeetingInfo(meetingId: Swift.String, promoterUserId: Swift.String, executorUserId: Swift.String, shareType: Swift.Int, shareImageUrl: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func queryReportMeetingInfo(meetingId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func addMeetingGraffiti(meetingId: Swift.String, graffitiJsonList: [Swift.String], onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func queryMeetingGraffiti(meetingId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func clearMeetingGraffiti(meetingId: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
}
@_hasMissingDesignatedInitializers public class RKBaseResponse {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKVideoCanvas : ObjectiveC.NSObject {
  @objc public var videoView: UIKit.UIView?
  @objc public func pause()
  @objc public func resume()
  @objc public func rotate(angle: Swift.Int)
  @objc public func snapshot(width: Swift.Int32, height: Swift.Int32, filePath: Swift.String) -> UIKit.UIImage?
  @objc public func focus(xPercent: Swift.Float, yPercent: Swift.Float)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum RKPointVideoAction : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case point = 0
  case req = 1
  case res = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKPointVideoMessage : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON, RKCooperationCore.RKPointInterface {
  @objc public var channelId: Swift.String
  @objc public var userId: Swift.String
  @objc public var messageId: Swift.String
  @objc public var color: Swift.Int
  @objc public var pointF: RKCooperationCore.RKPoint
  @objc public var width: Swift.Float
  @objc public var code: Swift.Int
  @objc public var errorMessage: Swift.String
  @objc public var actionType: RKCooperationCore.RKPointVideoAction
  @objc required override dynamic public init()
  @objc public init(messageType: RKCooperationCore.RKSlamMessageType)
  @objc deinit
}
extension RKCooperationCore.RKDevice : RKCooperationCore.RKDeviceInterface {
  @objc public static func openCamera()
  @objc public static func closeCamera()
  @objc public static func switchCamera()
  @objc public static func setCameraProperty(width: Swift.Int32, height: Swift.Int32, framerate: Swift.Int32)
  @objc public static func startCameraVideo(type: RKCooperationCore.RKRenderType, view: UIKit.UIView)
  @objc public static func startAudio()
  @objc public static func stopAudio()
  @objc public static func enableSpeaker(_ enable: Swift.Bool)
  @objc public static func startVideoFile()
  @objc public static func stopVideoFile()
  @objc public static func setVideoFileFrame(_ bufferRef: CoreVideo.CVPixelBuffer, rotation: RKCooperationCore.RKRotation)
}
public enum VideoCtrType : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case lightOnRequest
  case lightOnRespond
  case lightOffRequest
  case lightOffRespond
  case scaleModeRequest
  case scaleModeRespond
  case focusPointRequest
  case focusPointRespond
  case establishRequest
  case establishRespond
  case closeRequest
  case updateDeviceInfo
  case defaul
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKVideoControlMessage : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var messageId: Swift.String
  public var ctrType: RKCooperationCore.VideoCtrType
  @objc public var pointF: RKCooperationCore.RKPoint
  @objc public var scale: CoreGraphics.CGFloat
  @objc public var code: Swift.Int
  @objc public var errorMessage: Swift.String
  @objc public var promoterUserId: Swift.String?
  @objc public var executorUserId: Swift.String?
  @objc public var isLightSupport: Swift.Bool
  @objc public var isScaleSupport: Swift.Bool
  @objc public var isFocusSupport: Swift.Bool
  @objc public var minScale: Swift.Double
  @objc public var maxScale: Swift.Double
  @objc public var scaleGap: Swift.Double
  @objc required override dynamic public init()
  @objc public init(messageType: RKCooperationCore.RKSlamMessageType)
  @objc deinit
}
@objc public enum RKChannelState : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case STATE_IDLE = 0
  case STATE_JOINING = 1
  case STATE_JOINED = 2
  case STATE_LEAVING = 3
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKRecordState : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case recording = 0
  case uploading = 1
  case done = 2
  case error = 3
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKResolution : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case RESOLUTION_360 = 0
  case RESOLUTION_720 = 1
  case RESOLUTION_1080 = 2
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKRenderType : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case RENDER_FULL_AUTO = 0
  case RENDER_FULL_SCREEN = 1
  case RENDER_FULL_CONTENT = 2
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKVideoSize : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case SIZE_MIN = 1
  case SIZE_SMALL = 2
  case SIZE_LARGE = 3
  case SIZE_MAX = 4
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKVolumeStatus : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case NONE = 0
  case ZERO = 1
  case LOW = 2
  case MID = 3
  case HIGH = 4
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKNetStatus : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case DISCONNECT = 0
  case VERY_BAD = 1
  case BAD = 2
  case NORMAL = 3
  case GOOD = 4
  case VERY_GOOD = 5
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKCameraType : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case NONE = 0
  case FRONT = 1
  case BACK = 2
  case OTHER = 3
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKAudioOutputType : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case NONE = 0
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKRecordProtocol : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case AWS = 1
  case QI_NIU = 2
  case A_LI_YUN = 3
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@objc public enum RKRotation : ObjectiveC.NSInteger, RKIHandyJSON.HandyJSONEnum {
  case VideoRotation_0 = 0
  case VideoRotation_90 = 90
  case VideoRotation_180 = 180
  case VideoRotation_270 = 270
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public enum RKIStreamType : Swift.Int32, RKIHandyJSON.HandyJSONEnum {
  case high = 0
  case low
  public typealias RawValue = Swift.String
  public var rawValue: RKCooperationCore.RKIStreamType.RawValue {
    get
  }
  public init?(rawValue: RKCooperationCore.RKIStreamType.RawValue)
}
@objc public enum RKSlamMessageCode : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case OK = 0
  case ExceedTheMaximumNumberLimit = 1
  case SceneLost = 2
  case WithdrawalNothing = 3
  case MarkNoFeatures = 4
  case MarkNotSupport = 5
  case OtherError = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RKSlamMessageType : Swift.Int, RKIHandyJSON.HandyJSONEnum {
  case MarkDoodleUnknown = -1
  case MarkDoodleRequest = 0
  case MarkDoodleResponse = 1
  case MarkArrowRequest = 2
  case MarkArrowResponse = 3
  case MarkWithdrawalRequest = 4
  case MarkWithdrawalResponse = 5
  case MarkClearRequest = 6
  case MarkClearResponse = 7
  case MarkStopRequest = 8
  case MarkStopResponse = 9
  case MarkStartRequest = 10
  case MarkStartResponse = 11
  case MarkStatusUpdate = 12
  case MarkStateRequest = 13
  case MarkSlamExit = 14
  case MarkCircleRequest = 15
  case MarkCircleResponse = 16
  case MarkLocalImageRequest = 17
  case MarkLocalImageResponse = 18
  case MarkCloudImageRequest = 19
  case MarkCloudImageResponse = 20
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKSlamBaseMessage : ObjectiveC.NSObject, RKIHandyJSON.HandyJSON {
  @objc public var channelId: Swift.String
  @objc public var userId: Swift.String
  @objc public var messageId: Swift.String
  @objc public var color: Swift.Int
  @objc public var pointF: RKCooperationCore.RKPoint
  @objc public var messageType: RKCooperationCore.RKSlamMessageType
  @objc public var doodleContent: Swift.String
  @objc public var index: Swift.Int
  @objc public var imageUrl: Swift.String
  @objc public var scale: CoreGraphics.CGFloat
  @objc public var code: RKCooperationCore.RKSlamMessageCode
  @objc public var errorMessage: Swift.String
  @objc required override dynamic public init()
  @objc public init(messageType: RKCooperationCore.RKSlamMessageType)
  @objc deinit
}
@objc public protocol RKShareDoodleInterface : ObjectiveC.NSObjectProtocol {
  @objc static var shared: RKCooperationCore.RKShareDoodleManager! { get }
  @objc func clear()
  @objc func startShareDoodle(channelId: Swift.String)
  @objc func startShareDoodle(channelId: Swift.String, doodleImageUrl: Swift.String)
  @objc func joinShareDoodle(channelId: Swift.String)
  @objc func joinShareDoodle(channelId: Swift.String, doodleImageUrl: Swift.String)
  @objc func stopShareDoodle(channelId: Swift.String)
  @objc func add(channelId: Swift.String, doodle: RKCooperationCore.RKDoodle)
  @objc func revoke(channelId: Swift.String, doodle: RKCooperationCore.RKDoodle?)
  @objc func clear(channelId: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKShareDoodleManager : ObjectiveC.NSObject {
  @objc public var drawView: RKCooperationCore.RKDrawView {
    @objc get
    @objc set
  }
  @objc public var doodles: [RKCooperationCore.RKDoodle] {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RKRemoteDeviceListener {
  @objc optional func onUserUploadAudioChanged(userId: Swift.String, enabled: Swift.Bool)
  @objc optional func onUserUploadVideoChanged(userId: Swift.String, enabled: Swift.Bool)
  @objc optional func onUserNetStatusChanged(userId: Swift.String, netStatus: RKCooperationCore.RKNetStatus)
  @objc optional func onUserVideoSizeChanged(userId: Swift.String, videoSize: RKCooperationCore.RKVideoSize)
  @objc optional func onUserVolumeChange(userId: Swift.String, status: RKCooperationCore.RKVolumeStatus)
  @objc optional func onRemoteAudioStatus(_ userId: Swift.String, audioLevel: Swift.Double, totalAudioEnergy: Swift.Double, totalSamplesDuration: Swift.Double, packetsLost: Swift.Int32)
  @objc optional func onRemoteVideoStatus(_ userId: Swift.String, rid: Swift.String?, width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, bitrate: Swift.Int32, packetsLost: Swift.Int32)
  @objc optional func onVideoStreamUnstable(userId: Swift.String, lossRate: Swift.Float)
}
@objc public enum RKShareErrorCode : Swift.Int {
  case EXIST_SHARE = -1
  case OTHER_ERROR = 199
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RKShareListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onStartShareScreen(userId: Swift.String)
  @objc optional func onStopShareScreen(userId: Swift.String)
  @objc optional func onStartShareDoodle(userId: Swift.String)
  @objc optional func onStopShareDoodle(userId: Swift.String)
  @objc optional func onStartShareImageDoodle(userId: Swift.String, imgUrl: Swift.String)
  @objc optional func onStopShareImageDoodle(userId: Swift.String)
  @objc optional func onStartShareSlam(userId: Swift.String, executorUserId: Swift.String)
  @objc optional func onStopShareSlam(userId: Swift.String)
  @objc optional func onStartSharePointVideo(userId: Swift.String, executorUserId: Swift.String)
  @objc optional func onStopSharePointVideo(userId: Swift.String)
  @objc optional func onPointVideo(message: RKCooperationCore.RKPointVideoMessage)
  @objc optional func onVideoControl(message: RKCooperationCore.RKVideoControlMessage)
  @objc optional func onDoodle(message: RKCooperationCore.RKDoodle)
  @objc optional func onSlam(message: RKCooperationCore.RKSlamBaseMessage)
  @objc optional func onShareError(code: RKCooperationCore.RKShareErrorCode)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKChannelParticipant : ObjectiveC.NSObject {
  @objc public var channelId: Swift.String
  @objc public var userId: Swift.String
  @objc public var displayName: Swift.String?
  @objc public var netStatus: RKCooperationCore.RKNetStatus
  @objc public var volumeStatus: RKCooperationCore.RKVolumeStatus
  @objc public var videoSize: RKCooperationCore.RKVideoSize
  @objc public var isCreator: Swift.Bool
  @objc public var isSelf: Swift.Bool
  @objc public var isAudioStart: Swift.Bool
  @objc public var isVideoStart: Swift.Bool
  @objc public var videoCanvas: RKCooperationCore.RKVideoCanvas?
  @objc public var companyUser: RKCooperationCore.RKUser?
  @objc override dynamic public init()
  @objc deinit
}
extension RKCooperationCore.RKChannelParticipant {
  @objc dynamic public func startVideo(renderType: RKCooperationCore.RKRenderType, videoSize: RKCooperationCore.RKVideoSize, _ compeletBlock: @escaping (RKCooperationCore.RKVideoCanvas?) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RKRTCManager : ObjectiveC.NSObject {
  @objc public static let shared: RKCooperationCore.RKRTCManager
  @objc public func initClient(appKey: Swift.String?)
  @objc public func login(with saasUrl: Swift.String, wssUrl: Swift.String, userId: Swift.String, token: Swift.String, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc public func updateToken(_ token: Swift.String)
  @objc public func logout()
  @objc public func startCamera()
  @objc public func stopCamera()
  @objc public func switchCamera()
  @objc public func setCameraProperty(width: Swift.Int32, height: Swift.Int32, framerate: Swift.Int32)
  @objc public func startLocalVideo(_ participant: RKCooperationCore.RKChannelParticipant, renderType: RKCooperationCore.RKRenderType, in view: UIKit.UIView? = nil) -> RKCooperationCore.RKVideoCanvas?
  @objc public func startRemoteVideo(_ participant: RKCooperationCore.RKChannelParticipant, renderType: RKCooperationCore.RKRenderType, in view: UIKit.UIView? = nil, canvasBlock: @escaping (RKCooperationCore.RKVideoCanvas?) -> Swift.Void)
  @objc public func startVideoFile()
  @objc public func stopVideoFile()
  @objc public func setVideoFileFrame(_ bufferRef: CoreVideo.CVPixelBuffer, width: Swift.Int32, height: Swift.Int32, rotation: RKRTC.RKVideoRotation)
  @objc public func setVideoProperty(videoParam: RKCooperationCore.RKVideoParam)
  @objc public func startCameraVideo(renderType: RKCooperationCore.RKRenderType, in view: UIKit.UIView)
  @objc public func stopVideo(userId: Swift.String)
  @objc public func pause(userId: Swift.String)
  @objc public func resume(userId: Swift.String)
  @objc public func rotate(userId: Swift.String, angle: Swift.Int)
  @objc public func focus(userId: Swift.String, xPercent: Swift.Float, yPercent: Swift.Float)
  @objc public func startAudio()
  @objc public func stopAudio()
  @objc public func enableSpeaker(_ enable: Swift.Bool)
  @objc public func isSpeakerOn() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension RKCooperationCore.RKRTCManager : RKRTC.RKRtcClientListener {
  @objc dynamic public func onRtcClientConnected()
  @objc dynamic public func onRtcClientClosed()
  @objc dynamic public func onRtcClientError(_ errorCode: Foundation.NSError?)
  @objc dynamic public func onRtcClientKicked()
  @objc dynamic public func onJoinedChannelList(_ channelList: [RKRTC.RKJoinedChannel]?)
}
extension RKCooperationCore.RKRTCManager : RKRTC.RKChannelEventHandler {
  @objc dynamic public func onChannelMsg(from userId: Swift.String, msg: Swift.String)
  @objc dynamic public func onUserJoined(user: RKRTC.RKChannelUserInfo)
  @objc dynamic public func onUserLeft(userId: Swift.String)
  @objc dynamic public func onUserRefused(userId: Swift.String)
  @objc dynamic public func onUserBusy(userId: Swift.String)
  @objc dynamic public func onUserKicked(userIds: [Swift.String])
  @objc dynamic public func onKicked(byUserId: Swift.String)
  @objc dynamic public func onChannelMessageReceived(_ message: Swift.String)
  @objc dynamic public func onRemoteUserAudioChanged(userId: Swift.String, audio: Swift.Bool)
  @objc dynamic public func onRemoteUserVideoChanged(userId: Swift.String, video: Swift.Bool)
  @objc dynamic public func onUserStartScreenShare(userId: Swift.String)
  @objc dynamic public func onUserStopScreenShare(userId: Swift.String)
  @objc dynamic public func onStop(byUserId: Swift.String)
  @objc dynamic public func onUserFirstFrameRendered(_ userId: Swift.String)
  @objc dynamic public func onChannelExtraParamsChanged(userId: Swift.String?, extra: Swift.String?)
  @objc dynamic public func onRecordingSwitch(_ isOpen: Swift.Bool)
  @objc dynamic public func onRecordingStateChanged(_ recordingStateData: RKRTC.RKRecordingStateModel)
}
extension RKCooperationCore.RKRTCManager : RKRTC.RKAVQualityListener {
  @objc dynamic public func onVideoStreamUnstable(userId: Swift.String, lossRate: Swift.Float)
  @objc dynamic public func onRemoteAudioStatus(_ userId: Swift.String, audioLevel: Swift.Double, totalAudioEnergy: Swift.Double, totalSamplesDuration: Swift.Double, packetsLost: Swift.Int32)
  @objc dynamic public func onRemoteVideoStatus(_ userId: Swift.String, rid: Swift.String?, width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, bitrate: Swift.Int32, packetsLost: Swift.Int32)
  @objc dynamic public func onAudioStatus(audioLevel: Swift.Double, totalAudioEnergy: Swift.Double, totalSamplesDuration: Swift.Double)
  @objc dynamic public func onVideoRecordStatus(width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32)
  @objc dynamic public func onVideoPublishStatus(rid: Swift.String?, width: Swift.Int32, height: Swift.Int32, fps: Swift.Int32, bitrate: Swift.Int32, qualityLimitationReason: Swift.String?)
}
extension RKCooperationCore.RKRTCManager : RKRTC.RKVideoSource {
  @objc dynamic public func onCreate(_ consumer: RKRTC.RKVideoFrameConsumer)
  @objc dynamic public func onStart()
  @objc dynamic public func onStop()
}
extension RKCooperationCore.RKRTCManager {
  @objc dynamic public func startShareScreen() -> Swift.Bool
  @objc dynamic public func stopShareScreen()
}
extension RKCooperationCore.RKRTCManager {
  @objc dynamic public func addChannelMsg(listener: RKCooperationCore.RKChannelMsgListener)
  @objc dynamic public func removeChannelMsg(listener: RKCooperationCore.RKChannelMsgListener)
  @objc dynamic public func addChannel(listener: RKCooperationCore.RKChannelListener)
  @objc dynamic public func removeChannel(listener: RKCooperationCore.RKChannelListener)
  @objc dynamic public func addDevice(listener: RKCooperationCore.RKDeviceListener)
  @objc dynamic public func removeDevice(listener: RKCooperationCore.RKDeviceListener)
  @objc dynamic public func addRemoteDevice(listener: RKCooperationCore.RKRemoteDeviceListener)
  @objc dynamic public func removeRemoteDevice(listener: RKCooperationCore.RKRemoteDeviceListener)
  @objc dynamic public func join(channelId: Swift.String, joinParam: RKCooperationCore.RKChannelParam, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func leave()
  @objc dynamic public func leave(_ channelId: Swift.String)
  @objc dynamic public func kickOutUser(userId: Swift.String)
  @objc dynamic public func dispose()
  @objc dynamic public func enableUploadLocalAudioStream(enable: Swift.Bool)
  @objc dynamic public func enableUploadLocalVideoStream(enable: Swift.Bool)
  @objc dynamic public func enableAudioOutput(enable: Swift.Bool)
  @objc dynamic public func startServerRecording(channelId: Swift.String, bucket: Swift.String, fileName: Swift.String, resolution: RKCooperationCore.RKResolution, subStream: RKCooperationCore.RKIStreamType, onSuccess: RKCooperationCore.RKOnSuccess?, onFailed: RKCooperationCore.RKOnFailed?)
  @objc dynamic public func stopServerRecording(channelId: Swift.String, save: Swift.Bool)
  @objc dynamic public func isCreator(userId: Swift.String) -> Swift.Bool
  @objc dynamic public func getNetStatus(userId: Swift.String) -> RKCooperationCore.RKNetStatus
  @objc dynamic public func setCustomProperty(property: Swift.String)
  @objc dynamic public func getCustomProperty() -> Swift.String?
  @objc dynamic public func getChannelState() -> RKCooperationCore.RKChannelState
  @objc dynamic public func getChannelPassword() -> Swift.String?
  @objc dynamic public func isLocalAudioUpload() -> Swift.Bool
  @objc dynamic public func isLocalVideoUpload() -> Swift.Bool
  @objc dynamic public func isLocalAudioOutput() -> Swift.Bool
  @objc dynamic public func isScreenShare() -> Swift.Bool
  @objc dynamic public func getScreenShareUserId() -> Swift.String?
  @objc dynamic public func getMaxResolution() -> RKCooperationCore.RKResolution
  @objc dynamic public func switchStream(userId: Swift.String, isHighStram: Swift.Bool)
}
extension RKCooperationCore.RKRTCManager {
  @objc dynamic public func sendChannelMessage(content: Swift.String)
}
extension RKCooperationCore.RKRTCManager {
  @objc dynamic public func snapshot(userId: Swift.String, width: Swift.Int32, height: Swift.Int32, filePath: Swift.String) -> UIKit.UIImage?
}
extension RKCooperationCore.RKRTCManager {
  @objc dynamic public func configVideoQuality(maxPublishBitrate: Swift.Int32, maxDelay: Swift.Int32)
}
@objc public protocol RKOperationListener {
  @objc func onQuery(_ channelId: Swift.String, result: Swift.Bool, reason: RKCooperationCore.RKCooperationCode)
}
extension RKCooperationCore.RKDeviceType : Swift.Equatable {}
extension RKCooperationCore.RKDeviceType : Swift.Hashable {}
extension RKCooperationCore.RKDeviceType : Swift.RawRepresentable {}
extension RKCooperationCore.RKShareType : Swift.Equatable {}
extension RKCooperationCore.RKShareType : Swift.Hashable {}
extension RKCooperationCore.RKShareType : Swift.RawRepresentable {}
extension RKCooperationCore.RKDoodleAction : Swift.Equatable {}
extension RKCooperationCore.RKDoodleAction : Swift.Hashable {}
extension RKCooperationCore.RKDoodleAction : Swift.RawRepresentable {}
extension RKCooperationCore.RKCooperationCode : Swift.Equatable {}
extension RKCooperationCore.RKCooperationCode : Swift.Hashable {}
extension RKCooperationCore.RKCooperationCode : Swift.RawRepresentable {}
extension RKCooperationCore.RKMsgType : Swift.Equatable {}
extension RKCooperationCore.RKMsgType : Swift.Hashable {}
extension RKCooperationCore.RKMsgType : Swift.RawRepresentable {}
extension RKCooperationCore.RKPointVideoAction : Swift.Equatable {}
extension RKCooperationCore.RKPointVideoAction : Swift.Hashable {}
extension RKCooperationCore.RKPointVideoAction : Swift.RawRepresentable {}
extension RKCooperationCore.VideoCtrType : Swift.Equatable {}
extension RKCooperationCore.VideoCtrType : Swift.Hashable {}
extension RKCooperationCore.VideoCtrType : Swift.RawRepresentable {}
extension RKCooperationCore.RKChannelState : Swift.Equatable {}
extension RKCooperationCore.RKChannelState : Swift.Hashable {}
extension RKCooperationCore.RKChannelState : Swift.RawRepresentable {}
extension RKCooperationCore.RKRecordState : Swift.Equatable {}
extension RKCooperationCore.RKRecordState : Swift.Hashable {}
extension RKCooperationCore.RKRecordState : Swift.RawRepresentable {}
extension RKCooperationCore.RKResolution : Swift.Equatable {}
extension RKCooperationCore.RKResolution : Swift.Hashable {}
extension RKCooperationCore.RKResolution : Swift.RawRepresentable {}
extension RKCooperationCore.RKRenderType : Swift.Equatable {}
extension RKCooperationCore.RKRenderType : Swift.Hashable {}
extension RKCooperationCore.RKRenderType : Swift.RawRepresentable {}
extension RKCooperationCore.RKVideoSize : Swift.Equatable {}
extension RKCooperationCore.RKVideoSize : Swift.Hashable {}
extension RKCooperationCore.RKVideoSize : Swift.RawRepresentable {}
extension RKCooperationCore.RKVolumeStatus : Swift.Equatable {}
extension RKCooperationCore.RKVolumeStatus : Swift.Hashable {}
extension RKCooperationCore.RKVolumeStatus : Swift.RawRepresentable {}
extension RKCooperationCore.RKNetStatus : Swift.Equatable {}
extension RKCooperationCore.RKNetStatus : Swift.Hashable {}
extension RKCooperationCore.RKNetStatus : Swift.RawRepresentable {}
extension RKCooperationCore.RKCameraType : Swift.Equatable {}
extension RKCooperationCore.RKCameraType : Swift.Hashable {}
extension RKCooperationCore.RKCameraType : Swift.RawRepresentable {}
extension RKCooperationCore.RKAudioOutputType : Swift.Equatable {}
extension RKCooperationCore.RKAudioOutputType : Swift.Hashable {}
extension RKCooperationCore.RKAudioOutputType : Swift.RawRepresentable {}
extension RKCooperationCore.RKRecordProtocol : Swift.Equatable {}
extension RKCooperationCore.RKRecordProtocol : Swift.Hashable {}
extension RKCooperationCore.RKRecordProtocol : Swift.RawRepresentable {}
extension RKCooperationCore.RKRotation : Swift.Equatable {}
extension RKCooperationCore.RKRotation : Swift.Hashable {}
extension RKCooperationCore.RKRotation : Swift.RawRepresentable {}
extension RKCooperationCore.RKIStreamType : Swift.Equatable {}
extension RKCooperationCore.RKIStreamType : Swift.Hashable {}
extension RKCooperationCore.RKIStreamType : Swift.RawRepresentable {}
extension RKCooperationCore.RKSlamMessageCode : Swift.Equatable {}
extension RKCooperationCore.RKSlamMessageCode : Swift.Hashable {}
extension RKCooperationCore.RKSlamMessageCode : Swift.RawRepresentable {}
extension RKCooperationCore.RKSlamMessageType : Swift.Equatable {}
extension RKCooperationCore.RKSlamMessageType : Swift.Hashable {}
extension RKCooperationCore.RKSlamMessageType : Swift.RawRepresentable {}
extension RKCooperationCore.RKShareErrorCode : Swift.Equatable {}
extension RKCooperationCore.RKShareErrorCode : Swift.Hashable {}
extension RKCooperationCore.RKShareErrorCode : Swift.RawRepresentable {}
